{
	"folder_history":
	[
		"/Users/andy.liu/Documents/CRM"
	],
	"last_version": 3143,
	"last_window_id": 20,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 935.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/Users/andy.liu/Documents/itsm_notes.txt",
				"/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
				"/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap"
			],
			"find":
			{
				"height": 31.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"commi"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 31.0
			},
			"input":
			{
				"height": 0.0
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 58.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": false,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 1680.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"buffers":
			[
				{
					"contents": "Sr Director: paul nilsen\nOther Director / manager: Derick, Jay Alberts\n\nAnalysis: Wim Verjil, Gizem (Turky), Ana (queen) (Romania)\n\nManager: Nick Allen\n\nLeads: Nathalie, Silvio (OM)\n\nOM: Silvio, Marcela (Mercy), Meagueal (Mig)\n\nSOPS: Alex (Romania), Anibal (lead), Denialla, Eda (Turky), Asia, Asna (Turky), Nikki (Greece), Aisling (Ireland), Ioana, Mirna (Partner portal)\n\nRenewals: Marco (Italy), Claudio (manager), Andreea, Isabela \n\n\n7654312\n\n543721",
					"settings":
					{
						"buffer_size": 453,
						"line_ending": "Unix",
						"name": "Sr Director: paul nilsen"
					}
				},
				{
					"contents": "",
					"settings":
					{
						"buffer_size": 0,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "var SalesTeamSecurityHelper = Class.create();\n\nSalesTeamSecurityHelper.prototype = {\n    initialize: function() {\n        this.logger = SalesTeamLogger.getInstance(\"SalesTeamSecurityHelper\");\n        this.cache = SalesTeamCache.getInstance();\n        this.jfDAO = new SalesTeamJobFunctionDAO();\n        this.stDAO = new SalesTeamAccessDAO();\n        this.util = SalesTeamUtil.getInstance();\n        this.staService = new SalesTeamAccessService();\n    },\n    _jf_role_conf: {\n        SalesTeam_ps_solution_development_manager: \"ps_solution_dev_manager_opportunity\",\n        sc_manager: \"solution_consultant_opportunity,solution_consultant_account\",\n        sales_account_solution_consultant_write: \"solution_consultant_opportunity,solution_consultant_account\",\n        ps_operations: \"bi_reporting\"\n    },\n\n\n    _jf_group_conf: {\n        \"SC RFP Admin\": \"solution_consultant_opportunity,solution_consultant_account\",\n        \"Solution Consultant Executives\": \"solution_consultant_opportunity,solution_consultant_account\",\n        \"SC Managers\": \"solution_consultant_opportunity,solution_consultant_account\",\n        \"SC RFP\": \"solution_consultant_opportunity,solution_consultant_account\"\n\n    },\n\n    /*\n     * Check if the user has access in Sales Team for the specific record with given ACL in cache\n     * @method checkSTAByACLFromCache\n     * @param {GlideRecord} record - the record being checked\n     * @param {string} userSysId - Sys Id of the User\n     * @param {string} aclSysId - the sys_id of the ACL\n     * @param {string} operation - operation to be performed on record (Optional)\n     * @param {string} jfNumbers - Number of comma separated Job Function (Optional)\n     * @return {boolean}\n     */\n    _checkSTAByACLFromCache: function(record, aclSysId, operation, jfNumbers) {\n        this.logger.debug(\"checkSTAByACLFromCache : begin\");\n        this.logger.debug(\"checkSTAByACLFromCache-> record: \" + record + \" sys id \" + record.sys_id + \"; aclSysId: \" + aclSysId);\n        if (!record.sys_id || !aclSysId) {\n            return false;\n        }\n        if (this._findInLevel1Cache(record.sys_id, aclSysId)) {\n            return true;\n        }\n        var tableName = this.util.getTableName(record);\n        if (record && aclSysId) {\n            var stTable = SalesTeamConstants.jfaTableToSTTableMap[tableName];\n\n            //Check in cache first\n            var hasAccess = this.cache.userHasAccessByACL(record, aclSysId, tableName, jfNumbers);\n            if (hasAccess === true || hasAccess === false) {\n                if (hasAccess === true) {\n                    this._addToLevel1Cache(record.sys_id, aclSysId);\n                }\n                this.logger.debug(\"checkSTAByACLFromCache-> return hasAccess: \" + hasAccess);\n                return hasAccess;\n            }\n\n            //Not in Cache. Update cache.\n            this.cache.addToCache(stTable, record);\n            //Check in cache again\n            hasAccess = this.cache.userHasAccessByACL(record, aclSysId, tableName, jfNumbers);\n            this.logger.debug(\"checkSTAByACLFromCache-> After cache hasAccess: 2\" + hasAccess);\n            if (hasAccess === true || hasAccess === false) {\n                if (hasAccess === true) {\n                    this._addToLevel1Cache(record.sys_id, aclSysId);\n                }\n                this.logger.debug(\"checkSTAByACLFromCache-> return hasAccess: 2\" + hasAccess);\n                return hasAccess;\n            }\n        }\n\n        this.logger.debug(\"checkSTAByACLFromCache-> hasAccess: false 3\");\n        return false;\n\n    },\n    _findInLevel1Cache: function(recSysId, aclSysId) {\n        this.logger.debug(\"_findInLevel1Cache : begin\");\n        var previouslyAccessRecords = this._getLevel1Cache();\n        var acls = previouslyAccessRecords[recSysId];\n\n        if (acls && acls.indexOf(aclSysId) > -1) {\n            return true;\n        } else {\n            return false;\n        }\n        this.logger.debug(\"_findInLevel1Cache : end\");\n    },\n    _getLevel1Cache: function() {\n        if (typeof SalesTeamL1Cache != 'undefined') {\n            return SalesTeamL1Cache;\n        }\n\n        SalesTeamL1Cache = {};\n        return SalesTeamL1Cache;\n\n    },\n    _addToLevel1Cache: function(recSysId, aclSysId) {\n        this.logger.debug(\"_addToLevel1Cache : begin\");\n        var previouslyAccessRecords = this._getLevel1Cache();\n        var acls = previouslyAccessRecords[recSysId];\n        if (acls) {\n            acls = acls + \",\" + aclSysId;\n        } else {\n            acls = aclSysId;\n        }\n        previouslyAccessRecords[recSysId] = acls;\n        this.logger.debug(\"_addToLevel1Cache : end\");\n    },\n\n    /*\n     * Check if the user has access in Sales Team for the specific record with given JF in cache\n     * @method checkSTAByJFFromCache\n     * @param {string} record - Glide Record\n     * @param {string} operation - operation to be performed on record\n     * @param {string} jfNumbers - Comma separated Job Function\n     * @return {boolean}\n     */\n    _checkSTAByJFFromCache: function(record, jfNumbers) {\n        this.logger.debug(\"checkSTAByJFFromCache - begin\");\n        this.logger.debug(\"checkSTAByJFFromCache-> record: \" + record.sys_id + \" jfNumbers: \" + jfNumbers + \"  \" + record.isValidRecord() + \" \" + record.number);\n        var tableName = this.util.getTableName(record);\n\n        if (record && jfNumbers) {\n            var stTable = SalesTeamConstants.jfaTableToSTTableMap[tableName];\n\n            //Check in cache first\n            var hasAccess = this.cache.userHasAccessByJF(record, tableName, jfNumbers);\n            gs.log(\" userHasAccessByJF --> \" + hasAccess, \"ADE\");\n            this.logger.debug(\"checkSTAByJFFromCache in if-> hasAccess: \" + hasAccess);\n            if (hasAccess === true || hasAccess === false) {\n                this.logger.debug(\"checkSTAByJFFromCache-> return hasAccess: \" + hasAccess);\n                return hasAccess;\n            }\n\n            //Not in Cache. Update cache.\n            this.cache.addToCache(stTable, record);\n            //Check in cache again\n            hasAccess = this.cache.userHasAccessByJF(record, tableName, jfNumbers);\n            this.logger.debug(\"checkSTAByJFFromCache-> After cache hasAccess: \" + hasAccess);\n            if (hasAccess === true || hasAccess === false) {\n                this.logger.debug(\"checkSTAByJFFromCache-> return hasAccess: \" + hasAccess);\n                return hasAccess;\n            }\n        }\n\n        this.logger.debug(\"checkSTAByJFFromCache - end hasAccess: false\");\n        this.logger.debug(\"checkSTAByJFFromCache - end\");\n        return false;\n    },\n\n    /*\n     * Check if the user has access in Sales Team for the specific record\n     * @method checkSTAFromCache\n     * @param {string} record - Glide Record\n     * @param {string} operation - operation to be performed on record\n     * @param {string} jfNumbers - Number of comma separated Job Function\n     * @return {boolean}\n     */\n    _checkSTAFromCache: function(record, operation) {\n        this.logger.debug(\"checkSTAFromCache-> record: \" + record.sys_id);\n        this.logger.debug(\"checkSTAFromCache-> operation: \" + operation);\n        var tableName = this.util.getTableName(record);\n\n        if (record && operation) {\n            var stTable = SalesTeamConstants.jfaTableToSTTableMap[tableName];\n\n            //Check in cache first\n            var hasAccess = this.cache.userHasAccess(record, stTable, operation);\n            this.logger.debug(\"checkSTAFromCache-> hasAccess: \" + hasAccess);\n            if (hasAccess === true || hasAccess === false) {\n                this.logger.debug(\"checkSTAFromCache-> return hasAccess: \" + hasAccess);\n                return hasAccess;\n            }\n\n            //Not in Cache. Update cache.\n            this.cache.addToCache(stTable, record);\n            //Check in cache again\n            hasAccess = this.cache.userHasAccess(record, stTable, operation);\n            this.logger.debug(\"checkSTAFromCache-> After cache hasAccess: \" + hasAccess);\n            if (hasAccess === true || hasAccess === false) {\n                this.logger.debug(\"checkSTAFromCache-> return hasAccess: \" + hasAccess);\n                return hasAccess;\n            }\n        }\n\n        this.logger.debug(\"checkSTAFromCache-> hasAccess: false\");\n        return false;\n    },\n\n    /*\n     * Check if the user has access in Sales Team for the specific record\n     * @method _getMyJobFuntions\n     * @param record - Glide Record\n     * @return cacheData[record.sys_id] -> comma seperated values of Jobfunction numbers\n     */\n    _getMyJobFuntions: function(record) {\n        this.logger.debug(\"getMyJobFuntions - begin\");\n        var tableName = this.util.getTableName(record);\n        var user = gs.getUserID();\n        tableName = SalesTeamConstants.jfaTableToSTTableMap[tableName];\n        this.logger.debug(\"getMyJobFuntions cacheData : \" + tableName + \"_JF\");\n        var cacheData = this.cache.getSessionData(tableName + \"_JF\"); // get the job function from the cache for account and opty\n        var territoryJfs = \"\";\n        if (tableName == \"u_st_territory\") {\n            territoryJfs = this.stDAO.getUserJFsforRecord(user, record, tableName);\n        }\n        /*if user has elevated access then return job function for opportunity and account level */\n        var elevatedSta = this.stDAO.getElevatedSta(tableName, \"u_rec_sys_id=\" + record.sys_id);\n        var sta = this.stDAO.getUsersDirectAssignments(\"u_st_territory\", user, \"u_active=true^u_job_function.u_jf_keySTARTSWITHelevated\");\n        while (elevatedSta.next()) {\n            sta.restoreLocation();\n            var elevatedJfs = \"\";\n            while (sta.next()) {\n                var territory = sta.u_rec_sys_id;\n                if (tableName == \"u_st_account\") {\n                    var acct_territory = elevatedSta.u_rec_sys_id.u_account_territory;\n                    if (acct_territory.u_region == territory || acct_territory.u_area == territory || acct_territory.u_geo == territory || acct_territory.u_global == territory ||\n                        acct_territory.u_area == territory || acct_territory.u_district == territory) {\n                        elevatedJfs = elevatedJfs + \",\" + sta.u_job_function.u_number;\n                    }\n                } else {\n                    if (elevatedSta.u_region == territory || elevatedSta.u_area == territory || elevatedSta.u_geo == territory || record.u_global == territory ||\n                        elevatedSta.u_area == territory || elevatedSta.u_district == territory) {\n                        elevatedJfs = elevatedJfs + \",\" + sta.u_job_function.u_number;\n                    }\n                }\n            }\n        }\n        if (tableName == \"u_st_territory\") {\n            sta.restoreLocation();\n            while (sta.next()) {\n                var territory = sta.u_rec_sys_id;\n                if (record.u_region == territory || record.u_area == territory || record.u_geo == territory || record.u_global == territory ||\n                    record.u_area == territory || record.u_district == territory) {\n                    elevatedJfs = elevatedJfs + \",\" + sta.u_job_function.u_number;\n                }\n            }\n        }\n        this.logger.debug(\"getMyJobFuntions for user : \" + gs.getUserName() + ' are : ' + cacheData[record.sys_id]);\n        this.logger.debug(\"getMyJobFuntions cacheData : \" + cacheData[record.sys_id]);\n        return cacheData[record.sys_id] + \",\" + territoryJfs + \",\" + elevatedJfs;\n    },\n\n    /*\n     * Check if the user has access in Sales Team for the specific record\n     * @method _getMyAllowedJobFuntions\n     * @param  record - Glide Record\n     * @return keys : array of unique allowed job function sys id's\n     */\n    _getMyAllowedJobFuntions: function(record) {\n        this.logger.debug(\"_getMyAllowedJobFuntions : begin\");\n        var jobFnsStr = this._getMyJobFuntions(record);\n        this.logger.debug(\"_getMyAllowedJobFuntions : jobFnsStr  : \" + jobFnsStr);\n        var jobFns = jobFnsStr.split(\",\");\n\n        var uniqueAllowedJfs = {};\n        for (var i = 0; i < jobFns.length; i++) {\n            var jfNumber = jobFns[i];\n            var jobFunctionGr = this.jfDAO.findJobFunctionByNumber(jfNumber);\n            var allowedJfSysIds = jobFunctionGr.u_allowed_jf + \"\";\n            allowedJfSysIds = allowedJfSysIds.split(\",\");\n\n            for (var c = 0; c < allowedJfSysIds.length; c++) {\n                uniqueAllowedJfs[allowedJfSysIds[c]] = allowedJfSysIds[c];\n            }\n\n        }\n        var keys = [];\n        for (var k in uniqueAllowedJfs) {\n            keys.push(k);\n        }\n\n        this.logger.debug(\"_getMyAllowedJobFuntions : end returns \");\n        return keys;\n    },\n    /*\n     * Check if the user has access to revoke user access\n     * @method _isAllowToRevoke\n     * @param  record - STA Glide Record\n     * @return boolean\n     */\n    _isAllowToRevoke: function(record) {\n        this.logger.debug(\"_isAllowToRevoke : begin\");\n        if (gs.hasRole(\"sales_team_admin\")) {\n            return true;\n        }\n        if (gs.hasRole(\"SalesTeam_ps_solution_development_manager\") && (record.u_job_function.u_jf_key == 'ps_solution_dev_manager_opportunity')) {\n            return true;\n        }\n        if (gs.getUser().isMemberOf(\"Professional Services Ops\") && (record.u_job_function.u_jf_key == 'ps_champion_account' || record.u_job_function.u_jf_key == 'bi_reporting')) {\n            return true;\n        }\n        var user = gs.getUserID();\n        if (user == record.u_user.sys_id) {\n            return false;\n        }\n        var myAllowedJFs = this._getMyAllowedJobFuntions(record.u_rec_sys_id);\n        this.logger.debug(\"_isAllowToRevoke : \" + myAllowedJFs);\n        var jf = record.u_job_function + \"\";\n        if (myAllowedJFs.indexOf(jf) !== -1) {\n            return true;\n        }\n        this.logger.debug(\"_isAllowToRevoke : end\");\n        return false;\n    },\n\n    /*\n     * Check if the user has access in Sales Team for the specific record\n     * @method _getJFQualifier\n     * @param  record - Glide Record\n     * @rec_type  string - to check if record is of type sales team table or plain sales table like opportunity/accounts\n     * @return {string} encoded query with the allowed job functions\n     */\n    _getJFQualifier: function(record, rec_type) {\n        if (!record) {\n            this.logger.debug(\"record is not defined \", \"JF\");\n            return \"sys_id=-1\";\n        }\n        var tableName = this.util.getTableName(record);\n        var territoryJfQuery = \"\";\n        if (tableName == \"u_st_territory\") {\n            var type = record.u_rec_sys_id.u_type;\n            territoryJfQuery = \"^u_allowed_territory_valuesLIKE\" + type + \"^ORu_allowed_territory_valuesISEMPTY\";\n        }\n        if (rec_type != \"sales\") {\n            tableName = SalesTeamConstants.stTableToJFATableMap[tableName];\n        }\n\n        var result = \"u_active=true\" + territoryJfQuery + \"^u_table=\" + tableName + \"^u_jf_keyNOT LIKEpartner_manager_territory^ORu_jf_keyISEMPTY^u_jf_keyNOT LIKEsecondary_sales_rep^ORu_jf_keyISEMPTY\";\n        if (gs.hasRole(\"sales_team_admin\") || gs.hasRole(\"sales_team_create_no_restriction\")) {\n            return result;\n        }\n        var allowedJFs = \"\";\n        if (rec_type != \"sales\") {\n            allowedJFs = this._getMyAllowedJobFuntions(record.u_rec_sys_id.getRefRecord());\n        } else {\n            allowedJFs = this._getMyAllowedJobFuntions(record);\n        }\n\n        this.logger.debug(\" SalesTeamSecurityHelper.getJFQualifier 1\" + record.u_rec_sys_id);\n\n\n        var allowedJsByRoleGroup = \"\";\n\n        for (var key in this._jf_role_conf) {\n            if (gs.hasRole(key)) {\n                allowedJsByRoleGroup = allowedJsByRoleGroup + \",\" + this._jf_role_conf[key];\n            }\n        }\n\n\n        for (var keys in this._jf_group_conf) {\n            if (gs.getUser().isMemberOf(keys)) {\n                allowedJsByRoleGroup = allowedJsByRoleGroup + \",\" + this._jf_group_conf[keys];\n            }\n        }\n        if (gs.getUser().isMemberOf(\"Professional Services Ops\")) {\n            allowedJsByRoleGroup = allowedJsByRoleGroup + \",ps_champion_account\";\n        }\n        if (allowedJsByRoleGroup) {\n\n            this.logger.debug(\"SalesTeamSecurityHelper.getJFQualifier \" + allowedJsByRoleGroup, \"Allowed JF\");\n\n            result += \"^u_jf_keyIN\" + allowedJsByRoleGroup + \"^ORsys_idIN\" + allowedJFs.join(\",\");\n            return result;\n\n\n        }\n\n\n        this.logger.debug(\" SalesTeamSecurityHelper.getJFQualifier \" + \"u_active=true^u_table=\" + tableName + \"^sys_idIN\" + allowedJFs.join(\",\"), \"JF\");\n\n        result += \"^sys_idIN\" + allowedJFs.join(\",\");\n        return result;\n    },\n    _getAllAccountQualifier: function(record, rec_type, condition) {\n        if (condition) {\n            condition = condition + \"^skip_before_query=true\";\n        } else {\n            condition = \"skip_before_query=true\";\n        }\n        return condition;\n    },\n    _getDirectAndTerritoryAccounts: function(record, rec_type, condition) {\n        if (condition) {\n            condition = condition + \"^account_and_above_only=true\";\n        } else {\n            condition = \"account_and_above_only=true\";\n        }\n        return condition;\n    },\n\n    /*\n     * Check if the user has access in Sales Team for the specific record\n     * @method _checkStaAccess\n     * @param  record - Glide Record\n     * @return {boolean} true or false\n     */\n    _checkStaAccess: function(record) {\n        if (!record) {\n            this.logger.debug(\"record is not defined \", \"JF\");\n            return;\n        }\n\n        var access = false;\n        var jfKey = record.u_job_function.u_jf_key;\n        if (gs.hasRole(\"sales_team_admin\")) {\n            access = true;\n        } else {\n            if (record.isNewRecord()) {\n                return true;\n            }\n            var allowedJFs = this._getMyAllowedJobFuntions(record.u_rec_sys_id.getRefRecord());\n            var currentJf = record.u_job_function.sys_id + \"\";\n            if (allowedJFs.indexOf(currentJf) != -1) {\n                access = true;\n            }\n        }\n        if (!access) {\n            for (var key in this._jf_role_conf) {\n                if (gs.hasRole(key) && (jfKey == 'solution_consultant_opportunity' || jfKey == 'solution_consultant_account')) {\n                    access = true;\n                }\n            }\n        }\n        if (!access) {\n            for (var keys in this._jf_group_conf) {\n                if (gs.getUser().isMemberOf(keys) && (jfKey == 'solution_consultant_opportunity' || jfKey == 'solution_consultant_account')) {\n                    access = true;\n                }\n            }\n        }\n        if (!access && gs.getUser().isMemberOf(\"Professional Services Ops\") && (jfKey == 'ps_champion_account' || jfKey == 'bi_reporting')) {\n            return true;\n        }\n        return access;\n    },\n\n    /*\n     * Solution consultant managers should be able to add Solution consultants at territory level\n     * validated based on SC manager JF record\n     * @method _getAllowedJFsforSCManager\n     * @param {GlideRecord} sta - the current sta record the user is assigning / revoking\n     * @param {string} userSysId\n     * @return {boolean} true or false - if the user has an entry on the parent record, return true; otherwise return false\n     */\n    _getAllowedJFsforSCManager: function(sta, userSysId) {\n\n        var ret = false;\n        var record = sta.u_rec_sys_id.getRefRecord();\n        //solution consultant managemnet JF is added at only territory level\n        if (record.getTableName().toString() == 'u_sales_territory') {\n            var scManagerJF = this.jfDAO.findJobFunctionByNumber(gs.getProperty('sls.salesteam.solution_consultant_management') + ''); //solution consultant management JF number\n            var isSCManager = this.stDAO.isRecordExistForUser(record, userSysId, scManagerJF);\n            if (isSCManager) { //if logged in user is SC manager\n                if (scManagerJF.u_allowed_jf.indexOf(sta.u_job_function) > -1) {\n                    ret = true;\n                }\n            }\n        }\n        return ret;\n    },\n\n    /*\n     * Checks whether a user has a Sales Team entry for the parent record of the current record.\n     * @method _isAssignmentAllowed\n     * @param {GlideRecord} sta - the current sta record the user is assigning / revoking\n     * @param {string} userSysId\n     * @return {boolean} true or false - if the user has an entry on the parent record, return true; otherwise return false\n     */\n    _isAssignmentAllowed: function(sta, userSysId) {\n        this.logger.debug('_isAssignmentAllowed - STA: ' + sta.sys_id + ', User: ' + userSysId + ', territory: ' + sta.u_rec_sys_id.u_name + ', job function: ' + sta.u_job_function.sys_id);\n        if (gs.hasRole(\"sales_team_admin\")) {\n            return true;\n        }\n        if (gs.hasRole(\"SalesTeam_ps_solution_development_manager\") && (sta.u_job_function.u_jf_key == 'ps_solution_dev_manager_opportunity')) {\n            return true;\n        }\n        if (gs.getUser().isMemberOf(\"Professional Services Ops\") && (sta.u_job_function.u_jf_key == 'ps_champion_account' || sta.u_job_function.u_jf_key == 'bi_reporting')) {\n            return true;\n        }\n\n        //if the logged in user is SC manager allow him to add new JFs based on security JF record allow JF field\n        if (this._getAllowedJFsforSCManager(sta, userSysId)) {\n            return true;\n        }\n\n        var record = sta.u_rec_sys_id.getRefRecord();\n        var jfSysId = sta.u_job_function //.sys_id; //STRY0504460\n        var parentRecord = null;\n        switch (record.getTableName().toString()) {\n            case 'u_sales_territory':\n                parentRecord = record.u_parent.getRefRecord();\n                break;\n            case 'sales_account':\n                parentRecord = record.u_account_territory.getRefRecord();\n                break;\n            case 'sales_opportunity':\n                parentRecord = record.account.getRefRecord();\n                break;\n            default:\n                this.logger.debug('_isAssignmentAllowed - Invalid record table');\n                gs.addErrorMessage('Authorization Check error. Aborting...');\n                return false;\n        }\n        this.logger.debug('_isAssignmentAllowed - parent found: ' + parentRecord.getTableName() + ': ' + parentRecord.sys_id);\n        return this.stDAO.isRecordExistForUser(parentRecord, userSysId, jfSysId) || this._userHasElevatedAccess(sta, userSysId);\n    },\n    /*\n     * Checks whether a user has a Elevated Access on STA.\n     * @method _userHasElevatedAccess\n     * @param {GlideRecord} sta - the current sta record the user is assigning / revoking\n     * @param {string} userSysId\n     * @return {boolean} true or false - if the user has an entry on the parent record, return true; otherwise return false\n     */\n    _userHasElevatedAccess: function(sta, userSysId) {\n        var gr = new GlideAggregate(\"u_st_territory\");\n        gr.addAggregate('COUNT');\n        gr.addQuery(\"u_active\", true);\n        gr.addQuery(\"u_user\", userSysId);\n        gr.addEncodedQuery(\"u_job_function.u_jf_keySTARTSWITHelevated\");\n        var record = sta.u_rec_sys_id.getRefRecord();\n        switch (record.getTableName().toString()) {\n            case 'u_sales_territory':\n                var parentTerritories = this.util.getParentTerritories(sta.u_rec_sys_id);\n                gr.addQuery(\"u_rec_sys_id\", \"IN\", parentTerritories);\n                break;\n            case 'sales_account':\n                var parentTerritories = this.util.getParentTerritories(record.u_account_territory);\n                gr.addQuery(\"u_rec_sys_id\", \"IN\", parentTerritories);\n                break;\n            case 'sales_opportunity':\n                var parentTerritories = this.util.getParentTerritories(record.account.u_account_territory);\n                gr.addQuery(\"u_rec_sys_id\", \"IN\", parentTerritories);\n                break;\n            default:\n                this.logger.debug('_userHasElevatedAccess - Invalid record table');\n        }\n        gr.query();\n        var count = 0;\n        if (gr.next())\n            count = gr.getAggregate('COUNT');\n\n        return count > 0 ? true : false;\n\n    },\n    /*\n     * Check if user is assigend to job function anywhere\n     * @method _isUserAssignedWithJF\n     * @param {String} user - user\n     * @param {string} jfKey\n     * @return {boolean} true or false - if the user has an entry on the parent record, return true; otherwise return false\n     */\n    _isUserAssignedWithJF: function(user, jfKey) {\n        var isAssigned = this.stDAO.isUserAssignedWithJF(user, jfKey);\n        return isAssigned;\n    },\n    _checkAccountAccessByDuns: function(record) {\n        session.putClientData('skip_before_st_query_business_rule', 'true');\n        var global_duns = record.u_dnb.u_global_ultimate_d_u_n_s_numb;\n        var count = new GlideAggregate('sales_account');\n        count.addAggregate('COUNT');\n        count.addQuery(\"skip_before_query\", \"true\");\n        count.addEncodedQuery(\"u_dnbISNOTEMPTY^u_dnb.u_global_ultimate_d_u_n_s_numbISNOTEMPTY^u_dnb.u_global_ultimate_d_u_n_s_numb=\" + global_duns);\n\n        count.query();\n        var accounts = 0;\n        if (count.next())\n            accounts = count.getAggregate('COUNT');\n        session.putClientData('skip_before_st_query_business_rule', '');\n        return accounts > 0 ? true : false;\n\n    },\n\n    type: 'SalesTeamSecurityHelper'\n};",
					"file": "/Users/andy.liu/Documents/CRM/SalesTeam/SalesTeamSecurityHelper.js",
					"file_size": 25547,
					"file_write_time": 131499027370000000,
					"settings":
					{
						"buffer_size": 25547,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "var SLS_NewLogoHelper = Class.create();\nSLS_NewLogoHelper.prototype = {\n\n    logger: null,\n    hqGr: null,\n    hqNewLogo: '',\n    acctNewLogo: '',\n    isHqExpress: false,\n    isHqEnterprise: false,\n    isAcctExpress: false,\n    isAcctEnterprise: false,\n    acctGr: null,\n    optyGr: null,\n    acctId: '',\n    //expressFamily3: 'Express, Express Discovery, Express Discovery',\n    expressFamily3: ['Express', 'Express Discovery', 'Express Discovery'],\n\n    initialize: function(record) {\n        this.logger = NewLogoLogger.getInstance('SLS_NewLogoHelper');\n        try {\n            this.logger.debug('initialize - start with record: ' + record.sys_id + ', record type: ' + record.getTableName());\n            if (record.getTableName() == 'sales_account' && record.isValidRecord()) {\n                this.acctGr = record;\n                this.acctId = this.acctGr.sys_id + '';\n                this.hqGr = this.acctGr.u_customer_hq.getRefRecord();\n            } else if (record.getTableName() == 'sales_opportunity' && record.account.getRefRecord().isValidRecord()) {\n                this.optyGr = record;\n                this.acctGr = record.account.getRefRecord();\n                this.acctId = this.acctGr.sys_id + '';\n                this.hqGr = this.acctGr.u_customer_hq.getRefRecord();\n            } else if (record.getTableName() == 'u_dnb' && record.isValidRecord()) {\n                this.hqGr = record;\n            }\n            this._checkNewLogo(this.acctGr);\n            this.logger.debug('initialize - complete. HQ: ' + this.hqGr.u_d_u_n_s_number_sdmr + ', HQNewLogo: ' + this.hqNewLogo);\n        } catch (e) {\n            this.logger.debug('initialize - exception: ' + e);\n        }\n    },\n\n    _checkNewLogo: function() {\n        this.logger.debug('_checkNewLogo. start.');\n        if (this.acctId) {\n            this.acctNewLogo = this.acctGr.u_customer_type.toString();\n            if (this.acctNewLogo == 'EandX') {\n                this.isAcctExpress = true;\n                this.isAcctEnterprise = true;\n            } else if (this.acctNewLogo == 'Xpress') {\n                this.isAcctExpress = true;\n            } else if (this.acctNewLogo == 'Enterprise') {\n                this.isAcctEnterprise = true;\n            }\n            this.logger.debug('_checkNewLogo - Account: ' + this.acctGr.u_number + ' Express: ' + this.isAcctExpress + ', Enterprise: ' + this.isAcctEnterprise);\n        }\n\n        this.hqNewLogo = this.hqGr.u_customer_type.toString();\n        if (this.hqNewLogo == 'EandX') {\n            this.isHqExpress = true;\n            this.isHqEnterprise = true;\n        } else if (this.hqNewLogo == 'Xpress') {\n            this.isHqExpress = true;\n        } else if (this.hqNewLogo == 'Enterprise') {\n            this.isHqEnterprise = true;\n        }\n        this.logger.debug('_checkNewLogo - HQ: ' + this.hqGr.u_d_u_n_s_number_sdmr + ' Express: ' + this.isHqExpress + ', Enterprise: ' + this.isHqEnterprise);\n    },\n\n    updateNewLogoOnOpty: function(opty) {\n        opty = opty || this.optyGr;\n        this.logger.debug('updateNewLogoOnOpty - start with opty: ' + opty.number);\n        try {\n            if (!opty.isValidRecord()) {\n                this.logger.debug('updateNewLogoOnOpty - invalid opty. Return false');\n                return false;\n            }\n            if (opty.u_logo_override && opty.u_express_logo_override) {\n                this.logger.debug('updateNewLogoOnOpty - override is set. No update needed.');\n                return true;\n            }\n            var isExpress = false;\n            var isEnterprise = false;\n            if (this.isHqExpress && this.isHqEnterprise) {\n                this.logger.debug('updateNewLogoOnOpty - HQ is penetrated. Untag opty and return.');\n                this._setNewLogoOnOpty(opty, isExpress, isEnterprise);\n                return true;\n            }\n\n            var skipExpress = this.isHqExpress || opty.u_express_logo_override;\n            var skipEnterprise = this.isHqEnterprise || opty.u_logo_override;\n\n            var li = this._getOptyLines(opty);\n\n            while (li.next() && !(skipExpress && skipEnterprise)) {\n                this.logger.debug('updateNewLogoOnOpty - Checking line: ' + li.number + '. skip Express check: ' + skipExpress + ', skip Enterprise check: ' + skipEnterprise);\n                var family3 = li.u_product_price.product.u_family_3.toString();\n\n                if (this.expressFamily3.indexOf(family3) > -1) {\n                    if (!skipExpress) {\n                        this.logger.debug('updateNewLogoOnOpty - Express found on ' + li.number);\n                        isExpress = true;\n                        skipExpress = true;\n                        continue;\n                    }\n                } else {\n                    if (!skipEnterprise && family3 != 'ServiceNow Store' && family3 != 'Technology Partner Program') {\n                        this.logger.debug('updateNewLogoOnOpty - Enterprise found on ' + li.number);\n                        isEnterprise = true;\n                        skipEnterprise = true;\n                        continue;\n                    }\n                }\n            }\n            this.logger.debug('updateNewLogoOnOpty - result: ' + opty.number + ' - isExpress? ' + isExpress + ', isEnterprise? ' + isEnterprise);\n            this._setNewLogoOnOpty(opty, isExpress, isEnterprise);\n            return true;\n        } catch (e) {\n            this.logger.debug('updateNewLogoOnOpty - exception: ' + e);\n        }\n    },\n\n    _setNewLogoOnOpty: function(opty, isExpress, isEnterprise) {\n        this.logger.debug('_setNewLogoOnOpty - start. Opty: ' + opty.number + ' isExpress: ' + isExpress + ' isEnterprise: ' + isEnterprise);\n        if (!opty.isValidRecord() || !(opty.u_express_new_logo ^ isExpress || opty.u_new_logo ^ isEnterprise)) {\n            this.logger.debug('_setNewLogoOnOpty - no update needed. Returning.');\n            return false;\n        } else {\n            if (!opty.u_express_logo_override) {\n                opty.u_express_new_logo = isExpress;\n            }\n            if (!opty.u_logo_override) {\n                opty.u_new_logo = isEnterprise;\n            }\n            //opty.setWorkflow(false);\n            opty.update();\n            this.logger.debug('_setNewLogoOnOpty - complete');\n            return true;\n        }\n    },\n\n    getOpenOptyForAcctOrHq: function(type) {\n        if (!this.hqGr.isValidRecord()) {\n            this.logger.debug('getOpenOptyForAcctOrHq - invalid HQ. Return false');\n            return false;\n        }\n\n        if (type == 'hq') {\n            this.logger.debug('getOpenOptyForAcctOrHq - start on HQ: ' + this.hqGr.u_d_u_n_s_number_sdmr);\n        } else if (this.acctId && type == 'account') {\n            this.logger.debug('getOpenOptyForAcctOrHq - start on Account: ' + this.acctGr.u_number);\n        } else {\n            this.logger.debug('getOpenOptyForAcctOrHq - invalid type ' + type + '. Return false.');\n            return false;\n        }\n        var opty = new GlideRecord('sales_opportunity');\n        opty.addQuery('skip_before_query', 'true');\n        opty.addQuery('active', true);\n        if (type == 'hq') {\n            opty.addQuery('account.u_customer_hq', this.hqGr.sys_id);\n        } else {\n            opty.addQuery('account', this.acctId);\n        }\n        opty.addQuery('type', 'IN', gs.getProperty('sls_newlogo_opty_type'));\n        var qc = opty.addQuery('u_express_logo_override', '');\n        qc.addOrCondition('u_logo_override', '');\n        opty.query();\n        this.logger.debug('getOpenOptyForAcctOrHq - complete. ' + opty.getRowCount() + ' found.');\n        return opty;\n    },\n\n\n    tagOpty: function(hqOrAcct, newLogoObj) {\n        try {\n            this.logger.debug('tagOpty - start. hqOrAcct: ' + hqOrAcct + '. HQ: ' + this.hqGr.u_d_u_n_s_number_sdmr + ', acct: ' + this.acctId);\n            if (hqOrAcct != 'hq' && hqOrAcct != 'account' || Object.keys(newLogoObj).length == 0) {\n                this.logger.debug('tagOpty - invalid hqOrAcct ' + hqOrAcct + ' or newLogoObj. Return false.');\n                return false;\n            }\n\n            var isExpress = newLogoObj['isExpress'] == true;\n            var isEnterprise = newLogoObj['isEnterprise'] == true;\n            this.logger.debug('tagOpty - isExpress: ' + isExpress + '; isEnterprise: ' + isEnterprise);\n\n            var opty = this.getOpenOptyForAcctOrHq(hqOrAcct);\n            while (opty.next()) {\n                this.updateNewLogoOnOpty(opty);\n            }\n            this.logger.debug('tagOpty - complete.');\n        } catch (e) {\n            this.logger.debug('tagOpty - exception: ' + e);\n        }\n    },\n\n    // to be removed\n    /*\n    tagOpty: function(hqOrAcct, newLogoObj) {\n        try {\n            this.logger.debug('tagOpty - start. hqOrAcct: ' + hqOrAcct + '. HQ: ' + this.hqGr.u_d_u_n_s_number_sdmr + ', acct: ' + this.acctId);\n            if (hqOrAcct != 'hq' && hqOrAcct != 'account' || Object.keys(newLogoObj).length == 0) {\n                this.logger.debug('tagOpty - invalid hqOrAcct ' + hqOrAcct + ' or newLogoObj. Return false.');\n                return false;\n            }\n\n            var isExpress = newLogoObj['isExpress'] == true;\n            var isEnterprise = newLogoObj['isEnterprise'] == true;\n            this.logger.debug('tagOpty - isExpress: ' + isExpress + '; isEnterprise: ' + isEnterprise);\n\n            var opty = this.getOpenOptyForAcctOrHq(hqOrAcct);\n            while (opty.next()) {\n                var update = false;\n                if (!opty.u_express_logo_override && opty.u_express_new_logo ^ isExpress) {\n                    opty.u_express_new_logo = isExpress;\n                    update = true;\n                    this.logger.debug('tagOpty - update express to ' + isExpress + ' on ' + opty.number);\n                }\n                if (!opty.u_logo_override && opty.u_new_logo ^ isEnterprise) {\n                    opty.u_new_logo = isEnterprise;\n                    update = true;\n                    this.logger.debug('tagOpty - update Enterprise to ' + isEnterprise + ' on ' + opty.number);\n                }\n                if (update) {\n                    opty.setWorkflow(false);\n                    opty.update();\n                }\n            }\n            this.logger.debug('tagOpty - complete.');\n        } catch (e) {\n            this.logger.debug('tagOpty - exception: ' + e);\n        }\n    },\n    */\n    _updateNewLogoForHq: function(forceUpdateAllOpty) {\n        this.logger.debug('_updateNewLogoForHq - start.');\n        var isAcctExpress, isAcctEnterprise, isHqExpress, isHqEnterprise, skipExpress, skipEnterprise, updateHq, updateAcct;\n        isAcctExpress = isAcctEnterprise = isHqExpress = isHqEnterprise = skipExpress = skipEnterprise = updateHq = updateAcct = false;\n\n        var cntrLi4Hq = []; // contract lines that contrubite to HQ product classification\n        var cntrLi4Acct = []; // contract lines that contrubite to account product classification\n\n        this.logger.debug('_updateNewLogoForHq - getting contract lines for HQ ' + this.hqGr.u_d_u_n_s_number_sdmr);\n        var cntrLi = this.getAllActiveContractLinesForHq();\n        while (cntrLi.next() && !(skipExpress && skipEnterprise)) {\n            this.logger.debug('_updateNewLogoForHq - checking cntr line: ' + cntrLi.number);\n            var family3 = cntrLi.product_price.product.u_family_3.toString();\n            var acctId = cntrLi.contract.account + '';\n            if (this.expressFamily3.indexOf(family3) > -1) {\n                if (!skipExpress) {\n                    if (!isHqExpress) {\n                        isHqExpress = true;\n                        cntrLi4Hq.push(cntrLi.number + '');\n                    }\n                    this.logger.debug('_updateNewLogoForHq - Express found for HQ on ' + cntrLi.number);\n                    if (this.acctId && acctId == this.acctId) {\n                        isAcctExpress = true;\n                        skipExpress = true;\n                        cntrLi4Acct.push(cntrLi.number + '');\n                        this.logger.debug('_updateNewLogoForHq - Express found for Acct on ' + cntrLi.number);\n                    }\n                    continue;\n                }\n            } else {\n                if (!skipEnterprise && family3 != 'ServiceNow Store' && family3 != 'Technology Partner Program') {\n                    if (!isHqEnterprise) {\n                        isHqEnterprise = true;\n                        cntrLi4Hq.push(cntrLi.number + '');\n                    }\n                    this.logger.debug('_updateNewLogoForHq - Enterprise found for HQ on ' + cntrLi.number);\n                    if (this.acctId && acctId == this.acctId) {\n                        isAcctEnterprise = true;\n                        skipEnterprise = true;\n                        cntrLi4Acct.push(cntrLi.number + '');\n                        this.logger.debug('_updateNewLogoForHq - Enterprise found for Acct on ' + cntrLi.number);\n                    }\n                    continue;\n                }\n            }\n        }\n        if (this.acctId) {\n            updateAcct = isAcctExpress ^ this.isAcctExpress || isAcctEnterprise ^ this.isAcctEnterprise;\n        }\n        this.logger.debug('_updateNewLogoForHq - updateAcct: ' + updateAcct);\n        if (updateAcct) {\n            this.isAcctExpress = isAcctExpress;\n            this.isAcctEnterprise = isAcctEnterprise;\n            var acctResult = this.getNewLogoResult(this.isAcctExpress, this.isAcctEnterprise);\n            this.acctGr.u_customer_type = acctResult;\n            this.acctGr.update();\n            this.logger.debug('updateHqNewLogoFromContracts - account updated.');\n            this.logHistory('account', this.acctGr, cntrLi4Acct.join(), acctResult);\n        }\n\n        updateHq = isHqExpress ^ this.isHqExpress || isHqEnterprise ^ this.isHqEnterprise;\n        this.logger.debug('_updateNewLogoForHq - updateHq: ' + updateHq);\n        if (updateHq) {\n            this.isHqExpress = isHqExpress;\n            this.isHqEnterprise = isHqEnterprise;\n            var hqResult = this.getNewLogoResult(this.isHqExpress, this.isHqEnterprise);\n            this.hqGr.u_customer_type = hqResult;\n            this.hqGr.update();\n            this.logger.debug('_updateNewLogoForHq - HQ updated.');\n            this.logHistory('hq', this.hqGr, cntrLi4Hq.join(), hqResult);\n        }\n\n        if (updateHq || forceUpdateAllOpty === true) {\n            this.tagOpty('hq', { 'isExpress': !isHqExpress, 'isEnterprise': !isHqEnterprise });\n        }\n    },\n\n    _updateNewLogoForAcct: function() {\n        this.logger.debug('_updateNewLogoForAcct - start.');\n        var isAcctExpress, isAcctEnterprise, skipExpress, skipEnterprise, updateAcct;\n        isAcctExpress = isAcctEnterprise = skipExpress = skipEnterprise = updateAcct = false;\n\n        var cntrLi4Acct = []; // contract lines that contrubite to account product classification\n\n        this.logger.debug('_updateNewLogoForAcct - getting contract lines for account ' + this.acctGr.u_number);\n        var cntrLi = this.getAllActiveContractLinesForAcct();\n        while (cntrLi.next() && !(skipExpress && skipEnterprise)) {\n            this.logger.debug('_updateNewLogoForAcct - checking cntr line: ' + cntrLi.number);\n            var family3 = cntrLi.product_price.product.u_family_3.toString();\n            if (this.expressFamily3.indexOf(family3) > -1) {\n                if (!skipExpress) {\n                    isAcctExpress = true;\n                    skipExpress = true;\n                    cntrLi4Acct.push(cntrLi.number + '');\n                    this.logger.debug('_updateNewLogoForAcct - Express found for Acct on ' + cntrLi.number);\n                    continue;\n                }\n            } else {\n                if (!skipEnterprise && family3 != 'ServiceNow Store' && family3 != 'Technology Partner Program') {\n                    isAcctEnterprise = true;\n                    skipEnterprise = true;\n                    cntrLi4Acct.push(cntrLi.number + '');\n                    this.logger.debug('_updateNewLogoForAcct - Enterprise found for Acct on ' + cntrLi.number);\n                    continue;\n                }\n            }\n        }\n        updateAcct = isAcctExpress ^ this.isAcctExpress || isAcctEnterprise ^ this.isAcctEnterprise;\n        this.logger.debug('_updateNewLogoForAcct - updateAcct: ' + this.acctGr.u_number + ': ' + updateAcct);\n        if (updateAcct) {\n            this.isAcctExpress = isAcctExpress;\n            this.isAcctEnterprise = isAcctEnterprise;\n            var acctResult = this.getNewLogoResult(this.isAcctExpress, this.isAcctEnterprise);\n            this.acctGr.u_customer_type = acctResult;\n            this.acctGr.update();\n            this.logger.debug('updateHqNewLogoFromContracts - account updated.');\n            this.logHistory('account', this.acctGr, cntrLi4Acct.join(), acctResult);\n        }\n        this.logger.debug('_updateNewLogoForAcct - complete.');\n    },\n\n    updateNewLogoFromContracts: function(forceUpdateAllOpty) {\n        try {\n            this.logger.debug('updateNewLogoFromContracts - start.');\n            if (this.hqGr.isValidRecord()) {\n                this._updateNewLogoForHq(forceUpdateAllOpty);\n            } else if (this.acctGr.isValidRecord()) {\n                this._updateNewLogoForAcct();\n            }\n            this.logger.debug('updateHqNewLogoFromContracts - complete.');\n        } catch (e) {\n            this.logger.debug('updateNewLogoFromContracts - exception: ' + e);\n        }\n    },\n\n    getNewLogoResult: function(isExpress, isEnterprise) {\n        var result = 'Other';\n        if (isExpress && isEnterprise) {\n            result = 'EandX';\n        } else if (isExpress) {\n            result = 'Xpress';\n        } else if (isEnterprise) {\n            result = 'Enterprise';\n        }\n        return result;\n    },\n\n    getAllActiveContractLinesForHq: function() {\n        this.logger.debug('getAllActiveContractLinesForHq - start.');\n        if (!this.hqGr.isValidRecord()) {\n            return false;\n        }\n        var cntrLi = new GlideRecord('sales_contract_item');\n        cntrLi.addQuery('contract.active', true);\n        cntrLi.addQuery('quantity', '>', 0);\n        cntrLi.addQuery('total_value_usd', '>', 0);\n        cntrLi.addQuery('contract.account.u_customer_hq', this.hqGr.sys_id);\n        cntrLi.addQuery('product_price.product.u_category', '0');\n        cntrLi.query();\n        this.logger.debug('getAllActiveContractLinesForHq - complete.');\n        return cntrLi;\n    },\n\n    getAllActiveContractLinesForAcct: function() {\n        this.logger.debug('getAllActiveContractLinesForAcct - start.');\n        if (!this.acctGr.isValidRecord()) {\n            return false;\n        }\n        var cntrLi = new GlideRecord('sales_contract_item');\n        cntrLi.addQuery('contract.active', true);\n        cntrLi.addQuery('quantity', '>', 0);\n        cntrLi.addQuery('total_value_usd', '>', 0);\n        cntrLi.addQuery('contract.account', this.acctGr.sys_id);\n        cntrLi.addQuery('product_price.product.u_category', '0');\n        cntrLi.query();\n        this.logger.debug('getAllActiveContractLinesForAcct - complete.');\n        return cntrLi;\n    },\n\n    // Get subscription lines with quantity and acv greater than zero\n    _getOptyLines: function(opty) {\n        if (!opty || !opty.isValidRecord()) {\n            return false;\n        }\n        var li = new GlideRecord('sales_opportunity_item');\n        li.addQuery(\"skip_before_query\", \"true\");\n        li.addQuery('opportunity', opty.sys_id);\n        li.addQuery('u_product_price.product.u_category', '0');\n        li.addQuery('quantity', '>', 0);\n        li.addQuery('u_total_value_amount_usd', '>', 0);\n        li.query();\n        return li;\n    },\n\n\n    logHistory: function(type, record, contractLines, result) {\n        try {\n            this.logger.debug('logHistory - start. type: ' + type + ', record: ' + record.sys_id + ', contract lines: ' + contractLines + ', result: ' + result);\n            if (type != 'account' && type != 'hq' || !record.isValidRecord() || !result) {\n                this.logger.debug('logHistory - something is wrong. Return false');\n                return false;\n            }\n            var gr = new GlideRecord('u_new_logo_history');\n            gr.newRecord();\n            if (type == 'account') {\n                gr.u_account = record.sys_id;\n                gr.u_customer_hq = this.hqGr.sys_id;\n            } else if (type == 'hq') {\n                gr.u_customer_hq = record.sys_id;\n            } else {\n                this.logger.debug('logHistory - error.');\n                return false;\n            }\n            gr.u_contract_lines_with_new_logo = contractLines;\n            gr.u_customer_type = result;\n            gr.insert();\n\n            this.logger.debug('logHistory - complete.');\n\n        } catch (e) {\n            this.logger.debug('logHistory - exception: ' + e);\n        }\n    },\n\n    type: 'SLS_NewLogoHelper'\n};\n\nSLS_NewLogoHelper.getHqNewLogo = function(acct) {\n    if (!acct || !acct.isValidRecord() || !acct.u_customer_hq) {\n        return false;\n    }\n    return acct.u_customer_hq.u_customer_type.toString();\n};\n\nSLS_NewLogoHelper.isHqNewLogo = function(acct, type) {\n    if (!acct || !acct.isValidRecord() || !type || !acct.u_customer_hq) {\n        return false;\n    }\n    var hqNewLogo = acct.u_customer_hq.u_customer_type.toString();\n    return hqNewLogo.indexOf(type) > -1;\n};\n\nSLS_NewLogoHelper.isNewLogoCheckNeededForProduct = function(product) {\n    var logger = NewLogoLogger.getInstance('SLS_NewLogoHelper');\n    logger.debug('isNewLogoCheckNeeded - start on product ' + product.sys_id);\n    var result = false;\n    //var expressFamily3 = 'Express, Express Discovery, Express Discovery, ServiceNow Store';\n    var expressFamily3 = ['Express', 'Express Discovery', 'Express Discovery', 'ServiceNow Store'];\n    var family3 = product.u_family_3.toString();\n    var prdCategory = product.u_category.toString();\n    if (!family3) {\n        return false;\n    }\n    if ((expressFamily3.indexOf(family3) > -1) || prdCategory === '0') {\n        result = true;\n    }\n    logger.debug('isNewLogoCheckNeeded - complete with result: ' + result);\n    return result;\n};\n\nSLS_NewLogoHelper.isNewLogoCheckNeededForContract = function(contract) {\n    var logger = NewLogoLogger.getInstance('SLS_NewLogoHelper');\n    logger.debug('isNewLogoCheckNeeded - start on contract ' + contract.contract_number);\n    if (!contract.isValidRecord()) {\n        logger.debug('isNewLogoCheckNeeded - invalid contract. Return false');\n        return false;\n    }\n\n    var cntrLi = new GlideRecord('sales_contract_item');\n    cntrLi.addQuery('contract', contract.sys_id);\n    cntrLi.addQuery('product_price.product.u_category', '0');\n    cntrLi.query();\n\n    return cntrLi.hasNext();\n};",
					"file": "/Users/andy.liu/Documents/CRM/SLS_NewLogoHelper.js",
					"file_size": 22864,
					"file_write_time": 131497980180000000,
					"settings":
					{
						"buffer_size": 22864,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "<xml>\n    <sales_opportunity>\n        <account display_value=\"Schott AG\">afc1fada5b35100083193b9b3e425448</account>\n        <active>true</active>\n        <allowable_discount_level/>\n        <close_date>2017-09-28</close_date>\n        <double_compensation_overlay/>\n        <expected_date/>\n        <flags>a36e76671300ea00a5e739fed144b0d3</flags>\n        <maximum_discount/>\n        <name>Schott - Change Mgt. Phase 2</name>\n        <number>OPTY0555589</number>\n        <owner display_value=\"Holger Hoeft\">8d57839a2b065600bc1b28ac27da15a0</owner>\n        <partner_percent/>\n        <partnership_type>Teaming - Without Fee</partnership_type>\n        <pipeline_status>expect</pipeline_status>\n        <price_band display_value=\"Band 4\">9bd651e837ca0e0084f72553b3990ea6</price_band>\n        <probability/>\n        <probability_percent/>\n        <product/>\n        <product_pairing_json>\n            [{\"deleted\":\"false\",\"line_sys_id\":\"\",\"mandatory\":\"true\",\"modified\":\"false\",\"pp_sys_id\":\"4296fdf31302e244f57238fed144b014\",\"quantity\":\"1\",\"sys_id\":\"32fd750c9178a500184d33efe8afb3c4\"},{\"deleted\":\"false\",\"line_sys_id\":\"555c5e76db91fec08df6f4bbaf961995\",\"mandatory\":\"false\",\"modified\":\"false\",\"pp_sys_id\":\"b79050a4db51b24066d8f4bbaf961919\",\"quantity\":\"3\",\"sys_id\":\"a6dc9bf39d422100c976b8eeb2963cd6\"},{\"deleted\":\"false\",\"line_sys_id\":\"845700bbdb7732c0014fffd51d9619c3\",\"mandatory\":\"false\",\"modified\":\"false\",\"pp_sys_id\":\"e2caa8acdb67f2c40576fb371d96196d\",\"quantity\":\"3\",\"sys_id\":\"c5147922db573a8012c0f5771d96192e\"}]\n        </product_pairing_json>\n        <sales_partner display_value=\"solid-serVision.com GmbH\">316ca5610a0a3c7900ad680a570528f7</sales_partner>\n        <short_description/>\n        <stage>pov_validation_completed</stage>\n        <sys_class_name>sales_opportunity</sys_class_name>\n        <sys_created_by>Markus.Josua</sys_created_by>\n        <sys_created_on>2016-06-17 10:28:54</sys_created_on>\n        <sys_domain>317b06280a0a3c7900e5f0e77250b725</sys_domain>\n        <sys_domain_path>!!!/!&|/!!}/</sys_domain_path>\n        <sys_id>f51287f1db4826c4dbadf4bbaf96193c</sys_id>\n        <sys_mod_count>1288</sys_mod_count>\n        <sys_updated_by>holger.hoeft</sys_updated_by>\n        <sys_updated_on>2017-09-15 07:39:54</sys_updated_on>\n        <total_value>0</total_value>\n        <type>License Upsell</type>\n        <u_approval_discount>72.75</u_approval_discount>\n        <u_approval_territory display_value=\"GERITEU-TER-4\">feeb289f6fb0dac036e2320b8b3ee4d7</u_approval_territory>\n        <u_approved_discount_seats>10</u_approved_discount_seats>\n        <u_approved_discount_servers>10</u_approved_discount_servers>\n        <u_ar_notes/>\n        <u_auditing_notes/>\n        <u_auto_renewal_flag>false</u_auto_renewal_flag>\n        <u_base_currency display_value=\"EUR\">EUR</u_base_currency>\n        <u_business_unit_list>\n            f9817c83dbeb96004a54f4bbaf9619b3,6a5fdd87dbaf96004a54f4bbaf9619cb\n        </u_business_unit_list>\n        <u_campaign_history/>\n        <u_channel_manager display_value=\"Nicola Demattia\">619a0c5b2bd1d644bc1b28ac27da1569</u_channel_manager>\n        <u_close_date___date_dimension display_value=\"2017-09-28\">f859cdb9607130c068d07268c841dc80</u_close_date___date_dimension>\n        <u_close_month>2017-09(Sep)</u_close_month>\n        <u_closed_at_exchange_rate/>\n        <u_collab_msg/>\n        <u_commission_exception/>\n        <u_competitive_notes/>\n        <u_competitive_reason/>\n        <u_competitive_status>2</u_competitive_status>\n        <u_consolidated_discount/>\n        <u_constant_fiscal_year>2017</u_constant_fiscal_year>\n        <u_constant_fx_rate>0.9615385</u_constant_fx_rate>\n        <u_contract display_value=\"BV-17312AM\">cb19af86a5a2384010176e65e7b90753</u_contract>\n        <u_contract_duration>15</u_contract_duration>\n        <u_contract_end_date>2018-12-31</u_contract_end_date>\n        <u_contract_signed_date/>\n        <u_contract_status>Order Form Approved</u_contract_status>\n        <u_contract_type>MOA</u_contract_type>\n        <u_credit_card_order>false</u_credit_card_order>\n        <u_credit_card_transaction_id/>\n        <u_data_center>Europe</u_data_center>\n        <u_deal_registration display_value=\"Schott AG - Extension CHMG Rollout\">cf378354db3ba2804282750aaf96198c</u_deal_registration>\n        <u_dedicated_server>false</u_dedicated_server>\n        <u_discount_percent/>\n        <u_discount_percent_seats/>\n        <u_discount_percent_servers/>\n        <u_discount_price_per_seat/>\n        <u_discount_price_per_server/>\n        <u_education_isr display_value=\"Kirsten Hill\">edc42f1e2b878a00bc1b28ac27da15f0</u_education_isr>\n        <u_end_customer/>\n        <u_express_conversion/>\n        <u_express_logo_override/>\n        <u_express_new_logo>false</u_express_new_logo>\n        <u_final_order_form_output>surf</u_final_order_form_output>\n        <u_first_closed_by/>\n        <u_first_closed_on/>\n        <u_forecast_type>0</u_forecast_type>\n        <u_forecast_type_override>false</u_forecast_type_override>\n        <u_from_express_ar>false</u_from_express_ar>\n        <u_fsi_partner/>\n        <u_fx_rate_string/>\n        <u_gpp_driven>false</u_gpp_driven>\n        <u_gross_acv/>\n        <u_gross_price_per_seat/>\n        <u_gross_price_per_server/>\n        <u_gsi_product/>\n        <u_gsi_product_offering>false</u_gsi_product_offering>\n        <u_ha_dr>false</u_ha_dr>\n        <u_has_future_upsell>false</u_has_future_upsell>\n        <u_hr_sales_specialist display_value=\"Hitesh Tailor\">3ebd11d7db84aac0991cf4bbaf9619d8</u_hr_sales_specialist>\n        <u_implementation_partner/>\n        <u_imported_from_hi>false</u_imported_from_hi>\n        <u_incumbent>Service-now.com</u_incumbent>\n        <u_inside_sales_rep/>\n        <u_integration_record/>\n        <u_integration_table/>\n        <u_isr_interaction>Field Only</u_isr_interaction>\n        <u_lead_number/>\n        <u_lead_source/>\n        <u_logo_override/>\n        <u_master_quote display_value=\"QUO0555589-1\">f0d9ca97db004b40014fffd51d961950</u_master_quote>\n        <u_matrix_price_per_seat/>\n        <u_matrix_price_per_server/>\n        <u_meeting_display_flag>false</u_meeting_display_flag>\n        <u_meeting_id/>\n        <u_msp/>\n        <u_msp_sales/>\n        <u_msp_territory/>\n        <u_net_new_acv>€ 24,816.00</u_net_new_acv>\n        <u_net_new_seats/>\n        <u_net_new_servers/>\n        <u_net_price_per_seat/>\n        <u_net_price_per_server/>\n        <u_new_logo>false</u_new_logo>\n        <u_next_steps_journaled/>\n        <u_notes/>\n        <u_notification_rule/>\n        <u_number_of_seats/>\n        <u_number_of_servers/>\n        <u_offsetting_opportunity/>\n        <u_opp_competition/>\n        <u_opportunity_link_reason/>\n        <u_opportunity_source>Field</u_opportunity_source>\n        <u_option_self_hosted_w_o_sig_penalty>false</u_option_self_hosted_w_o_sig_penalty>\n        <u_order_form_output_reason/>\n        <u_order_term_days/>\n        <u_order_term_end_date>2018-12-31</u_order_term_end_date>\n        <u_order_term_start_date>2017-09-29</u_order_term_start_date>\n        <u_other_competitor>do nothing</u_other_competitor>\n        <u_other_discount/>\n        <u_other_revenue>€ 0.00</u_other_revenue>\n        <u_overlay_isr/>\n        <u_pa_sales_specialist display_value=\"Shirief Nosseir\">261ae75edbd632843e38ff661d961906</u_pa_sales_specialist>\n        <u_parent display_value=\"Schott - Change Mgt. Phase 2\">f51287f1db4826c4dbadf4bbaf96193c</u_parent>\n        <u_partner_influencer/>\n        <u_partner_notes/>\n        <u_partnered>true</u_partnered>\n        <u_payment_schedule>Annual</u_payment_schedule>\n        <u_price_book display_value=\"Price Book - SNC\">c1ecd990a414090006ff2f73a1e8e8ac</u_price_book>\n        <u_primary_competitor display_value=\"None - Existing Customer\">f29ba759371f064098ced8d543990e87</u_primary_competitor>\n        <u_product_specialist_notes/>\n        <u_product_technology_partner/>\n        <u_ps_engagement_manager/>\n        <u_ps_recognizable_revenue/>\n        <u_ps_revenue>€ 0.00</u_ps_revenue>\n        <u_ps_teaming/>\n        <u_ps_territory display_value=\"PS Germany\">8a435cc9550d71c0101701515914bbaf</u_ps_territory>\n        <u_quote_owner display_value=\"Holger Hoeft\">8d57839a2b065600bc1b28ac27da15a0</u_quote_owner>\n        <u_quoteapproved>true</u_quoteapproved>\n        <u_reason_code/>\n        <u_renewal_acv>€ 136,620.00</u_renewal_acv>\n        <u_renewal_acv_const>142084.79</u_renewal_acv_const>\n        <u_renewal_category/>\n        <u_renewal_percent_increase>0</u_renewal_percent_increase>\n        <u_renewal_status/>\n        <u_route_to_market/>\n        <u_runtime_licenses_opportunity/>\n        <u_sales_operations_notes/>\n        <u_sales_order_number/>\n        <u_sales_quarter>17-Q3</u_sales_quarter>\n        <u_salesteam_users>\n            64385575dbdc2e04991cf4bbaf9619ee,2d9ac7e724147c80772e280e796edd0e,edc42f1e2b878a00bc1b28ac27da15f0,19a4d81c2bd8de00cfa428ac27da15ac,924815959c5cd9c8c602648f3b3d5880,f35291db300e3900772e2bddb4b037fa,f35291db300e3900772e2bddb4b037fa,f35291db300e3900772e2bddb4b037fa,c780e8455b81e4c083193b9b3e4254ef,07ebcafc6f26fd00575967ddbb3ee421,619a0c5b2bd1d644bc1b28ac27da1569,9a2fad8c0f43610029fa348ce1050e61,9a2fad8c0f43610029fa348ce1050e61,f25b1abedb3ba2404adbf4621f9619ce,b3e8868f2b305604bc1b28ac27da156f,d05c4cafdb18bac0427b750aaf9619d0,261ae75edbd632843e38ff661d961906,021ad7f02bf01204bc1b28ac27da15b5,251363d6db3a6200991cf4bbaf961990,dcf0969c906ec104ee51ddcfcac891cb,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,261ae75edbd632843e38ff661d961906,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,995c20d4db5cbe807d8574921f9619ba,261ae75edbd632843e38ff661d961906,51fbf5802b5e5a00bc1b28ac27da15d7,8d57839a2b065600bc1b28ac27da15a0,edc42f1e2b878a00bc1b28ac27da15f0,07ebcafc6f26fd00575967ddbb3ee421,edc42f1e2b878a00bc1b28ac27da15f0,dcf0969c906ec104ee51ddcfcac891cb,995c20d4db5cbe807d8574921f9619ba,261ae75edbd632843e38ff661d961906,6b463809dbd072c0991cf4bbaf961970\n        </u_salesteam_users>\n        <u_sap_contract_id/>\n        <u_sap_contract_id_req_status/>\n        <u_sap_manual_override>false</u_sap_manual_override>\n        <u_sap_vendor_id/>\n        <u_secodary_sales_partner/>\n        <u_seconady_partnership_type/>\n        <u_secondary_competitor/>\n        <u_secondary_deal_registraion_n/>\n        <u_secondary_deal_registraion_s/>\n        <u_secondary_partner/>\n        <u_secondary_partner_manager/>\n        <u_secondary_partner_notes/>\n        <u_security_sales_specialist/>\n        <u_snot/>\n        <u_solution_consultant display_value=\"Markus Dillmann\">9a2fad8c0f43610029fa348ce1050e61</u_solution_consultant>\n        <u_sourced>false</u_sourced>\n        <u_specialist_overlay display_value=\"Patrick Guender\">874e0b45db6d36407afaf4621f961989</u_specialist_overlay>\n        <u_split/>\n        <u_split_with/>\n        <u_ssa_rollup_acv_amount>24816</u_ssa_rollup_acv_amount>\n        <u_ssa_rollup_acv_string>€ 24,816.00</u_ssa_rollup_acv_string>\n        <u_ssa_rollup_acv_usd_a>29493.82</u_ssa_rollup_acv_usd_a>\n        <u_ssa_rollup_acv_usd_const>25808.64</u_ssa_rollup_acv_usd_const>\n        <u_ssa_rollup_acv_usd_s>$(USD) 29,493.82</u_ssa_rollup_acv_usd_s>\n        <u_ssa_rollup_license_amount>31157.86</u_ssa_rollup_license_amount>\n        <u_ssa_rollup_license_string>€ 31,157.86</u_ssa_rollup_license_string>\n        <u_ssa_rollup_license_val_usd_a>37031.13</u_ssa_rollup_license_val_usd_a>\n        <u_ssa_rollup_license_val_usd_const>32404.17</u_ssa_rollup_license_val_usd_const>\n        <u_ssa_rollup_license_val_usd_s>$(USD) 37,031.13</u_ssa_rollup_license_val_usd_s>\n        <u_ssa_rollup_netnewacv_a>24816</u_ssa_rollup_netnewacv_a>\n        <u_ssa_rollup_netnewacv_s>€ 24,816.00</u_ssa_rollup_netnewacv_s>\n        <u_ssa_rollup_netnewacv_usd_a>29493.82</u_ssa_rollup_netnewacv_usd_a>\n        <u_ssa_rollup_netnewacv_usd_const>25808.64</u_ssa_rollup_netnewacv_usd_const>\n        <u_ssa_rollup_netnewacv_usd_s>$(USD) 29,493.82</u_ssa_rollup_netnewacv_usd_s>\n        <u_ssa_rollup_netnewacv_w_usd_a>20645.67</u_ssa_rollup_netnewacv_w_usd_a>\n        <u_ssa_rollup_netnewacv_w_usd_const>18066.05</u_ssa_rollup_netnewacv_w_usd_const>\n        <u_ssa_rollup_netnewacv_w_usd_s>$(USD) 20,645.67</u_ssa_rollup_netnewacv_w_usd_s>\n        <u_ssa_rollup_other_amount>0</u_ssa_rollup_other_amount>\n        <u_ssa_rollup_other_rev_usd_a>0</u_ssa_rollup_other_rev_usd_a>\n        <u_ssa_rollup_other_rev_usd_const>0</u_ssa_rollup_other_rev_usd_const>\n        <u_ssa_rollup_other_rev_usd_s>$(USD) 0.00</u_ssa_rollup_other_rev_usd_s>\n        <u_ssa_rollup_other_string>€ 0.00</u_ssa_rollup_other_string>\n        <u_ssa_rollup_partner_amount/>\n        <u_ssa_rollup_partner_rev_usd>0</u_ssa_rollup_partner_rev_usd>\n        <u_ssa_rollup_partner_string/>\n        <u_ssa_rollup_serv_amount>0</u_ssa_rollup_serv_amount>\n        <u_ssa_rollup_serv_rev_usd_a>0</u_ssa_rollup_serv_rev_usd_a>\n        <u_ssa_rollup_serv_rev_usd_const>0</u_ssa_rollup_serv_rev_usd_const>\n        <u_ssa_rollup_serv_rev_usd_s>$(USD) 0.00</u_ssa_rollup_serv_rev_usd_s>\n        <u_ssa_rollup_serv_string>€ 0.00</u_ssa_rollup_serv_string>\n        <u_ssa_rollup_train_amount>0</u_ssa_rollup_train_amount>\n        <u_ssa_rollup_train_rev_usd_a>0</u_ssa_rollup_train_rev_usd_a>\n        <u_ssa_rollup_train_rev_usd_const>0</u_ssa_rollup_train_rev_usd_const>\n        <u_ssa_rollup_train_rev_usd_s>$(USD) 0.00</u_ssa_rollup_train_rev_usd_s>\n        <u_ssa_rollup_train_string>€ 0.00</u_ssa_rollup_train_string>\n        <u_ssa_rollup_training_rev/>\n        <u_ssa_rollup_ttl_serv_amount>0</u_ssa_rollup_ttl_serv_amount>\n        <u_ssa_rollup_ttl_serv_string>€ 0.00</u_ssa_rollup_ttl_serv_string>\n        <u_ssa_rollup_ttl_serv_usd_a>0</u_ssa_rollup_ttl_serv_usd_a>\n        <u_ssa_rollup_ttl_serv_usd_const>0</u_ssa_rollup_ttl_serv_usd_const>\n        <u_ssa_rollup_ttl_serv_usd_s>$(USD) 0.00</u_ssa_rollup_ttl_serv_usd_s>\n        <u_start_date>2016-06-17</u_start_date>\n        <u_start_date___date_dimension display_value=\"2016-06-17\">c4598db9607130c068d07268c841dcc0</u_start_date___date_dimension>\n        <u_support_partner/>\n        <u_term>15.06666666667</u_term>\n        <u_term_months_and_days>15 Months, 2 Days</u_term_months_and_days>\n        <u_termination_for_convenience/>\n        <u_territory display_value=\"GERITEU-TER-4\">feeb289f6fb0dac036e2320b8b3ee4d7</u_territory>\n        <u_total_acv>€ 24,816.00</u_total_acv>\n        <u_total_acv_and_rec_services/>\n        <u_total_annual_list_price>1148382</u_total_annual_list_price>\n        <u_total_value>€ 31,157.86</u_total_value>\n        <u_updated_to_contract>false</u_updated_to_contract>\n        <u_upsell_percent_increase>19.86</u_upsell_percent_increase>\n        <u_usd_annual_revenue/>\n        <u_usd_discount_price_per_serve/>\n        <u_usd_discount_seat_price/>\n        <u_usd_gross_price_per_seat/>\n        <u_usd_gross_price_per_server/>\n        <u_usd_matrix_price_per_seat/>\n        <u_usd_matrix_price_per_server/>\n        <u_usd_net_new_acv>29493.82</u_usd_net_new_acv>\n        <u_usd_net_price_per_seat/>\n        <u_usd_net_price_per_server/>\n        <u_usd_other_discount/>\n        <u_usd_other_revenue>0</u_usd_other_revenue>\n        <u_usd_price_per_server/>\n        <u_usd_ps_rec_revenue/>\n        <u_usd_ps_revenue>0</u_usd_ps_revenue>\n        <u_usd_renewal_acv>148533.26</u_usd_renewal_acv>\n        <u_usd_total_acv>29493.82</u_usd_total_acv>\n        <u_usd_total_annual_list_price>1262362.56</u_usd_total_annual_list_price>\n        <u_usd_total_value>37031.13</u_usd_total_value>\n        <u_usd_weighted_acv>20645.67</u_usd_weighted_acv>\n        <u_use_line_items>true</u_use_line_items>\n        <u_value_promter_master display_value=\"VSPR0007572\">4b9c3059db24aa0c66d8f4bbaf9619ff</u_value_promter_master>\n        <u_weighted_acv/>\n        <u_weighted_percentage>70</u_weighted_percentage>\n        <u_win_loss_dead_notes/>\n    </sales_opportunity>\n</xml>",
					"settings":
					{
						"buffer_size": 22475,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "var logSource = 'renewalACVFix';\ngs.log('fix script start', logSource);\n\nvar optyNum = 'OPTY0555589';\nvar opty = new GlideRecord('sales_opportunity');\nopty.get('number', optyNum);\n\nif(opty.isValidRecord()) {\n\topty.u_renewal_acv = '€ 0.00';\n\topty.u_renewal_acv_const = 0;\n\topty.u_usd_renewal_acv = 0;\n\topty.setWorkflow(false);\n\topty.update();\n\tgs.log(optyNum + ' updated', logSource);\n}\ngs.log('fix script completed', logSource);\n",
					"file": "/Users/andy.liu/Documents/OPTY0555589_datafix.js",
					"file_size": 437,
					"file_write_time": 131503182570000000,
					"settings":
					{
						"buffer_size": 429,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "/**\n * A class for SalesTeam Access DAO. This class is extending basic features DAO features from\n * \n * @class(SalesTeamBaseDAO) example - var stDao = new SalesTeamAccessDAO(\"u_st_account\"); // intialize SalesTeamDAO for account sales team tables stDao.persistParentRecords(user,record,jfa); //\n *                          persist bottom to up access records\n * @class - SalesTeamAccessDAO\n * \n */\nvar SalesTeamAccessDAO = Class.create();\nSalesTeamAccessDAO.prototype = Object.extendsObject(SalesTeamBaseDAO, {\n    /**\n     * initialize\n     * \n     * @constructs\n     * @param {string}\n     *            tableName\n     * @return\n     */\n    initialize: function(tableName) {\n        this.tableName = tableName;\n        this.logger = SalesTeamLogger.getInstance(\"SalesTeamAccessDAO\");\n        this.util = SalesTeamUtil.getInstance();\n        this.jfDAO = new SalesTeamJobFunctionDAO();\n        this.toDeleteRecordMap = {};\n    },\n\n    /*\n     * Check whether a user already has a sales team assignment on a record *method isRecordExistForUser @param {GlideRecord} record @param {string} userSysId @param (optional) {GlideRecord}\n     * jobFunction - check for a specific job function. Check any job function if this is not defined\n     */\n    isRecordExistForUser: function(record, userSysId, jobFunction) {\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[record.getTableName()]);\n        sta.addQuery('u_active', true);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery('u_user', userSysId);\n        if (jobFunction) {\n            sta.addQuery('u_job_function', jobFunction.sys_id);\n        }\n        sta.setLimit(1);\n        sta.query();\n        return sta.next();\n    },\n\n    /*\n     * get records for JFA @method getRecordsByJFA @param {GlideRecord} jfa - Job function access record @param (optional) {boolean} isDisplay - set the \"Display\" flag to true / false.\n     */\n    getRecordsByJFA: function(jfa, parentRecordSysId) {\n        var gr = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[jfa.u_table]);\n        gr.addQuery(\"u_jf_access\", jfa.sys_id);\n        gr.addQuery(\"u_rec_sys_id\", parentRecordSysId);\n        gr.addQuery(\"u_active\", true);\n        gr.query();\n\n        return gr;\n    },\n    /*\n     * get records for JFA @method getRecordsByJFA @param {GlideRecord} jfa - Job function access record @param (optional) {boolean} isDisplay - set the \"Display\" flag to true / false.\n     */\n    getRecordsBySysId: function(sysId) {\n        var gr = new GlideRecord(tableName);\n        if (gr.get(gr)) {\n            return gr;\n        }\n    },\n\n    /*\n     * deactivate an access record and optionally set the display flag @method deactivateRecord @param {GlideRecord} sta - the access record to deactivate @param (optional) {boolean} isDisplay - set\n     * the \"Display\" flag to true / false.\n     */\n    deactivateRecord: function(sta) {\n        this.logger.debug(\" deactivateRecord - deactivating STA: \" + sta.sys_id);\n        sta.u_end_date = gs.now();\n        sta.u_active = false;\n        // set display flag to true is opty is closed\n        if (this.tableName == 'u_st_opportunity') {\n            sta.u_display = !sta.u_rec_sys_id.active;\n        }\n        sta.update();\n    },\n\n    /**\n     * delete access records\n     * \n     * @method _deleteRecord\n     * @param {GlideRecord}\n     *            record - record on which user is added as job function\n     * @param {GlideRecord}\n     *            jfa - Job Function access\n     * @param {GlideUser}\n     *            user (if no user is provided, records for all users will be deleted)\n     * @return\n     */\n    _deleteRecord: function(record, jfa, user) {\n        this.logger.debug(\" deleteRecords - start \" + user.sys_id + \" \" + record.sys_id + \" \" + jfa.sys_id);\n        var gr = new GlideRecord(this.tableName);\n        // if no user is provided, records for all users will be deleted\n        if (!user) {\n            gr.addQuery(\"u_user\", user.sys_id);\n        }\n        gr.addQuery(\"u_rec_sys_id\", record.sys_id);\n        gr.addQuery(\"u_jf_access\", jfa.sys_id);\n        gr.query();\n\n        gr.deleteMultiple();\n        this.logger.debug(\" deleteRecords - end \" + gr.getRowCount());\n    },\n\n    /*\n     * delete access records with reference @method _deleteRecordWithRef @param {Table Name} staTable - which Sales Team table to delete record from @param {GlideRecord} fromSTA - from which STA\n     * record this record is inherited @param {Table Name} fromSTTable - from which ST table this record is inherited\n     */\n    _deleteRecordWithRef: function(stTable, fromSTA, fromSTTable) {\n        this.logger.debug(\" deleteRecordWithRef - start \");\n        var gr = new GlideRecord(stTable);\n        gr.addQuery('u_from_sta', fromSTA.sys_id);\n        gr.addQuery('u_from_st_table', fromSTTable);\n        gr.deleteMultiple();\n    },\n\n    /**\n     * Persist advanced records\n     * \n     * @method persistAdvancedRecords\n     * @param {GlideUser}\n     *            user\n     * @param {GlideRecord}\n     *            record - record on which user is added as job function\n     * @param {GlideRecord}\n     *            jfa - Job Function access\n     * @return\n     * \n     * persistAdvancedRecords: function(user, record, jfa) { this.logger.debug(\" persistAdvancedRecords - start \"); var dotWalkField = jfa.u_related_field; var parentRecord = record[dotWalkField];\n     * this.persistRecord(user, parentRecord, jfa); this.logger.debug(\" persistAdvancedRecords - end \"); },\n     */\n    /**\n     * Persist child records\n     * \n     * @method persistChildRecords\n     * @param {GlideUser}\n     *            user\n     * @param {GlideRecord}\n     *            jfa - Job Function access\n     * @param {GlideRecord}\n     *            fromSTA - the parent STA record\n     * @param {String}\n     *            rootSysId - Sys Id for the original record that triggered this cascading persist\n     * @return {Array of GlideRecord} staArr - an array that contains the child STA records created\n     */\n    persistChildOrParentRecords: function(user, jfa, fromSTA, replaceUserId, direction, recordSysId) {\n        this.logger.debug(\" persistChildOrParentRecords - start. user: \" + user.name + \", parentSTTable: \" + fromSTA.getTableName() + \", parentSTA: \" + fromSTA.sys_id + \", JFA: \" + jfa.u_number + \", direction: \" + direction);\n        try {\n            var staArr = [];\n            var gr;\n            if (direction == 'down') {\n                gr = this._getChildRecordsGr(fromSTA.u_rec_sys_id, jfa, recordSysId);\n                gs.log('number of child records found: ' + gr.getRowCount(), 'andy');\n            } else {\n                gr = this._getParentRecordGr(fromSTA.u_rec_sys_id, jfa);\n            }\n            while (gr.next()) {\n                this.logger.debug(\" persistChildOrParentRecords - inserting STA for child record \" + gr.sys_id);\n                var sta = this.persistRecord(user.sys_id, gr, jfa, fromSTA, '', replaceUserId);\n                if (sta && JSUtil.notNil(sta)) {\n                    staArr.push(sta);\n                    if (direction == 'down' && gr.getTableName() == 'sales_opportunity' && jfa.u_related_field == 'sales_partner') {\n                        this.logger.debug('persistChildOrParentRecords - fire event to update partner on opty ' + gr.number);\n                        gs.eventQueue(\"salesteam.update.partner.opportunity\", gr, gr.sys_id + '', '');\n                    }\n                }\n            }\n            this.logger.debug(\" persistChildOrParentRecords - end \");\n            return staArr;\n        } catch (error) {\n            this.logger.debug('persistChildOrParentRecords - exception happened ' + error);\n        }\n    },\n\n    /**\n     * Persist territory hierarchy\n     * \n     * @method persistTerritoryHierarchyRecords\n     * @param {GlideUser}\n     *            user\n     * @param {GlideRecord}\n     *            record - record on which user is added as job function\n     * @param {GlideRecord}\n     *            jfa - Job Function access\n     * @return\n     * \n     * persistTerritoryHierarchyRecords: function(user, record, jfa) { this.logger.debug(\" persistTerritoryHierarchyRecords - start \" + user.sys_id + \" \" + record.sys_id + \" \" + jfa.sys_id); var util =\n     * SalesTeamUtil.getInstance(); var relatedField = jfa.u_related_field, relatedTable = jfa.u_table; var allChildTerritories = util.getChildTerritories(record.sys_id); allChildTerritories =\n     * util.createArrayChunks(allChildTerritories, 500); for (var i = 0; i < allChildTerritories.length; i++) { var territoryIds = allChildTerritories[i].join(\",\"); this.logger.debug(\"\n     * persistTerritoryHierarchyRecords - territoryIds \" + territoryIds); var gr = new GlideRecord(relatedTable); gr.addQuery(\"\" + relatedField, \"IN\", territoryIds); // relatedField is the territory\n     * ref field on object gr.query(); while (gr.next()) { this.persistRecord(user, gr, jfa); } } },\n     */\n    /**\n     * delete territory hierarchy\n     * \n     * @method persistTerritoryHierarchyRecords\n     * @param {GlideUser}\n     *            user\n     * @param {GlideRecord}\n     *            record - record on which user is added as job function\n     * @param {GlideRecord}\n     *            jfa - Job Function access\n     * @return\n     */\n    deleteTerritoryHierarchyRecords: function(user, record, jfa) {\n        this.logger.debug(\" persistTerritoryHierarchyRecords - start \" + user.sys_id + \"  \" + record.sys_id + \"  \" + jfa.sys_id);\n        var util = SalesTeamUtil.getInstance();\n        var relatedField = jfa.u_related_field,\n            relatedTable = jfa.u_table;\n        var allChildTerritories = util.getChildTerritories(record.sys_id);\n        allChildTerritories = util.createArrayChunks(allChildTerritories, 500);\n        for (var i = 0; i < allChildTerritories.length; i++) {\n\n            var territoryIds = allChildTerritories[i].join(\",\");\n            this.logger.debug(\" persistTerritoryHierarchyRecords - territoryIds \" + territoryIds);\n            var gr = new GlideRecord(relatedTable);\n            gr.addQuery(\"\" + relatedField, \"IN\", territoryIds); // relatedField is the territory ref field on object\n            gr.query();\n            while (gr.next()) {\n                this._deleteRecord(gr, jfa, user);\n            }\n        }\n    },\n    /**\n     * Insert a record in sales team access table\n     * \n     * @method persistRecord\n     * @param {sys_id}\n     *            userSysId\n     * @param {GlideRecord}\n     *            record - the record to access\n     * @param {GlideRecord}\n     *            jfa - Job function access\n     * @param (optional)\n     *            {GlideRecord} fromSTA - the STA record that should be referred to as a parent STA\n     * @param (optional)\n     *            {boolean} forceDirect - force it to be a direct assignment even though fromSTA exist. Only used in scenario where we need to create a special direct assignment (from Field Territory)\n     * @return {GlideRecord} sta - the inserted STA record\n     */\n    persistRecord: function(userSysId, record, jfa, fromSTA, forceDirect, replaceUserId, hardcodedPrimaryValue) {\n        if (!this.tableName) {\n            this.tableName = SalesTeamConstants.jfaTableToSTTableMap[this.util.getTableName(record)];\n        }\n\n        this.logger.debug(\" persistRecord - start \" + userSysId + \"  \" + record.sys_id + \"  \" + jfa.sys_id + \" table: \" + this.tableName + \" from STA: \" + fromSTA.sys_id);\n        var existSta = this._isAssignmentExist(jfa, record.sys_id, userSysId, fromSTA.u_root_sys_id);\n        if (existSta) {\n            this.logger.debug(\" persistRecord - sta from the same root already exist: \" + existSta.sys_id + \". Skip creating new sta\");\n            return existSta;\n        }\n        var util = SalesTeamUtil.getInstance();\n        var sta = new GlideRecord(this.tableName);\n        sta.initialize();\n        sta.u_rec_sys_id = record.sys_id;\n        sta.u_user = userSysId;\n        sta.u_jf_access = jfa.sys_id;\n        sta.u_job_function = jfa.u_job_function.sys_id;\n\n        if (!fromSTA || JSUtil.nil(fromSTA)) {\n            sta.u_direct_assignment = true;\n            sta.u_start_date = new SalesTeamGetTodaysDate().execute();\n            sta.u_comp = jfa.u_job_function.u_comp;\n            sta.u_root_rec_sys_id = record.sys_id;\n            if (!sta.u_root_sys_id) {\n                sta.u_root_sys_id = sta.sys_id;\n            }\n            if (this.tableName == 'u_st_territory') {\n                sta.u_territory = record.sys_id;\n            }\n        } else {\n            if (forceDirect) {\n                sta.u_direct_assignment = true;\n                if (fromSTA.u_start_date > gs.now()) {\n                    sta.u_start_date = fromSTA.u_start_date;\n                } else {\n                    sta.u_start_date = new SalesTeamGetTodaysDate().execute();\n                }\n            } else {\n                sta.u_direct_assignment = false;\n                sta.u_start_date = fromSTA.u_start_date;\n            }\n            sta.u_root_sys_id = fromSTA.u_root_sys_id;\n            sta.u_end_date = fromSTA.u_end_date;\n            sta.u_comp = fromSTA.u_comp;\n            sta.u_from_sta = fromSTA.sys_id;\n            sta.u_from_st_table = fromSTA.getTableName();\n            sta.u_active = fromSTA.u_active;\n            sta.u_root_rec_sys_id = fromSTA.u_root_rec_sys_id;\n            if (JSUtil.notNil(fromSTA.u_territory)) {\n                sta.u_territory = fromSTA.u_territory;\n            }\n        }\n\n        if (this.tableName != 'u_st_territory') {\n            sta.u_from_territory = fromSTA.getTableName() == 'u_st_territory' ? fromSTA.u_rec_sys_id : fromSTA.u_from_territory;\n        }\n\n        var skipPrimaryCheck = hardcodedPrimaryValue === true || hardcodedPrimaryValue === false;\n        // set display and my_salesTeam flags to false for closed opty or specially pulled records\n        if (this.tableName == 'u_st_opportunity') {\n\n            if (forceDirect || SSAOpportunityUtil.isOppClosed(record)) {\n                sta.u_display = false;\n                sta.u_my_salesteam = false;\n                if (!skipPrimaryCheck) {\n                    sta.u_primary_assignment = false;\n                    skipPrimaryCheck = true;\n                }\n            } else if (sta.u_job_function.u_jf_key.indexOf('partner_manager') > -1) {\n                sta.u_display = false;\n                sta.u_my_salesteam = false;\n                if (!skipPrimaryCheck) {\n                    sta.u_primary_assignment = false;\n                    skipPrimaryCheck = true;\n                }\n            } else {\n                sta.u_display = true;\n                sta.u_my_salesteam = util.isMySalesTeam(sta, record);\n            }\n        }\n\n        if (!skipPrimaryCheck) {\n            if (jfa.u_relation_type == 'up') {\n                sta.u_primary_assignment = false;\n            } else {\n                var exPrimaryUser = this.findPrimaryUser(sta);\n                if (!exPrimaryUser) {\n                    this.logger.debug('persistRecord - JF ' + sta.u_job_function.u_name + ', no primary find. Making ' + sta.u_user.name + ' primary on record ' + record.sys_id);\n                    sta.u_primary_assignment = true;\n                } else if (replaceUserId && exPrimaryUser.sys_id == replaceUserId) {\n                    this.logger.debug('persistRecord - JF ' + sta.u_job_function.u_name + ', primary found and match replace user. Replacing primary ' + exPrimaryUser.name + ' on record ' + record.sys_id);\n                    sta.u_primary_assignment = true;\n                    var service = new SalesTeamAccessService();\n                    service.removeExPrimary(sta);\n                } else {\n                    this.logger.debug('persistRecord - JF ' + sta.u_job_function.u_name + ', primary found but does not match replace user ' + replaceUserId + '. Not replacing primary ' + exPrimaryUser.name + ' on record ' + record.sys_id);\n                    sta.u_primary_assignment = false;\n                }\n            }\n        }\n\n        if (hardcodedPrimaryValue === 'true' || hardcodedPrimaryValue === 'false') {\n            this.logger.debug('hardcode primary to ' + hardcodedPrimaryValue + ' for ' + sta.u_user.name + ' on ' + sta.u_rec_sys_id.number);\n            sta.u_primary_assignment = hardcodedPrimaryValue === 'true' ? true : false;\n        }\n\n        var staId = sta.insert();\n\n        sta.sys_updated_by = fromSTA.sys_updated_by;\n        sta.autoSysFields(false);\n        sta.setWorkflow(false);\n        sta.update();\n        if (!staId) {\n            this.logger.debug('persistRecord - failed');\n            return false;\n        }\n        this.logger.debug(\" persistRecord - STA created: \" + staId);\n        if (sta.u_my_salesteam) {\n            this.logger.debug(\" persistRecord - adding to SalesTeam User list\");\n            util.updateSalesTeamUserList(userSysId, record, 'insert');\n        }\n\n        this.logger.debug(\" persistRecord - end\");\n        return sta;\n    },\n\n    /**\n     * This method returns child records gr on which conditions are already added and query function is already called.\n     * \n     * @method _getChildRecordsGr\n     * @param {GlideRecord}\n     *            parentRecord - parent record that is referred to on the child records\n     * @param {GlideRecord}\n     *            jfa - Job Function access\n     * @return\n     */\n    _getChildRecordsGr: function(parentRecord, jfa, recordSysId) {\n        this.logger.debug(\" _getChildRecordsGr - start. parent record: \" + parentRecord.sys_id + \", jfa: \" + jfa.u_number);\n        try {\n            var relatedField = jfa.u_related_field;\n            var gr = new GlideRecord(jfa.u_table.toString());\n            if (recordSysId) {\n                gr.addQuery('sys_id', recordSysId);\n            } else {\n                if (relatedField == \"sales_partner\") {\n                    var childIds = this._getPartnerAcctOrOpty(parentRecord.sys_id, 'partner');\n                    if (childIds && childIds.length > 0) {\n                        gr.addQuery('sys_id', \"IN\", childIds.join());\n                    } else {\n                        this.logger.debug('_getParentRecordGr - childIds array is empty');\n                        return false;\n                    }\n                } else {\n                    gr.addQuery(\"\" + relatedField, parentRecord.sys_id);\n                }\n            }\n\n            gr.addQuery('skip_before_query', true);\n            gr.query();\n            return gr;\n        } catch (error) {\n            this.logger.debug('_getParentRecordGr - exception happened ' + error);\n        }\n    },\n\n    /*\n     * Returns the parent record being refered to from the child record @method _getParentRecordGr @param {GlideRecord} childRecord - the child record used to find parent records @param {GlideRecord}\n     * jfa - the JFA we are processing @return the parent GlideRecord\n     */\n    _getParentRecordGr: function(childRecord, jfa) {\n        this.logger.debug(\" _getParentRecordGr - start. from record: \" + childRecord.sys_id + \", jfa: \" + jfa.u_number);\n        var gr = new GlideRecord(jfa.u_table.toString());\n        var relatedField = jfa.u_related_field;\n        this.logger.debug('_getParentRecordGr - related field: ' + relatedField);\n        if (relatedField == \"sales_partner\") {\n            var partnerIds = this._getPartnerAcctOrOpty(childRecord.sys_id, 'opportunity');\n            this.logger.debug('_getParentRecordGr - partnerIds: ' + partnerIds.toString());\n            if (partnerIds && partnerIds.length > 0) {\n                gr.addQuery('sys_id', \"IN\", partnerIds.join());\n            } else {\n                this.logger.debug('_getParentRecordGr - partnerIds array is empty');\n                return false;\n            }\n        } else if (!childRecord[relatedField]) {\n            this.logger.debug(' _getParentRecordGr - related field has empty value. Cannot find parents.');\n            return false;\n        } else {\n            this.logger.debug('_getParentRecordGr - adding query: sys_id=' + childRecord[relatedField] + '');\n            gr.addQuery('sys_id', childRecord[relatedField] + '');\n        }\n        gr.addQuery('skip_before_query', true);\n        gr.query();\n\n        // var parentRecord = childRecord[relatedField].getRefRecord();\n        if (gr.hasNext()) {\n            this.logger.debug(\" _getParentRecordGr - number of parent record found: \" + gr.getRowCount());\n            return gr;\n        } else {\n            this.logger.debug(\" _getParentRecordGr - parent record not found\");\n            return false;\n        }\n    },\n\n    /*\n     * Get opportunities or partner accounts from \"u_opportunity_partner\" table. @method _getPartnerAcctOrOpty @param {string} fromRecordId - the sys id of opportunity or account from which we are\n     * searching from. @param {string} fromRecordType - the type of the record we are searching from. @return {Array} targetIds - the array of sys ids of the target records. (Partner account or\n     * opportunity)\n     * \n     */\n    _getPartnerAcctOrOpty: function(fromRecordId, fromRecordType) {\n        this.logger.debug('_getPartnerAcctOrOpty - start. fromRecordId: ' + fromRecordId + ', type: ' + fromRecordType);\n        var targetIds = [];\n        var queryField = '';\n        var targetField = '';\n        if (fromRecordType == 'opportunity') {\n            // find sales partner accounts from an opportunity\n            queryField = 'u_opportunity';\n            targetField = 'u_partner_account';\n        } else {\n            // find opportunities from a sales partner account\n            queryField = 'u_partner_account';\n            targetField = 'u_opportunity';\n        }\n        this.logger.debug('_getPartnerAcctOrOpty - queryField: ' + queryField + ', targetField: ' + targetField);\n        var gr = new GlideRecord(\"u_opportunity_partner\");\n        gr.addQuery(queryField, fromRecordId);\n        gr.addQuery('u_active', true);\n        gr.query();\n        this.logger.debug('_getPartnerAcctOrOpty - number of records found: ' + gr.getRowCount());\n        while (gr.next()) {\n            targetIds.push(gr[targetField] + \"\");\n        }\n        return targetIds;\n    },\n\n    /**\n     * Persist parent records\n     * \n     * @method persistParentRecords\n     * @param {GlideUser}\n     *            user\n     * @param {GlideRecord}\n     *            record - record on which user is added as job function\n     * @param {GlideRecord}\n     *            jfa - Job Function access\n     * @param {Table\n     *            Name} fromSTTable - from which ST table this record is inherited\n     * @param {GlideRecord}\n     *            fromST - from which ST record this record is inherited\n     * @return\n     */\n    deleteParentRecords: function(user, record, jfa, fromSTA, fromSTTable) {\n        this.logger.debug(\" persistParentRecords - start \");\n        var dotWalkField = jfa.u_related_field;\n        var parentRecord = record[dotWalkField];\n        this._deleteRecord(parentRecord, jfa, user);\n        this.logger.debug(\" persistParentRecords - end \");\n\n    },\n    /**\n     * Persist child records\n     * \n     * @method persistChildRecords\n     * @param {GlideUser}\n     *            user\n     * @param {GlideRecord}\n     *            record - record on which user is added as job function\n     * @param {GlideRecord}\n     *            jfa - Job Function access\n     * @return\n     */\n    deleteChildRecords: function(user, record, jfa) {\n        var gr = this._getChildRecordsGr(user, record, jfa);\n        while (gr.next()) {\n            this._deleteRecord(gr, jfa, user);\n        }\n        this.logger.debug(\" deleteChildRecords - end \");\n\n    },\n\n    /*\n     * for a specific record, get STA records for only the a JFA level for a specific user @method getSTAByUserAndJFA @param {GlideRecord} record @param {GlideRecord} jfa @param {GlideRecord} user\n     */\n    getSTAByUserAndJFA: function(record, jfa, user) {\n        var sta;\n        if (record && jfa && user) {\n            this.logger.debug(\" getSTAByUserAndJFA - start. JFA: \" + jfa.u_number);\n            var tableName = this.util.getTableName(record);\n            var stTable = SalesTeamConstants.jfaTableToSTTableMap[tableName];\n            sta = new GlideRecord(stTable);\n            sta.addQuery('u_rec_sys_id', record.sys_id);\n            sta.addQuery('u_user', user.sys_id);\n            sta.addQuery('u_jf_access', jfa.sys_id);\n            sta.addQuery('u_active', true);\n            sta.query();\n            this.logger.debug(\" getSTAByUserAndJFA - number of STA found: \" + sta.getRowCount());\n        }\n        return sta;\n    },\n\n    /*\n     * for a specific record, get STA records for a specific user @method getSTAByUser @param {GlideRecord} record @param {GlideRecord} user\n     */\n    getSTAByUser: function(record, user) {\n        var sta;\n        if (record && user) {\n            this.logger.debug(\" getSTAByUser - start. Record: \" + record.sys_id + \" User: \" + user.sys_id);\n            var tableName = this.util.getTableName(record);\n            var stTable = SalesTeamConstants.jfaTableToSTTableMap[tableName];\n            sta = new GlideRecord(stTable);\n            sta.addQuery('u_rec_sys_id', record.sys_id);\n\n            var userCond = sta.addQuery('u_user', user.sys_id);\n            if (user.u_downward_mgmt_chain)\n                userCond.addOrCondition(\"u_user\", \"IN\", user.u_downward_mgmt_chain);\n\n            // userCond.addOrCondition(\"u_user.u_upward_mgmt_chain\", \"CONTAINS\", user.sys_id);\n            var stService = new SalesTeamAccessService();\n            if (typeof usersElevatedTerr === 'undefined') {\n                usersElevatedTerr = stService.getUsersElevatedTerritoriesByJf(user.sys_id);\n            }\n            var readJfs = gs.getProperty('salesteam.elevated.jf.read');\n            var managerReadJf = gs.getProperty('salesteam.jf.elevated.sys_id');\n            var elevatedJf = '';\n\n            for (var jfId in usersElevatedTerr) {\n                elevatedJf = (readJfs.indexOf(jfId) > -1) ? managerReadJf : jfId;\n                var condByJf = userCond.addOrCondition('u_job_function', elevatedJf);\n                var usersElevatedTerrByJf = usersElevatedTerr[jfId];\n                if (!usersElevatedTerrByJf) {\n                    continue;\n                }\n                if (usersElevatedTerrByJf[\"Global\"].length > 0) {\n                    condByJf.addCondition(\"u_user\", \"NULL\");\n                } else {\n                    var condByJfByLevel = condByJf.addCondition(\"1\", \"=\", \"0\"); // just to add a false condition\n                    if (usersElevatedTerrByJf[\"Geo\"].length > 0) {\n                        condByJfByLevel.addOrCondition(\"u_geo\", \"IN\", \"\" + usersElevatedTerrByJf[\"Geo\"].join());\n                        if (tableName == \"sales_opportunity\") {\n                            condByJfByLevel.addOrCondition(\"u_field_territory_geo\", \"IN\", \"\" + usersElevatedTerrByJf[\"Geo\"].join());\n                            condByJfByLevel.addOrCondition(\"u_msp_territory_geo\", \"IN\", \"\" + usersElevatedTerrByJf[\"Geo\"].join());\n                        }\n                    }\n                    if (usersElevatedTerrByJf[\"Area\"].length > 0) {\n                        condByJfByLevel.addOrCondition(\"u_area\", \"IN\", \"\" + usersElevatedTerrByJf[\"Area\"].join());\n                        if (tableName == \"sales_opportunity\") {\n                            condByJfByLevel.addOrCondition(\"u_field_territory_area\", \"IN\", \"\" + usersElevatedTerrByJf[\"Area\"].join());\n                            condByJfByLevel.addOrCondition(\"u_msp_territory_area\", \"IN\", \"\" + usersElevatedTerrByJf[\"Area\"].join());\n                        }\n                    }\n                    if (usersElevatedTerrByJf[\"Region\"].length > 0) {\n                        condByJfByLevel.addOrCondition(\"u_region\", \"IN\", \"\" + usersElevatedTerrByJf[\"Region\"].join());\n                        if (tableName == \"sales_opportunity\") {\n                            condByJfByLevel.addOrCondition(\"u_field_territory_region\", \"IN\", \"\" + usersElevatedTerrByJf[\"Region\"].join());\n                            condByJfByLevel.addOrCondition(\"u_msp_territory_region\", \"IN\", \"\" + usersElevatedTerrByJf[\"Region\"].join());\n                        }\n                    }\n                    if (usersElevatedTerrByJf[\"District\"].length > 0) {\n                        condByJfByLevel.addOrCondition(\"u_district\", \"IN\", \"\" + usersElevatedTerrByJf[\"District\"].join());\n                        if (tableName == \"sales_opportunity\") {\n                            condByJfByLevel.addOrCondition(\"u_field_territory_district\", \"IN\", \"\" + usersElevatedTerrByJf[\"District\"].join());\n                            condByJfByLevel.addOrCondition(\"u_msp_territory_district\", \"IN\", \"\" + usersElevatedTerrByJf[\"District\"].join());\n                        }\n                    }\n                }\n            }\n\n            sta.addQuery('u_active', true);\n            sta.query();\n            this.logger.debug(\" getSTAByUser - number of STA found: \" + sta.getRowCount());\n        }\n        return sta;\n    },\n\n    /*\n     * For a specific record, get Direct assigned STA records for a specific user @method getDirectSTAs @param {GlideRecord} record @param (optional) {GlideRecord} user @param (optional) {boolean}\n     * includeFutureAssignment - whether to include future assignments. If not specified, future assignments will not be included\n     */\n    getDirectSTAs: function(record, user, includeFutureAssignment) {\n        this.logger.debug(\" getDirectSTAByUser- start. Record: \" + record.sys_id);\n        if (!record || !record.isValidRecord()) {\n            this.logger.debug('getDirectSTAs - no a valid object record');\n            return false;\n        }\n        var stTable = SalesTeamConstants.jfaTableToSTTableMap[SalesTeamUtil.getInstance().getTableName(record)];\n        var sta = new GlideRecord(stTable);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery('u_direct_assignment', true);\n\n        if (user) {\n            sta.addQuery('u_user', user.sys_id);\n        }\n\n        if (includeFutureAssignment) {\n            var qc = sta.addQuery('u_active', true);\n            qc.addOrCondition('u_start_date', '>', gs.now());\n        } else {\n            sta.addQuery('u_active', true);\n        }\n\n        sta.query();\n        this.logger.debug(\" getDirectSTAByUser- number of STA found: \" + sta.getRowCount());\n        return sta;\n    },\n\n    /*\n     * Find STA records from a given ST table that refers to a specific STA record @method getChildSTAs @param {GlideRecord} parentSTA - the STA record being referenced to @param {Table Name} stTable -\n     * from which ST table we need to search STA records @return {GlideRecords} sta - the GlideRecord query result of child STA records\n     */\n    getChildSTAs: function(parentSTA, stTable) {\n        this.logger.debug(\" getChildSTAs - from parent STA: \" + parentSTA.sys_id + \", in ST table: \" + stTable);\n        if (!stTable) {\n            stTable = this.tableName;\n        }\n        var sta = new GlideRecord(stTable);\n        sta.addQuery('u_from_sta', parentSTA.sys_id);\n        sta.addQuery('u_active', true);\n        sta.query();\n        this.logger.debug(\" getChildSTAs - number of child STAs found: \" + sta.getRowCount());\n        return sta;\n    },\n\n    /**\n     * get all tables which user\n     * \n     * @parm sysId : {string} - sys_id value\n     * @method getAllAccessTableOfJF\n     * @param {string}\n     *            jfSysId\n     * @return\n     */\n    getAllAccessTableOfJF: function(jfSysId) {\n\n    },\n\n    /*\n     * Method to get all STAs for a combination of JFA and object\n     * \n     * @param {String} stTable - The STA table to look in to @param {String} jfaSysId - The JFA to look for @param {String} recSysId - The object to look for @return {GlideRecord} - All STAs that\n     * match the criteria\n     */\n    getSTAsForJFAAndObject: function(stTable, jfaSysId, recSysId) {\n        this.logger.debug('getSTAsForJFAAndObject begin with ' + stTable + ' ' + jfaSysId + ' ' + recSysId);\n\n        var result = new GlideRecord(stTable);\n        result.addQuery('u_jf_access', jfaSysId);\n        result.addQuery('u_rec_sys_id', \"IN\", recSysId);\n\n        var activeCondition = result.addQuery('u_active', true);\n        activeCondition.addOrCondition('u_start_date', '>', gs.now());\n\n        result.orderByDesc('u_primary_assignment');\n        result.query();\n\n        this.logger.debug('getSTAsForJFAAndObject end');\n        return result;\n    },\n\n    /*\n     * Method to get all STAs by parent and object\n     * \n     * @param {String} stTable - The STA table to look in to @param {String} parentSTASysId - The parent STA record to look for @param {String} recSysId - The object to look for @return {GlideRecord} -\n     * All STAs that match the criteria\n     */\n    getSTAsForParentAndObject: function(stTable, parentSTASysId, recSysId) {\n        this.logger.debug('getSTAsForParentAndObject begin with ' + stTable + ' ' + parentSTASysId + ' ' + recSysId);\n\n        var result = new GlideRecord(stTable);\n        result.addQuery('u_from_sta', parentSTASysId);\n        result.addQuery('u_rec_sys_id', recSysId);\n        result.addQuery('u_active', true);\n        result.query();\n\n        this.logger.debug('getSTAsForParentAndObject end with ', result);\n        return result;\n    },\n\n    /*\n     * Method to get all STAs by parent and object\n     * \n     * @param {String} stTable - The STA table to look in to @param {String} parentSTASysId - The parent STA record to look for @param {String} jfaSysId - The JFA to look for @return {GlideRecord} -\n     * All STAs that match the criteria\n     */\n    getSTAsForParentAndJFA: function(stTable, parentSTASysId, jfaSysId) {\n        this.logger.debug('getSTAsForParentAndObject begin with ' + stTable + ' ' + parentSTASysId + ' ' + jfaSysId);\n\n        var result = new GlideRecord(stTable);\n        result.addQuery('u_from_sta', parentSTASysId);\n        result.addQuery('u_jf_access', jfaSysId);\n        result.addQuery('u_active', true);\n        result.query();\n\n        this.logger.debug('getSTAsForParentAndObject end with ', result);\n        return result;\n    },\n\n    /*\n     * Update specified fields on STA records from Root STA @method updateSTAsFromRoot @param {GlideRecord} rootSTA @param [Array] fields / string field - it could be an array of field names or a\n     * single field name\n     */\n    updateSTAsFromRootSTA: function(rootSTA, fields) {\n        this.logger.debug(' updateSTAsFromRoot - start. table: ' + this.tableName + ', rootSTA: ' + rootSTA.sys_id + ', fields to update: ' + fields.toString());\n        var isMultipleFields = (Array.isArray(fields)) ? true : false;\n        var sta = this._getSTAsFromRootSTA(rootSTA);\n        while (sta.next()) {\n            if (isMultipleFields) {\n                // a field array was passed\n                this.logger.debug(' updateSTAsFromRoot - updating multiple fields on ' + sta.sys_id);\n                for (var i = 0; i < fields.length; i++) {\n                    sta[fields[i]] = rootSTA[fields[i]];\n                }\n            } else {\n                // a single field name was passed\n                this.logger.debug(' updateSTAsFromRoot - updating one field: ' + fields + ' on ' + sta.sys_id);\n                sta[fields] = rootSTA[fields];\n            }\n            sta.update();\n        }\n        this.logger.debug(' updateSTAsFromRoot - complete for table: ' + this.tableName);\n    },\n\n    updateDirectSTA: function(sta, replacePrimary) {\n        this.logger.debug('updateDirectSTA - start. STA: ' + sta.sys_id);\n        if (!sta.isValidRecord()) {\n            this.logger.debug('updateDirectSTA - invalid sta. Return false.');\n            return false;\n        }\n        var jf = sta.u_job_function;\n        var record = sta.u_rec_sys_id.getRefRecord();\n        var user = sta.u_user;\n        var stTable = sta.getTableName();\n        var util = SalesTeamUtil.getInstance();\n\n        if (JSUtil.nil(sta.u_root_sys_id)) {\n            sta.u_root_sys_id = sta.sys_id;\n        }\n\n        // fill in JFA reference if not already exists\n        if (JSUtil.nil(sta.u_jf_access)) {\n            sta.u_jf_access = this.jfDAO.getDirectJFAOfJF(jf).sys_id;\n        }\n\n        // add territory reference if it is a direct assignment at territory\n        if (sta.u_direct_assignment && stTable == 'u_st_territory') {\n            sta.u_territory = sta.u_rec_sys_id;\n        }\n        if (JSUtil.nil(sta.u_root_rec_sys_id)) {\n            sta.u_root_rec_sys_id = sta.u_rec_sys_id;\n        }\n        var assigner = gs.getUser();\n        assigner = assigner.getUserByID(sta.sys_created_by + '');\n        var isBySOPS = assigner.hasRole('sales_operations');\n        var isSC = jf.u_jf_key.startsWith('solution_consultant') && assigner.hasRole('salesteam_solution_consultant');\n        var isISM = jf.u_jf_key.startsWith('overlay_adr') && assigner.hasRole('inside_sales_manager');\n        var isSDM = jf.u_jf_key.startsWith('ps_solution_dev_manager') && assigner.hasRole('salesteam_assign_sdm');\n\n        // Set primary flag\n        if (!sta.u_active) {\n            sta.u_primary_assignment = false;\n        } else if (sta.getTableName() == 'u_st_opportunity' && !isBySOPS && !isSC && !isISM && !isSDM && SSAOpportunityUtil.isOppClosed(sta.u_rec_sys_id.getRefRecord())) {\n            sta.u_primary_assignment = false;\n        } else {\n            if (!replacePrimary) {\n                var exPrimary = this.findPrimaryUser(sta);\n                sta.u_primary_assignment = (exPrimary) ? false : true;\n            } else {\n                sta.u_primary_assignment = true;\n                var service = new SalesTeamAccessService();\n                service.removeExPrimary(sta);\n            }\n        }\n\n        // Set display and my SalesTeam flags\n        if (stTable == 'u_st_opportunity') {\n            sta.u_display = true;\n            if (!SSAOpportunityUtil.isOppClosed(record) || sta.u_direct_assignment) {\n                sta.u_my_salesteam = util.isMySalesTeam(sta, record);\n            } else {\n                sta.u_my_salesteam = false;\n            }\n        }\n\n        this.logger.debug('updateDirectSTA - saving STA changes. STA: ' + sta.sys_id);\n        sta.autoSysFields(false);\n        sta.update();\n        if (sta.u_my_salesteam) {\n            this.logger.debug(\" updateDirectSTA - adding to SalesTeam User list\");\n            util.updateSalesTeamUserList(user, record, 'insert');\n        }\n        this.logger.debug('updateDirectSTA - end');\n        return sta;\n    },\n\n    deleteSTAsFromRootSTA: function(rootSTA) {\n        this.logger.debug('deleteSTAsFromRootSTA - start. rootSTA: ' + rootSTA.sys_id + ' st table: ' + this.tableName);\n        var sta = this._getSTAsFromRootSTA(rootSTA);\n        this.logger.debug('deleteSTAsFromRootSTA - deleting ' + sta.getRowCount() + ' records from ' + this.tableName);\n        sta.deleteMultiple();\n    },\n\n    _getSTAsFromRootSTA: function(rootSTA) {\n        var sta = new GlideRecord(this.tableName);\n        sta.addQuery('u_root_sys_id', rootSTA.sys_id);\n        sta.query();\n        return sta;\n    },\n\n    /*\n     * Check whether this STA overlaps with an existing STA record @method isOverlapAssignment @param {GlideRecord} sta @return {boolean} - true: is overlapped; false: there is no overlap\n     */\n    isOverlapAssignment: function(sta) {\n        this.logger.debug(' isOverlapAssignment - start. STA: ' + sta.sys_id);\n        var util = SalesTeamUtil.getInstance();\n        var startDate = new GlideDateTime(sta.u_start_date);\n        var endDate = new GlideDateTime(sta.u_end_date);\n        var exSTA = new GlideRecord(this.tableName);\n        exSTA.addQuery('u_rec_sys_id', sta.u_rec_sys_id);\n        exSTA.addQuery('u_user', sta.u_user);\n        exSTA.addQuery('u_job_function', sta.u_job_function);\n        exSTA.addQuery('u_root_rec_sys_id', '!=', sta.u_root_rec_sys_id);\n        exSTA.addQuery('sys_id', '!=', sta.sys_id);\n        exSTA.query();\n        this.logger.debug(' isOverlapAssignment - checking against ' + exSTA.getRowCount() + ' STA records');\n        while (exSTA.next()) {\n            if (util.isDateOverlap(sta, exSTA)) {\n                this.logger.debug(' isOverlapAssignment - over found.');\n                return true;\n            }\n        }\n        this.logger.debug(' isOverlapAssignment - ends. No overlap found');\n        return false;\n    },\n\n    getExSTA: function(sta, objectId, assignmentType) {\n        this.logger.debug(' getExSTA - start. objectId: ' + objectId + ', STA: ' + sta.sys_id + ', type: ' + assignmentType);\n        var exSTA = new GlideRecord(this.tableName);\n        exSTA.addQuery('u_active', true);\n        exSTA.addQuery('u_rec_sys_id', objectId);\n        exSTA.addQuery('u_user', sta.u_user);\n        exSTA.addQuery('u_job_function', sta.u_job_function);\n        exSTA.addQuery('sys_id', '!=', sta.sys_id);\n        if (assignmentType == 'direct') {\n            exSTA.addQuery('u_direct_assignment', true);\n        }\n        exSTA.query();\n        this.logger.debug(' getExSTA - number of EX STA found: ' + exSTA.getRowCount());\n        return exSTA;\n    },\n\n    /*\n     * Check whether an STA from the same assignment on this object already exist @method _isAssignmentExist @param {sys_id} rootSysId - the sys_id of the root STA record from the assignment @param\n     * {sys_id} recSysId - the sys_id of the object @param {sys_id} userId - the sys_id of the user record\n     */\n    _isAssignmentExist: function(jfa, recSysId, userId, rootSysId) {\n        this.logger.debug('_isAssignmentExist - start. rootSysId: ' + rootSysId + ', recSysId: ' + recSysId + ', userId: ' + userId);\n        var sta = new GlideRecord(this.tableName);\n        if (rootSysId) {\n            sta.addQuery('u_root_sys_id', rootSysId);\n        } else {\n            // sta.addQuery('u_jf_access', jfa);\n            sta.addQuery('u_direct_assignment', true);\n        }\n        sta.addQuery('u_jf_access', jfa.sys_id);\n        sta.addQuery('u_active', true);\n        sta.addQuery('u_rec_sys_id', recSysId);\n        sta.addQuery('u_user', userId);\n        sta.setLimit(1);\n        sta.query();\n        // if(!sta.hasNext())\n        // gs.log('_isAssignmentExist - start. rootSysId: ' + rootSysId + ', recSysId: ' + recSysId + ', userId: ' + userId, 'Duplicate-Debug');\n        return (sta.next()) ? sta : false;\n    },\n\n    /*\n     * update the primary flag on one sales team table @method setPrimary @param {GlideRecord} fromSTA - the parent STA record from which we will find child STA records to update @param {sys_id}\n     * oldUserId - the sys_id of the old primary user that is being replaced\n     */\n    setPrimary: function(fromSTA, oldUserId) {\n        this.logger.debug('setPrimary - start. ST Table: ' + this.tableName + ', fromSTA: ' + fromSTA.sys_id);\n        var staIdArr = [];\n        var sta = new GlideRecord(this.tableName);\n        sta.addQuery('u_from_sta', fromSTA.sys_id);\n        sta.addQuery('u_active', true);\n        sta.query();\n        this.logger.debug('setPrimary - number of child STAs to check: ' + sta.getRowCount());\n        while (sta.next()) {\n            staIdArr.push(sta.getValue('sys_id'));\n            if (this.tableName == 'u_st_opportunity' && SSAOpportunityUtil.isOppClosed(sta.u_rec_sys_id)) {\n                continue;\n            }\n            var oldPrimarySTA = this.getPrimarySTA(sta);\n            var oldPriUser = (oldPrimarySTA) ? oldPrimarySTA.u_user.sys_id : '';\n            if (!oldPriUser || oldPriUser == oldUserId) {\n                this.logger.debug('setPrimary - replacing primary from ' + oldPrimarySTA.sys_id + ' to ' + sta.sys_id + ' on record ' + sta.u_rec_sys_id.sys_id);\n                sta.u_primary_assignment = true;\n                sta.update();\n                var service = new SalesTeamAccessService();\n                service.removeExPrimary(sta);\n            }\n        }\n        return staIdArr;\n    },\n\n    getSTAById: function(staId, table) {\n        var sta = null;\n        if (table) {\n            sta = new GlideRecord(table);\n        } else {\n            sta = new GlideRecord(this.tableName);\n        }\n        sta.get(staId);\n        if (sta.isValidRecord()) {\n            return sta;\n        } else {\n            return false;\n        }\n    },\n\n    /*\n     * Check whether there is an active STA exist with the same kind of job function @method isOtherActiveStaExist @param {GlideRecord} sta - from which sta we are doing this check\n     */\n    isOtherActiveStaExist: function(sta) {\n        var recGr = sta.u_rec_sys_id;\n        var jf = sta.u_job_function;\n        var exSta = new GlideRecord(sta.getTableName());\n        exSta.addQuery('u_rec_sys_id', recGr.sys_id);\n        exSta.addQuery('u_active', true);\n        exSta.addQuery('u_job_function', 'IN', jf.sys_id + ',' + jf.u_associated_jf);\n        var qc = exSta.addQuery('u_jf_access.u_relation_type', '!=', 'up');\n        qc.addOrCondition('u_jf_access.u_relation_type', '');\n        exSta.addQuery('sys_id', '!=', sta.sys_id);\n        var qc2 = exSta.addQuery('u_direct_assignment', false);\n        qc2.addOrCondition('u_from_sta', '');\n        exSta.setLimit(1);\n        exSta.query();\n        return (exSta.next()) ? true : false;\n    },\n\n    getPrimarySTA: function(sta) {\n        var recGr = sta.u_rec_sys_id.getRefRecord();\n        var jf = sta.u_job_function;\n        var priSTA = new GlideRecord(sta.getTableName());\n        priSTA.addQuery('u_active', true);\n        priSTA.addQuery('u_primary_assignment', true);\n        priSTA.addQuery('u_rec_sys_id', recGr.sys_id);\n        priSTA.addQuery('u_job_function', 'IN', jf.sys_id + ',' + jf.u_associated_jf);\n        priSTA.addQuery('sys_id', '!=', sta.sys_id);\n        priSTA.query();\n        if (priSTA.next()) {\n            this.logger.debug('getPrimarySTA - primarySTA found: ' + priSTA.sys_id);\n            return priSTA;\n        } else {\n            this.logger.debug('getPrimarySTA - primary not found.');\n            return false;\n        }\n    },\n\n    /*\n     * Find primary sta by job function key (or a partial jf key) @method getPrimaryStaByJfKey @param {GlideRecord} record - on which object we want to check @param {string} jfKey - job function key /\n     * start with jf key. Fox example: sales_rep @return {GlideRecord} sta - sales team access record. Return false if no record is found\n     */\n    getPrimaryStaByJfKey: function(record, jfKey) {\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[SalesTeamUtil.getInstance().getTableName(record)]);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery('u_active', true);\n        sta.addQuery('u_primary_assignment', true);\n        sta.addQuery('u_job_function.u_jf_key', 'STARTSWITH', jfKey);\n        sta.query();\n        return (sta.next()) ? sta : false;\n    },\n\n    /*\n     * Find sales team records by related field and JF key @method getStaByJfKeyAndRelatedField @param {GlideRecord} record - on which object we want to check @param {string} jfKey - job function key /\n     * start with jf key. Fox example: sales_rep @return {list of GlideRecord} sta - a list of sales team access record. Return false if no record is found\n     */\n    getStaByJfKeyAndRelatedField: function(record, jfKey, relatedField) {\n        this.logger.debug('getStaByJfKeyAndRelatedField - record: ' + record.sys_id + ', jfKey: ' + jfKey + ', relatedField: ' + relatedField);\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[SalesTeamUtil.getInstance().getTableName(record)]);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery('u_active', true);\n        if (relatedField) {\n            sta.addQuery('u_jf_access.u_related_field', relatedField);\n        } else {\n            var qc = sta.addQuery('u_jf_access.u_relation_type', '!=', 'up');\n            qc.addOrCondition('u_jf_access.u_relation_type', '=', '');\n        }\n        sta.addQuery('u_job_function.u_jf_key', 'STARTSWITH', jfKey);\n        sta.orderByDesc('u_primary_assignment');\n        sta.query();\n        return (sta.hasNext()) ? sta : false;\n    },\n\n    getDirectStaByJfKey: function(record, jfKey) {\n        this.logger.debug('getDirectStaByJfKey - record: ' + record.sys_id + ', jfKey: ' + jfKey);\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[SalesTeamUtil.getInstance().getTableName(record)]);\n        sta.addQuery('u_direct_assignment', true);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery('u_active', true);\n        sta.addQuery('u_job_function.u_jf_key', 'STARTSWITH', jfKey);\n        sta.orderByDesc('u_primary_assignment');\n        sta.query();\n        return (sta.hasNext()) ? sta : false;\n    },\n\n    /*\n     * Get indirect sales team records on an object for a given kind of job functions including inactive sales team records\n     */\n    getIndirectSTAForRelatedJF: function(jf, record) {\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[record.getTableName()]);\n        sta.addQuery('u_direct_assignment', false);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery('u_job_function', 'IN', jf.sys_id + ',' + jf.u_associated_jf);\n        sta.query();\n        return sta;\n    },\n\n    getStaOnRecord: function(record) {\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[record.getTableName()]);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        var qc = sta.addQuery('u_active', true);\n        qc.addOrCondition('u_start_date', '>', gs.now());\n        sta.query();\n        return sta;\n    },\n\n    /*\n     * Get active sales team records with flag \"My SalesTeam\" is true\n     */\n    getMySalesTeamActiveStaOnRecord: function(record) {\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[record.getTableName()]);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery('u_active', true);\n        sta.addQuery('u_my_salesteam', true);\n        sta.query();\n        return sta;\n    },\n\n    getIndirectStaOnRecord: function(record) {\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[record.getTableName()]);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery('u_direct_assignment', false);\n        sta.addNotNullQuery('u_from_sta');\n        sta.query();\n        return sta;\n    },\n    getPrimaryRecordOfJf: function(user, JfNumber) {\n        var gr = new GlideRecord(this.tableName);\n        gr.addQuery(\"u_user\", user);\n        gr.addQuery(\"u_job_function.u_number\", JfNumber);\n        gr.addQuery(\"u_primary_assignment\", true);\n        gr.addQuery('u_active', true);\n        gr.query();\n        return gr;\n    },\n    getUserJFsforRecord: function(user, record, tableName) {\n        var sta = new GlideRecord(tableName);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery(\"u_user\", user);\n        sta.addQuery('u_active', true);\n        sta.query();\n        var jfs = [];\n        while (sta.next()) {\n            jfs.push(sta.u_job_function.u_number + \"\");\n        }\n        return jfs.join(\",\");\n\n    },\n    getUserTerritory: function(userSysId) {\n        var sta = new GlideRecord('u_st_territory');\n        sta.addQuery('u_active', true);\n        sta.addQuery('u_direct_assignment', true);\n        sta.addQuery('u_user', userSysId);\n        sta.orderBy('u_start_date');\n        sta.setLimit(1);\n        sta.query();\n        return sta.next() ? sta.u_rec_sys_id.getRefRecord() : false;\n    },\n    getAllTerritoriesOfUser: function(userSysId) {\n        var sta = new GlideRecord('u_st_territory');\n        sta.addQuery('u_active', true);\n        sta.addQuery('u_direct_assignment', true);\n        sta.addQuery('u_user', userSysId);\n        sta.orderBy('u_start_date');\n        sta.query();\n        return sta;\n    },\n\n    getDirectStaByUserAndJfkey: function(jfKey, record, userSysId) {\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[this.util.getTableName(record)]);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery('u_user', userSysId);\n        sta.addQuery('u_direct_assignment', true);\n        sta.addQuery('u_job_function.u_jf_key', \"IN\", jfKey);\n        var qc = sta.addQuery('u_active', true);\n        qc.addOrCondition('u_start_date', '>', gs.now());\n        sta.query();\n        return sta;\n    },\n\n    getDirectIndirectStaByUserAndJfkey: function(jfKey, record, userSysId) {\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[this.util.getTableName(record)]);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery('u_user', userSysId);\n        sta.addQuery('u_job_function.u_jf_key', \"IN\", jfKey);\n        var qc = sta.addQuery('u_active', true);\n        qc.addOrCondition('u_start_date', '>', gs.now());\n        sta.query();\n        return sta;\n    },\n\n    /*\n     * USE WITH CAUTION! This delete only the direct assignments. It does NOT do a cascading delete for child sta records.\n     */\n    deleteDirectStaByUserAndJfkey: function(jfKey, record, userSysId) {\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[this.util.getTableName(record)]);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.addQuery('u_user', userSysId);\n        sta.addQuery('u_direct_assignment', true);\n        sta.addQuery('u_job_function.u_jf_key', jfKey);\n        var qc = sta.addQuery('u_active', true);\n        qc.addOrCondition('u_start_date', '>', gs.now());\n        sta.query();\n        while (sta.next()) {\n            // need to deactivate it before deleting, otherwise an BR will abort the deletion\n            sta.u_active = false;\n            sta.setWorkflow(false);\n            sta.update();\n            sta.deleteRecord();\n        }\n    },\n\n    /*\n     * Delete all sales team records on an object. Should be only used when the target object is being deleted\n     */\n    deleteAllStaOnRecord: function(record) {\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[record.getTableName()]);\n        sta.addQuery('u_rec_sys_id', record.sys_id);\n        sta.deleteMultiple();\n    },\n    isUserAssignedWithJF: function(user, JfKey) {\n        var jf = this.jfDAO.getJFByKey(JfKey);\n        var count = new GlideAggregate(SalesTeamConstants.jfaTableToSTTableMap[jf.u_table + \"\"]);\n        count.addQuery(\"u_user\", user);\n        count.addQuery(\"u_job_function\", jf.sys_id);\n        count.addQuery(\"u_active\", true);\n        count.addAggregate('COUNT');\n        count.query();\n        var assignments = 0;\n        if (count.next())\n            assignments = count.getAggregate('COUNT');\n\n        return assignments > 0 ? true : false;\n\n    },\n\n    /*\n     * Method to determine if a user is assigned on an opportunity with one of job function numbers in a list\n     * \n     * @method isUserAssignedByJfNumbersList\n     * @param {String} userSysId - The user to determine access for\n     * @param {String} opportunitySysId - The sys id of the record to check access on\n     * @param {String} jfNumbers - The comma-separated list of job function numbers\n     * @return {Boolean} - True/False based on whether the user has access\n     */\n    isUserAssignedByJfNumbersList: function(userSysId, opportunitySysId, jfNumbers) {\n        var gr = new GlideRecord('u_st_opportunity');\n        gr.addQuery('u_active', true);\n        gr.addQuery('u_rec_sys_id', opportunitySysId);\n        gr.addQuery('u_user', userSysId);\n        gr.addQuery('u_job_function.u_number', 'IN', jfNumbers);\n        gr.setLimit(1);\n        gr.query();\n\n        return gr.hasNext();\n    },\n\n    /*\n     * get All active assignments of user\n     */\n    getAllAssignmentsByJF: function(user, JfKey) {\n        var jf = this.jfDAO.getJFByKey(JfKey);\n        var sta = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[jf.u_table + \"\"]);\n        sta.addQuery(\"u_user\", user);\n        sta.addQuery(\"u_job_function\", jf.sys_id);\n        sta.addQuery(\"u_active\", true);\n        sta.query();\n\n        return sta;\n    },\n\n    /*\n     * Get all primary Stas for a given sales team object\n     * \n     * @param {GlideRecord} record - The sys id for the sales team object to fetch Stas for @return {GlideRecord} Result of the query @method getPrimaryStasForObject\n     */\n    getPrimaryStasForObject: function(record) {\n        this.logger.debug('getPrimaryStasForObject begin with ' + record.sys_id);\n\n        var result = new GlideRecord(SalesTeamConstants.jfaTableToSTTableMap[record.getTableName()]);\n        result.addQuery('u_active', true);\n        result.addQuery('u_primary_assignment', true);\n        result.addQuery('u_rec_sys_id', record.sys_id);\n        result.query();\n\n        this.logger.debug('getPrimaryStasForObject end with ' + result.getRowCount());\n        return result;\n    },\n\n    /*\n     * Method to get the parent Sta for a given Sta\n     * \n     * @param {GlideRecord} sta - The sta to fetch the parent for @result {GlideRecord} The parent sta @method getParentSta\n     */\n    getParentSta: function(sta) {\n        this.logger.debug('getParentSta begin with ' + sta.sys_id);\n\n        var result = new GlideRecord(sta.u_from_st_table);\n        result.addQuery('sys_id', sta.u_from_sta);\n        result.query();\n\n        this.logger.debug('getParentSta end with ' + result.hasNext());\n        return result;\n    },\n\n    /*\n     * Method to get Stas with the same or associated job functions as a given Sta\n     * \n     * @param {GlideRecord} sta - The sta to fecth related Stas for @result {GlideRecord} Result of the query @method getRelatedStas\n     */\n    getRelatedStas: function(sta) {\n        this.logger.debug('getRelatedStas begin with ' + sta.sys_id);\n\n        var result = new GlideRecord(sta.getTableName());\n        result.addQuery('u_rec_sys_id', sta.u_rec_sys_id);\n        result.addQuery('u_active', true);\n        result.addQuery('sys_id', '!=', sta.sys_id);\n        result.addQuery('u_job_function', 'IN', sta.u_job_function + ',' + sta.u_job_function.u_associated_jf);\n        result.query();\n\n        this.logger.debug('getRelatedStas end with ' + result.getRowCount());\n        return result;\n    },\n    getUsersDirectAssignments: function(table, user, extraCondition) {\n        var gr = new GlideRecord(table);\n        gr.addQuery(\"u_active\", true);\n        gr.addQuery(\"u_direct_assignment\", true);\n        gr.addQuery(\"u_user\", user);\n        gr.addEncodedQuery(extraCondition);\n        gr.query();\n\n        return gr;\n    },\n    getElevatedSta: function(table, extraCondition) {\n        var gr = new GlideRecord(table);\n        gr.addQuery(\"u_active\", true);\n        gr.addQuery(\"u_job_function.u_jf_key\", \"STARTSWITH\", \"elevated\");\n        gr.addEncodedQuery(extraCondition);\n        gr.query();\n\n        return gr;\n    },\n\n    findPrimaryUser: function(sta) {\n        this.logger.debug('findPrimaryUser - start. Checking existing primary for sta ' + sta.sys_id);\n        var priSta = new GlideRecord(sta.getTableName());\n        priSta.addQuery('u_active', true);\n        priSta.addQuery('sys_id', '!=', sta.sys_id);\n        priSta.addQuery('u_rec_sys_id', sta.u_rec_sys_id);\n        priSta.addQuery('u_primary_assignment', true);\n        priSta.addQuery('u_job_function', 'IN', sta.u_job_function.sys_id + ',' + sta.u_job_function.u_associated_jf);\n        priSta.setLimit(1);\n        priSta.query();\n        if (priSta.next()) {\n            this.logger.debug('findPrimaryUser - primary found. STA: ' + priSta.sys_id + ', user: ' + priSta.u_user.name);\n            return priSta.u_user;\n        }\n        this.logger.debug('findPrimaryUser - primary not found');\n        return false;\n    },\n\n    type: 'SalesTeamAccessDAO'\n});\n",
					"file": "/Users/andy.liu/Documents/CRM/SalesTeam/SalesTeamAccessDAO.js",
					"file_size": 59710,
					"file_write_time": 131497980760000000,
					"settings":
					{
						"buffer_size": 59710,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "/**\n * A class for SalesTeam Access service. This class is extending basic service features from\n * \n * @class(SalesTeamServiceBase) This class is used by ACL,UI page to persist and check access records\n * @class - SalesTeamAccessService terms - JF - Job function JFA - Job Function Access\n * \n */\nvar SalesTeamAccessService = Class.create();\nSalesTeamAccessService.prototype = Object.extendsObject(SalesTeamServiceBase, {\n    /**\n     * Description\n     * \n     * @method initialize\n     * @return\n     */\n    initialize: function() {\n        this.logger = SalesTeamLogger.getInstance(\"SalesTeamAccessService\");\n        this.jfDAO = new SalesTeamJobFunctionDAO();\n        this.jfaDAO = new SalesTeamJobFunctionAccessDAO();\n        this.salesTeamUtil = SalesTeamUtil.getInstance();\n        this.levelCounter = 0;\n        this.levelLimit = 5;\n    },\n\n    /*\n     * Cascadingly persist access records from an initial access record (end user creates an initial sta and triggers the BR to call this function) @method persistAccessRecordForAssignment @param\n     * {GlideRecord} sta - the initial access record @param {String} rootSysId - Sys Id of the record that originally triggered this cascading assignment.\n     * \n     * PLease note that the root sys id is only different than sta Id in the case of getting called for a child territory steps: 1. On the initial access record (an end user manual assignment), fill\n     * in the JFA reference if it is empty. 2. Cascadingly persit access records from top-to-bottom and bottom-to-top.\n     */\n    persistAccessRecordForAssignment: function(sta) {\n        this.persistAccessRecordForAssignmentWithDirection(sta, 'both');\n    },\n\n    /*\n     * Cascadingly persist access records from an initial access record (end user creates an initial sta and triggers the BR to call this function) @method persistAccessRecordForAssignment @param\n     * {GlideRecord} sta - the initial access record @param {String} rootSysId - Sys Id of the record that originally triggered this cascading assignment. @param {String} direction - The intended\n     * direction (up/down/both)\n     * \n     * PLease note that the root sys id is only different than sta Id in the case of getting called for a child territory steps: 1. On the initial access record (an end user manual assignment), fill\n     * in the JFA reference if it is empty. 2. Cascadingly persit access records from top-to-bottom and bottom-to-top.\n     */\n    persistAccessRecordForAssignmentWithDirection: function(sta, direction) {\n\n        var staDAO = new SalesTeamAccessDAO(sta.getTableName());\n        var replace = sta.u_primary_assignment; // whether we\n        // need to\n        // specifically\n        // make this a\n        // primary\n        // assignment\n        // and replace\n        // the existing\n        // primary user\n        var replaceUser = (replace) ? staDAO.findPrimaryUser(sta) : '';\n\n        if (replaceUser) {\n            this.logger.debug('persistAccessRecordForAssignmentWithDirection - replace user: ' + replaceUser.name);\n        } else {\n            this.logger.debug('persistAccessRecordForAssignmentWithDirection - replace user not found.');\n        }\n\n        sta = staDAO.updateDirectSTA(sta, replace);\n\n        var user = sta.u_user;\n        var jfa = sta.u_jf_access;\n\n        if (!direction || direction == 'both') {\n            this._persistIndirectAccessRecordsForJFA(user, jfa, sta, 0, '', replaceUser.sys_id);\n        } else {\n            this._persistIndirectAccessRecordsForJFA(user, jfa, sta, 0, direction);\n        }\n    },\n\n    /**\n     * Delete persisted records which are assigned to user for Job function\n     * \n     * @method deleteAccessRecordsForJF\n     * @param {GlideUser}\n     *            user - User record\n     * @param {GlideRecord}\n     *            jf - Job Function GlideRecord\n     * @param {GlideRecord}\n     *            record - Object(Account,Opportunity) Record\n     * @return\n     */\n    deleteAccessRecordsForJF: function(user, jf, record) {\n        this.logger.debug(\" deletePersistedRecordsForJF - start \");\n        if (!user || !jf || !record) {\n            this.logger.debug(\" persistAccessRecordsforJF - end - not valid inputs \");\n            return; /* not valid request */\n        }\n        var jfa = this.jfDAO.getAllAccessOfJF(jf);\n        while (jfa.next()) {\n            if (jf.u_table == \"u_sales_territory\") {\n                this._deleteAccessRecordsForTerritoryJFA(user, record, jfa);\n            } else {\n                this._deleteAccessRecordsForJFA(user, record, jfa);\n            }\n        }\n        this.logger.debug(\" deleteAccessRecordsForJF - end \");\n    },\n\n    /**\n     * create access records for job function access\n     * \n     * @method _persistAccessRecordsForJFA\n     * @param {GlideUser}\n     *            user - User record\n     * @param {GlideRecord}\n     *            record - Object(Account,Opportunity) Record\n     * @param {GlideRecord}\n     *            jfa - Job Function Access record\n     * @return\n     */\n    _deleteAccessRecordsForJFA: function(user, record, jfa) {\n        this.logger.debug(\" _deleteAccessRecordsForJFA - start \");\n        var jfaTable = jfa.u_table,\n            relationType = jfa.u_relation_type,\n            operation = jfa.u_operation,\n            stTable = this.stMapping[jfaTable];\n        this.logger.debug(\" _deleteAccessRecordsForJFA - jfaTable = \" + jfaTable + \" relationType = \" + relationType);\n        var stDao = new SalesTeamAccessDAO(stTable); // create\n        // SalesTeamAccessDAO\n        if (relationType == \"up\") { // bottom to top\n            stDao.deleteParentRecords(user, record, jfa);\n        } else if (relationType == \"down\") { // top to bottom\n            stDao.deleteChildRecords(user, record, jfa);\n        } else { // bottom to up with multi level\n            stDao.deleteAdvancedRecords(user, record, jfa);\n        }\n        this.logger.debug(\" _deleteAccessRecordsForJFA - end \");\n    },\n\n    /*\n     * _persistDirectAccessRecordForJFA: function(user, record, jfa) { this.logger.debug(\" _persistDirectAccessRecordForJFA - start \"); var jfaTable = jfa.u_table, operation = jfa.u_operation, stTable =\n     * SalesTeamConstants.jfaTableToSTTableMap[jfaTable]; this.logger.debug(\" _persistDirectAccessRecordForJFA - jfaTable = \" + jfaTable); var stDao = new SalesTeamAccessDAO(stTable); // create\n     * SalesTeamAccessDAO var directSTA = stDao.persistRecord(user, record, jfa, ''); this.logger.debug(\" _persistDirectAccessRecordForJFA - end, direct STA created: \" + directSTAId); return\n     * directSTA; },\n     */\n\n    /**\n     * ----------Wrapper function since the one below is private -------------- create access records for job function access for indirect levels\n     * \n     * @method persistIndirectAccessRecordsForJFA\n     * @param {GlideUser}\n     *            user - User record\n     * @param {sys_id}\n     *            recordId - the sys_id of the parent record (opty, account, etc)\n     * @param {GlideRecord}\n     *            parentJFA - the direct Job Function Access record\n     * @param {GlideRecord}\n     *            fromSTA - the direct assigned STA record that triggers this indirect cascade assignment\n     * @param {string}\n     *            direction - to indicate whether it looks up from top-to-bottom or bottom-to-top\n     * @param {String}\n     *            rootSysId - Sys Id for the original record that triggered this cascading persist\n     * @param {string}\n     *            recordSysId - when looking for child records to persist, it will only find the specific record with this sys id. Other child records won't be included.\n     * @return\n     */\n    persistIndirectAccessRecordsForJFAWrapper: function(sta, direction, recordSysId) {\n        try {\n            recordSysId = recordSysId || false;\n            this.logger.debug('persistIndirectAccessRecordsForJFAWrapper - start. sta: ' + sta.sys_id + ', direction: ' + direction + ', recordSysId: ' + recordSysId);\n            return this._persistIndirectAccessRecordsForJFA(sta.u_user, sta.u_jf_access, sta, 0, direction, '', recordSysId);\n        } catch (error) {\n            this.logger.debug('persistIndirectAccessRecordsForJFAWrapper - exception happened ' + error);\n        }\n    },\n\n    /**\n     * create access records for job function access for indirect levels\n     * \n     * @method persistIndirectAccessRecordsForJFA\n     * @param {GlideUser}\n     *            user - User record\n     * @param {sys_id}\n     *            recordId - the sys_id of the parent record (opty, account, etc)\n     * @param {GlideRecord}\n     *            parentJFA - the direct Job Function Access record\n     * @param {GlideRecord}\n     *            fromSTA - the direct assigned STA record that triggers this indirect cascade assignment\n     * @param {string}\n     *            direction - to indicate whether it looks up from top-to-bottom or bottom-to-top\n     * @param {String}\n     *            rootSysId - Sys Id for the original record that triggered this cascading persist\n     * @return\n     */\n    _persistIndirectAccessRecordsForJFA: function(user, parentJFA, fromSTA, counter, direction, replaceUserId, recordSysId) {\n        try {\n            this.logger.debug(\" persistIndirectAccessRecordsForJFA - start. From parent JFA \" + parentJFA.u_number + \", parent STTable: \" + fromSTA.getTableName() + \", fromSTA: \" + fromSTA.sys_id + \", user: \" + user.name + \", replace UserID: \" + replaceUserId + \"specific record \" + recordSysId);\n            if (JSUtil.nil(fromSTA) || JSUtil.nil(fromSTA.getTableName())) {\n                this.logger.debug(\"persistIndirectAccessRecordsForJFA - invalid fromSTA: \" + fromSTA.sys_id);\n                return false;\n            }\n            var jfa = this.jfaDAO.getNextJFA(parentJFA, direction);\n            this.logger.debug(\"_persistIndirectAccessRecordsForJFA - counter: \" + counter);\n            if (counter > this.levelLimit) {\n                this.logger.debug(\" _persistIndirectAccessRecordsForJFA - reached level limit. Exiting...\");\n                return;\n            }\n            counter++;\n            while (jfa.next()) {\n                var jfaDirection = jfa.u_relation_type;\n                this.logger.debug(\"_persistIndirectAccessRecordsForJFA - processing JFA \" + jfa.u_number + \", STTable: \" + SalesTeamConstants.jfaTableToSTTableMap[jfa.u_table] + ', JFA direction: ' + jfaDirection);\n                var staDao = new SalesTeamAccessDAO(SalesTeamConstants.jfaTableToSTTableMap[jfa.u_table]);\n\n                var staArr = staDao.persistChildOrParentRecords(user, jfa, fromSTA, replaceUserId, jfaDirection, recordSysId);\n                if (staArr.length == 0) {\n                    continue;\n                }\n                for (var i = 0; i < staArr.length; i++) {\n                    this._persistIndirectAccessRecordsForJFA(user, jfa, staArr[i], counter, direction, replaceUserId, recordSysId);\n                }\n            }\n            this.logger.debug(\" persistIndirectAccessRecordsForJFA - end\");\n        } catch (error) {\n            this.logger.debug('_persistIndirectAccessRecordsForJFA - exception happened ' + error);\n        }\n    },\n\n    /*\n     * Recursively update the primary flag from territory and include all child STAs @method updatePrimaryFromTerritory @param {GlideRecord} fromNewPriSTA - the parent STA record that was set to\n     * primary manually. From that STA we will trigger the downstream update. @param {sys_id} oldUserId - the sys_id of the old primary user that is being replaced @param {integer} counter - a counter\n     * to avoid infinite loops\n     */\n    updatePrimaryFromTerritory: function(fromNewPriSTA, oldUserId, counter) {\n        this.logger.debug(\"updatePrimaryFromTerritory - start. from new primary STA: \" + fromNewPriSTA.sys_id + \", new primary user: \" + fromNewPriSTA.u_user + \", record: \" + fromNewPriSTA.u_rec_sys_id + \", old primary user ID: \" + oldUserId);\n        if (counter > this.levelLimit) {\n            this.logger.debug('updatePrimaryFromTerritory - level limit reached. Exiting...');\n            return false;\n        }\n        counter++;\n        this.updatePrimaryForIndirectSTA(fromNewPriSTA, oldUserId, 0);\n        var staDao = new SalesTeamAccessDAO('u_st_territory');\n        var staIdArr = staDao.setPrimary(fromNewPriSTA, oldUserId);\n        for (var i = 0; i < staIdArr.length; i++) {\n            var sta = staDao.getSTAById(staIdArr[i]);\n            this.updatePrimaryFromTerritory(sta, oldUserId, counter);\n        }\n    },\n\n    /*\n     * Recursively update the primary flag on all other JFA levels. @method updatePrimaryForIndirectSTA @param {GlideRecord} fromNewPriSTA - the parent STA record that was set to primary manually.\n     * From that STA we will trigger the downstream update. @param {sys_id} oldUserId - the sys_id of the old primary user that is being replaced @param {integer} counter - a counter to avoid infinite\n     * loops\n     */\n    updatePrimaryForIndirectSTA: function(fromNewPriSTA, oldUserId, counter) {\n        this.logger.debug(\"updatePrimaryForIndirectSTA - start. from new primary STA: \" + fromNewPriSTA.sys_id + \", new primary user: \" + fromNewPriSTA.u_user + \", record: \" + fromNewPriSTA.u_rec_sys_id + \", old primary user ID: \" + oldUserId);\n        if (counter > this.levelLimit) {\n            this.logger.debug('updatePrimaryForIndirectSTA - level limit reached. Exiting...');\n            return false;\n        }\n        var parentJFA = fromNewPriSTA.u_jf_access;\n        if (!parentJFA) {\n            this.logger.debug(\"updatePrimaryForIndirectSTA - parent JFA missing. Exiting...\");\n            return false;\n        }\n        counter++;\n        var jfa = this.jfaDAO.getNextJFA(parentJFA);\n        while (jfa.next()) {\n            var staDao = new SalesTeamAccessDAO(SalesTeamConstants.jfaTableToSTTableMap[jfa.u_table]);\n            var staIdArr = staDao.setPrimary(fromNewPriSTA, oldUserId);\n            for (var i = 0; i < staIdArr.length; i++) {\n                var sta = staDao.getSTAById(staIdArr[i]);\n                this.updatePrimaryForIndirectSTA(sta, oldUserId, counter);\n            }\n        }\n    },\n\n    /**\n     * create access records for job function access\n     * \n     * @method _persistAccessRecordsForJFA\n     * @param {GlideUser}\n     *            user - User record\n     * @param {GlideRecord}\n     *            record - Object(Account,Opportunity) Record\n     * @param {GlideRecord}\n     *            jfa - Job Function Access record\n     * @return\n     */\n    _persistAccessRecordsForJFA: function(user, record, jfa, fromSTAId, fromSTTable) {\n        this.logger.debug(\" _persistAccessRecordsForJFA - start \");\n        var jfaTable = jfa.u_table,\n            relationType = jfa.u_relation_type,\n            operation = jfa.u_operation,\n            stTable = SalesTeamConstants.jfaTableToSTTableMap[jfaTable];\n        this.logger.debug(\" _persistAccessRecordsForJFA - jfaTable = \" + jfaTable + \" relationType = \" + relationType);\n        var stDao = new SalesTeamAccessDAO(stTable); // create\n        // SalesTeamAccessDAO\n        if (relationType == \"up\") { // bottom to top\n            stDao.persistParentRecords(user, record, jfa, fromSTAId, fromSTTable);\n        } else if (relationType == \"down\") { // top to bottom\n            stDao.persistChildRecords(user, record, jfa, fromSTAId, fromSTTable);\n        } else { // bottom to up with multi level\n            stDao.persistAdvancedRecords(user, record, jfa, fromSTAId, fromSTTable);\n        }\n        this.logger.debug(\" _persistAccessRecordsForJFA - end \");\n\n    },\n    /**\n     * create access records for territory job function access\n     * \n     * @method _persistAccessRecordsForTerritoryJFA\n     * @param {GlideUser}\n     *            user - User record\n     * @param {GlideRecord}\n     *            record - Object(Account,Opportunity) Record\n     * @param {GlideRecord}\n     *            jfa - Job Function Access record\n     * @return\n     */\n    _persistAccessRecordsForTerritoryJFA: function(user, record, jfa, fromSTA) {\n        this.logger.debug(\" _persistAccessRecordsForTerritoryJFA - start \");\n        var jfaTable = jfa.u_table,\n            relationType = jfa.u_relation_type,\n            operation = jfa.u_operation,\n            stTable = this.stMapping[jfaTable];\n        this.logger.debug(\" _persistAccessRecordsForTerritoryJFA - start \" + jfaTable + \" \" + relationType + \" \" + stTable);\n        var stDao = new SalesTeamAccessDAO(stTable); // create\n        // SalesTeamAccessDAO\n\n        stDao.persistTerritoryHierarchyRecords(user, record, jfa);\n        this.logger.debug(\" _persistAccessRecordsForTerritoryJFA - end \");\n    },\n    /**\n     * create access records for territory job function access\n     * \n     * @method _persistAccessRecordsForTerritoryJFA\n     * @param {GlideUser}\n     *            user - User record\n     * @param {GlideRecord}\n     *            record - Object(Account,Opportunity) Record\n     * @param {GlideRecord}\n     *            jfa - Job Function Access record\n     * @return\n     */\n    _deleteAccessRecordsForTerritoryJFA: function(user, record, jfa) {\n        this.logger.debug(\" _persistAccessRecordsForTerritoryJFA - start \");\n        var jfaTable = jfa.u_table,\n            relationType = jfa.u_relation_type,\n            operation = jfa.u_operation,\n            stTable = this.stMapping[jfaTable];\n        this.logger.debug(\" _deleteAccessRecordsForTerritoryJFA - start \" + jfaTable + \" \" + relationType + \" \" + stTable);\n        var stDao = new SalesTeamAccessDAO(stTable); // create\n        // SalesTeamAccessDAO\n\n        stDao.deleteTerritoryHierarchyRecords(user, record, jfa);\n        this.logger.debug(\" _deleteAccessRecordsForTerritoryJFA - end \");\n    },\n\n    /**\n     * As a normal scenario Sales Team access records are persisted when user is assigned to job function but if new record is inserted after job function assignment, access records are not persisted.\n     * This function is to persist access records which are inserted after assignment steps - 1. Find table type of record 2. Search table name in job function access where type is - Access Table 2.1.\n     * Find Parent job function access 2.2. Find ST records for parent job function 2.3. Persist Indirect access records for JFA\n     * \n     * @method persistAccessRecordsforInsert\n     * @param {GlideRecord}\n     *            record - current record from business rule\n     * @return\n     */\n    persistAccessRecordsforInsert: function(record) {\n        this.logger.debug(\" persistAccessRecordsforInsert - start \");\n        if (!record) {\n            this.logger.debug(\" persistAccessRecordsforInsert - end - not valid inputs \");\n            return; /* not valid request */\n        }\n        var tableName = record.getTableName(); // step 1\n        this.logger.debug(\" persistAccessRecordsforInsert - tableName : \" + tableName);\n        var jfa = this.jfaDAO.getAllJobFunctionAccessByTable(tableName); // step\n        // 2\n        var stDao = new SalesTeamAccessDAO(SalesTeamConstants.jfaTableToSTTableMap[tableName]);\n\n        this.logger.debug(\" persistAccessRecordsforInsert - JFA count : \" + jfa.getRowCount());\n\n        while (jfa.next()) {\n            var relatedField = jfa.u_related_field + \"\";\n            var parentRecordSysId = record[relatedField];\n            var parentJFA = this.jfaDAO.getParentJFA(jfa, \"down\"); // step 2.1\n            if (!parentJFA) {\n                continue;\n            }\n            this.logger.debug(\" persistAccessRecordsforInsert - parentJFA : \" + parentJFA.u_table + \" for JFA : \" + jfa + \" parentRecordSysId :\" + parentRecordSysId);\n            var parentSTRecords = stDao.getRecordsByJFA(parentJFA, parentRecordSysId); // step 2.2\n            this.logger.debug(\" persistAccessRecordsforInsert - parentSTRecords count : \" + parentSTRecords.getRowCount());\n\n            while (parentSTRecords.next()) {\n                this.logger.debug(\" persistAccessRecordsforInsert - _persistIndirectAccessRecordsForJFA before : \" + parentSTRecords.sys_id + \"  \" + parentSTRecords.u_user);\n                stDao.persistRecord(parentSTRecords.u_user.sys_id, record, jfa, parentSTRecords);\n            }\n        }\n\n        this.logger.debug(\" persistAccessRecordsforInsert - end \");\n    },\n\n    /*\n     * Revoke a user job function assignment on a record @method revokeAssignmentForUser @param {GlideRecord} sta - the direct access record that is being removed\n     */\n    revokeAssignmentForUser: function(sta) {\n        this.logger.debug('revokeAssignmentForUser begin for ' + sta.sys_id);\n        this._revokeAssignmentForUserWithDirection(sta, 'both');\n        this.logger.debug('revokeAssignmentForUser end');\n    },\n\n    /*\n     * Method to revoke a user's access assignment for a record and children\n     * \n     * @method revokeDown @param {GlideRecord{u_security_job_function_access}} sta - The access record to revoke @return nil\n     */\n    revokeDown: function(sta) {\n        this.logger.debug('revokeDown begin for ' + sta.sys_id);\n        this._revokeAssignmentForUserWithDirection(sta, 'down');\n        this.logger.debug('revokeDown end');\n    },\n\n    /*\n     * Method to revoke a user's access assignment for a record and parents\n     * \n     * @method revokeUp @param {GlideRecord{u_security_job_function_access}} sta - The access record to revoke @return nil\n     */\n    revokeUp: function(sta) {\n        this.logger.debug('revokeUp begin for ' + sta.sys_id);\n        this._revokeAssignmentForUserWithDirection(sta, 'up');\n        this.logger.debug('revokeDUp end');\n    },\n\n    _revokeAssignmentForUserWithDirection: function(sta, direction) {\n        this.logger.debug(\" revokeAssignmentForUser - start\");\n\n        var jfa = sta.u_jf_access;\n\n        var staDAO = new SalesTeamAccessDAO(sta.getTableName());\n        staDAO.deactivateRecord(sta);\n\n        if (direction == 'both' || direction == 'down') {\n            this.levelCounter = 0; // reset level counter;\n            this._removeSTAForOtherLevels(jfa, [sta], 'down');\n        }\n        if (direction == 'both' || direction == 'up') {\n            this.levelCounter = 0; // reset level counter;\n            this._removeSTAForOtherLevels(jfa, [sta], 'up');\n        }\n        this.logger.debug(\" revokeAssignmentForUser - end\");\n    },\n\n    /**\n     * A recusive function to find STA records for all child / parent level records and remove / deactivate them\n     * \n     * @method _removeSTAForOtherLevels\n     * @param {GlideRecord}\n     *            parentJFA - the initial jfa that we use to find other level JFAs\n     * @param {GlideRecord}\n     *            staArr - the STA array that are used as referenced in the upper / lower level ST tables\n     * @param {string}\n     *            direction - indicate whether we need to look bottom-to-up or top-to-bottom\n     */\n    _removeSTAForOtherLevels: function(parentJFA, staArr, direction) {\n        this.logger.debug(\" _removeSTAForOtherLevels - start. parentJFA: \" + parentJFA.u_number + \", direction: \" + direction);\n        if (staArr.length < 1) {\n            this.logger.debug(\" _removeSTAForOtherLevels - no child STA found. Exiting...\");\n            return;\n        }\n        var nextJFA = this.jfaDAO.getNextJFA(parentJFA, direction);\n        while (nextJFA.next()) {\n            this.logger.debug(\" _removeSTAForOtherLevels - processing JFA: \" + nextJFA.u_number);\n            this.levelCounter++;\n            var stTable = SalesTeamConstants.jfaTableToSTTableMap[nextJFA.u_table];\n            this.logger.debug(\" _removeSTAForOtherLevels - next ST table: \" + stTable);\n            var childSTAArr = [];\n            for (var i = 0; i < staArr.length; i++) {\n                var staDAO = new SalesTeamAccessDAO(stTable);\n                var childSTA = staDAO.getChildSTAs(staArr[i], stTable);\n                while (childSTA.next()) {\n                    this.logger.debug(\" _removeSTAForOtherLevels - processing childSTA: \" + childSTA.sys_id);\n\n                    var staObj = this.salesTeamUtil.buildJsonFromGlide(childSTA);\n                    childSTAArr.push(staObj);\n                    staDAO.deactivateRecord(childSTA);\n                }\n            }\n            if (this.levelCounter >= this.levelLimit) {\n                this.logger.debug(\" _removeSTAForOtherLevels - reached level limit. Exiting...\");\n                return;\n            }\n            this._removeSTAForOtherLevels(nextJFA, childSTAArr, direction);\n        }\n    },\n\n    /*\n     * Check if the user has access in Sales Team for the specific record with given Job Function @method checkSalesTeamAccessByJF @param {GlideRecord} record - the record being checked @param\n     * {string} userSysId - Sys Id of the User @param {string} operation - operation to be performed on record @param {string} jfSysId - the sys_id of the Job Function @return {boolean}\n     */\n    checkSalesTeamAccessByJF: function(record, userSysId, operation, jfSysId) {\n        var jf = new GlideRecord('u_security_job_function');\n        jf.get(jfSysId);\n        if (jf.isValidRecord()) {\n            var jfa = this.jfaDAO.getAllJFAByJF(jf, record.getTableName(), operation);\n            if (jfa && jfa.next()) {\n                var user = new GlideRecord('sys_user');\n                user.get(userSysId);\n                if (user.isValidRecord()) {\n                    var stTable = SalesTeamConstants.jfaTableToSTTableMap[jfa.u_table];\n                    var stDao = new SalesTeamAccessDAO(stTable); // create\n                    // SalesTeamAccessDAO\n                    var accessRec = stDao.getSTAByUserAndJFA(record, jfa, user);\n                    if (accessRec && accessRec.next()) {\n                        this.logger.debug(\" checkSalesTeamAccessByJF - ST: \" + accessRec.u_number);\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    },\n\n    /*\n     * Check if the user has access in Sales Team for the specific record with given ACL @method checkSalesTeamAccessByACL @param {GlideRecord} record - the record being checked @param {string}\n     * userSysId - Sys Id of the User @param {string} operation - operation to be performed on record @param {string} aclSysId - the sys_id of the ACL @return {boolean}\n     */\n    checkSalesTeamAccessByACL: function(record, userSysId, operation, aclSysId) {\n        var jfa = this.jfaDAO.getAllJFAByACL(aclSysId, record.getTableName(), operation);\n        if (jfa && jfa.next()) {\n            var user = new GlideRecord('sys_user');\n            user.get(userSysId);\n            if (user.isValidRecord()) {\n                var stTable = SalesTeamConstants.jfaTableToSTTableMap[jfa.u_table];\n                var stDao = new SalesTeamAccessDAO(stTable); // create\n                // SalesTeamAccessDAO\n                var accessRec = stDao.getSTAByUserAndJFA(record, jfa, user);\n                if (accessRec && accessRec.next()) {\n                    this.logger.debug(\" checkSalesTeamAccessByACL - ST: \" + accessRec.u_number);\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    },\n\n    /*\n     * update a reference field on a record, such as updating the territory field on account @method updateReference @param {GlideRecord} record - the record being updated @param {refField} refField -\n     * the reference field being updated @param {string} oldValue - the sys_id of the old referenced record (could be empty string) @param {string} newValue - the sys_id of the new referenced record\n     * (could be empty string)\n     */\n    updateReference: function(record, refField, newValue) {\n        var jfa = this.jfaDAO.getJFAsByRef(record, refField);\n        while (jfa.next()) {\n            staDAO.deleteSTAsByJFA(record, jfa);\n        }\n        this.persistAccessRecordsforInsert(record, newValue);\n\n    },\n\n    _findJFAssignedUser: function(record, jf) {\n\n    },\n\n    /*\n     * Cascadingly update sta records. @method updateSTAFromRoot @param {GlideRecord} rootSTA @param {Array} fields - an array of fields that need to be updated from the root STA\n     */\n    updateSTAFromRoot: function(rootSTA, fields) {\n        this.logger.debug(' updateSTAFromRoot - start. rootSTA: ' + rootSTA.sys_id + ', fields: ' + fields.toString());\n        if (fields == null) {\n            this.logger.debug(' updateSTAFromRoot - no field to update. Exiting...');\n            return;\n        }\n        var allJfas = this.jfaDAO.getAllJFAByJF(rootSTA.u_job_function);\n        while (allJfas.next()) {\n            var staDAO = new SalesTeamAccessDAO(SalesTeamConstants.jfaTableToSTTableMap[allJfas.u_table]);\n            staDAO.updateSTAsFromRootSTA(rootSTA, fields);\n        }\n        this.logger.debug(' updateSTAFromRoot - complete');\n    },\n\n    /*\n     * Cascadingly delete sta records. Only allow to delete future assignment\n     */\n    deleteAssignment: function(rootSTA) {\n        this.logger.debug(' deleteAssignment - start. rootSTA: ' + rootSTA.sys_id);\n        if (rootSTA.u_rec_sys_id.getRefRecord().isValidRecord() && (rootSTA.u_active || new GlideDateTime(rootSTA.u_start_date).compareTo(new GlideDateTime(gs.now())) != 1)) {\n            this.logger.debug(' deleteAssignment - only future assignment is allowed to be deleted. Abort this deletion');\n            return false;\n        }\n        var allJfas = this.jfaDAO.getAllJFAByJF(rootSTA.u_job_function);\n        while (allJfas.next()) {\n            var staDAO = new SalesTeamAccessDAO(SalesTeamConstants.jfaTableToSTTableMap[allJfas.u_table]);\n            staDAO.deleteSTAsFromRootSTA(rootSTA);\n        }\n        rootSTA.deleteRecord();\n        this.logger.debug(' deleteAssignment - complete');\n    },\n\n    checkAssignmentConflicts: function(sta) {\n        this.logger.debug(' checkAssignmentConflicts - start. STA: ' + sta.sys_id);\n        var result = {\n            overlap: true,\n            overlapTrty: []\n        };\n        if (sta.getTableName() != 'u_st_territory') {\n            this.logger.debug(' checkAssignmentConflicts - no need to check conflicts for non-territory assignment');\n            result.overlap = false;\n            return result;\n        }\n        var staDao = new SalesTeamAccessDAO('u_st_territory');\n        var exSTA = staDao.getExSTA(sta, sta.u_rec_sys_id.sys_id, 'any');\n        while (exSTA.next()) {\n            if (this.salesTeamUtil.isDateOverlap(sta, exSTA)) {\n                this.logger.debug(' checkAssignmentConflicts - overlap found.');\n                result.overlap = true;\n                result.overlapTrty.push(exSTA.u_rec_sys_id.u_name);\n            }\n        }\n\n        if (sta.u_rec_sys_id.u_type == 'Country') {\n            this.logger.debug(' checkAssignmentConflicts - no need to check child territories because this is the lowest territory level');\n            return true;\n        }\n        var trtyMap = this.salesTeamUtil.getTerritoryMap();\n        var childTrtyArr = trtyMap[sta.u_rec_sys_id];\n        this.logger.debug(' checkAssignmentConflicts - result: ' + childTrtyArr);\n        for (var i = 0; i < childTrtyArr.length; i++) {\n            var childExSTA = staDao.getExSTA(sta, childTrtyArr[i], 'direct');\n            while (childExSTA.next()) {\n                if (this.salesTeamUtil.isDateOverlap(sta, childExSTA)) {\n                    this.logger.debug(' checkAssignmentConflicts - overlap found.');\n                    return false;\n                }\n            }\n        }\n    },\n\n    removeExPrimary: function(sta) {\n        this.logger.debug('removeExPrimary - removing other existing primary from sta ' + sta.sys_id);\n        var staDao = new SalesTeamAccessDAO();\n        var exPrimarySTA = staDao.getPrimarySTA(sta);\n        if (exPrimarySTA) {\n            exPrimarySTA.u_primary_assignment = false;\n            exPrimarySTA.update();\n            this.logger.debug('removeExPrimary - remove previous primary: ' + exPrimarySTA.sys_id);\n            return exPrimarySTA;\n        } else {\n            return false;\n        }\n    },\n\n    updateSplitOptySta: function(opty) {\n\n        this.logger.debug('updateSplitOptySta - start. Opty: ' + opty.number);\n        if (opty.getTableName() == 'sales_opportunity' && opty.type == 'split_adjuster' && opty.u_usd_net_new_acv >= 0) {\n            this.logger.debug('start on opty: ' + opty.number);\n\n            this._deleteStaForSplitOpty(opty);\n            this._assignStaForSplitOpty(opty);\n\n            this.refreshSalesTeamUserList(opty);\n\n            /*\n             * var parentOwnerRole = SSASplitAdjustorUtil._getDefaultCommOwner(opty.u_parent).role; log.debug('owner role: ' + parentOwnerRole); var jfKey = (parentOwnerRole == 'owner') ?\n             * 'sales_rep_opportunity' : 'msp_rep_opportunity'; var service = new SalesTeamJFService(); service.deleteIndirectAssignmentForJF(jfKey, opty);\n             */\n            this.logger.debug('updateSplitOptySta - complete.');\n        }\n    },\n\n    /*\n     * On a split opty, delete all sales team records that are from the its account territory\n     */\n    _deleteStaForSplitOpty: function(opty) {\n        this.logger.debug('deleteStaForSplitOpty - start on opty: ' + opty.number);\n        var trtyStaStr = '';\n        var acctTrty = opty.account.u_account_territory.getRefRecord();\n        if (!acctTrty.isValidRecord()) {\n            this.logger.debug('deleteStaForSplitOpty - invalid territory on account');\n            return false;\n        }\n        // var trtySta = staDao.getStaOnRecord(acctTrty);\n\n        // while (trtySta.next()) {\n        // trtyStaStr += ',' + trtySta.getValue('sys_id');\n        // }\n        // this.logger.debug('deleteStaForSplitOpty - territory\n        // STA string: ' + trtyStaStr);\n\n        var staDao = new SalesTeamAccessDAO();\n        var sta = staDao.getIndirectStaOnRecord(opty);\n        session.putClientData('skip_delete_sta_business_rule', 'true');\n        while (sta.next()) {\n            if (this._isDeleteStaForSplitOpty(sta, acctTrty)) {\n                this.logger.debug('deleteStaForSplitOpty - deleting ' + sta.sys_id);\n                // this.salesTeamUtil.updateSalesTeamUserList(sta.u_user.sys_id,\n                // sta.u_rec_sys_id.getRefRecord(), 'delete');\n                var result = sta.deleteRecord();\n            }\n        }\n        session.putClientData('skip_delete_sta_business_rule', '');\n        this.logger.debug('deleteStaForSplitOpty - complete on opty: ' + opty.number);\n    },\n\n    _isDeleteStaForSplitOpty: function(sta, acctTrty) {\n        var upwardTrtyHierarchy = SalesTerritoryUtils.getUpwardTerritoryHierarchy(acctTrty);\n        this.logger.debug('_isDeleteStaForSplitOpty - checking sta: ' + sta.sys_id + ', delete from territory: ' + acctTrty.sys_id + ', upward territory hierarchy: ' + upwardTrtyHierarchy);\n        if (upwardTrtyHierarchy.indexOf(sta.u_territory + '') > -1) {\n            this.logger.debug('_deleteStaForSplitOpty - deleting sta.');\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    /*\n     * On a split opty (the positive one), assign direct sta from its field territory / msp territory\n     */\n    _assignStaForSplitOpty: function(opty) {\n        this.logger.debug('assignStaForSplitOpty - start with opty ' + opty.number);\n        var newTrty = (opty.owner && opty.u_territory) ? opty.u_territory.getRefRecord() : opty.u_msp_territory.getRefRecord();\n        if (!newTrty.isValidRecord()) {\n            this.logger.debug('assignStaFromTrtyToOpty - Invalid territory. Exiting...');\n            return false;\n        }\n        this.addOrRemoveStaFromTrtyToOpty(opty, newTrty.sys_id, 'assign');\n        this.logger.debug('assignStaForSplitOpty - complete with opty ' + opty.number);\n    },\n\n    /*\n     * Update SalesTeam User list on an opportunity\n     */\n    refreshSalesTeamUserList: function(opty) {\n        this.logger.debug('updateSalesTeamUserList - start on opty ' + opty.number);\n\n        var userList = '';\n        var staDao = new SalesTeamAccessDAO();\n        var sta = staDao.getMySalesTeamActiveStaOnRecord(opty);\n        while (sta.next()) {\n            if (userList) {\n                userList += ',' + sta.u_user.sys_id;\n            } else {\n                userList = sta.u_user.sys_id + '';\n            }\n        }\n        opty.u_salesteam_users = userList;\n        opty.setWorkflow(false);\n        opty.update();\n        this.logger.debug('updateSalesTeamUserList - complete. Opty: ' + opty.number + ', user list: ' + userList);\n    },\n\n    /*\n     * Check sales team update on change of territory fields on opportunity @method checkSalesTeamOnTrtyUpdate @param {GlideRecord} opty - opportunity glide record @param {string} trtyField - which\n     * territory field was updated. \"u_territory\" or \"u_msp_territory\". @param {string} newTrtyId - the sys id of the new territory. Pass empty string or false if no pulling is needed from the new\n     * territory. @param {string} oldTrtyId - the sys id of the old territory. Pass empty string or false if no revoking is needed from the old territory.\n     */\n    checkSalesTeamOnTrtyUpdate: function(opty, trtyField, newTrtyId, oldTrtyId) {\n        this.logger.debug('checkSalesTeamOnTrtyUpdate - start. Opty: ' + opty.number + ', territory field: ' + trtyField + ', old trty: ' + oldTrtyId + ', new trty: ' + newTrtyId);\n        if (!opty || !trtyField) {\n            this.logger.debug('checkSalesTeamOnTrtyUpdate - missing info. Exiting.');\n            return false;\n        }\n        var acctTrtyId = opty.account.u_account_territory.sys_id;\n        var endCustomerTrtyId = '';\n        var mspPartnerTrtyId = '';\n        var revoke = false;\n        var assign = false;\n        if (trtyField == 'u_territory') {\n            this.logger.debug('checkSalesTeamOnTrtyUpdate - Field Territory updated');\n            if (opty.u_end_customer) {\n                endCustomerTrtyId = opty.u_end_customer.u_account_territory.sys_id;\n            }\n            if (oldTrtyId && oldTrtyId != acctTrtyId && oldTrtyId != endCustomerTrtyId) {\n                gs.eventQueue(\"salesteam.opty.territory.update\", opty, oldTrtyId, 'revoke');\n                revoke = true;\n            }\n            if (newTrtyId && newTrtyId != acctTrtyId && newTrtyId != endCustomerTrtyId) {\n                gs.eventQueue(\"salesteam.opty.territory.update\", opty, newTrtyId, 'assign');\n                assign = true;\n            }\n\n        } else if (trtyField == 'u_msp_territory') {\n            if (opty.u_msp) {\n                mspPartnerTrtyId = opty.u_msp.u_account_territory.sys_id;\n            }\n            if (oldTrtyId && oldTrtyId != acctTrtyId && oldTrtyId != mspPartnerTrtyId) {\n                gs.eventQueue(\"salesteam.opty.territory.update\", opty, oldTrtyId, 'revoke');\n                revoke = true;\n            }\n            if (newTrtyId && newTrtyId != acctTrtyId && newTrtyId != mspPartnerTrtyId) {\n                gs.eventQueue(\"salesteam.opty.territory.update\", opty, newTrtyId, 'assign');\n                assign = true;\n            }\n        } else {\n            this.logger.debug('checkSalesTeamOnTrtyUpdate - Invalid territory field. Exiting.');\n            return false;\n        }\n        if (revoke) {\n            this.logger.debug('checkSalesTeamOnTrtyUpdate - revoke event fired on opty ' + opty.number + ' from territory ' + oldTrtyId);\n        }\n        if (assign) {\n            this.logger.debug('checkSalesTeamOnTrtyUpdate - assign event fired on opty ' + opty.number + ' from territory ' + newTrtyId);\n        }\n        this.logger.debug('checkSalesTeamOnTrtyUpdate - complete.');\n    },\n    getUsersAssignedBUs: function(table, user) {\n        var b_units = [];\n        var staDao = new SalesTeamAccessDAO();\n        var bu_gr = staDao.getUsersDirectAssignments(table, user, \"u_job_function.u_business_unitISNOTEMPTY\");\n        while (bu_gr.next()) {\n            var bu = bu_gr.u_job_function.u_business_unit + \"\";\n            if (b_units.indexOf(bu) == -1)\n                b_units.push(bu);\n        }\n        return b_units;\n    },\n\n    getUsersElevatedTerritories: function(user) {\n        var territories = {};\n        var staDao = new SalesTeamAccessDAO();\n        var sta = staDao.getUsersDirectAssignments(\"u_st_territory\", user, \"u_job_function.u_jf_keySTARTSWITHelevated\");\n        while (sta.next()) {\n            var territory = sta.u_rec_sys_id;\n            if (!territories[territory.u_type + \"\"]) {\n                territories[territory.u_type + \"\"] = [sta.u_rec_sys_id + \"\"];\n            } else {\n                territories[territory.u_type + \"\"].push(sta.u_rec_sys_id + \"\");\n            }\n        }\n        return territories;\n    },\n\n    getUsersElevatedTerritoriesByJf: function(user) {\n        var territories = {};\n        var staDao = new SalesTeamAccessDAO();\n        var sta = staDao.getUsersDirectAssignments(\"u_st_territory\", user, \"u_job_function.u_jf_keySTARTSWITHelevated\");\n        while (sta.next()) {\n            var trty = sta.u_rec_sys_id + '';\n            var trtyType = sta.u_rec_sys_id.u_type + '';\n            var jfId = sta.u_job_function + '';\n\n            if (!territories[jfId]) {\n                territories[jfId] = {};\n                territories[jfId][trtyType] = [trty];\n            } else if (!territories[jfId][trtyType]) {\n                territories[jfId][trtyType] = [trty];\n            } else {\n                territories[jfId][trtyType].push(trty);\n            }\n        }\n        // gs.log(JSON.stringify(territories), 'andy');\n        return territories;\n    },\n\n    getUserDirectTerritory: function(userSysId, territoryType) {\n        // var s_territories = GlideSession.get().getClientData(\"st_my_country_territories_\" + territoryType);\n        var s_territories = SalesTeamCache.getSessionData(\"st_my_country_territories_\" + territoryType);\n        // gs.info(\"STADE 1 - \"+s_territories + ' Type : ' + territoryType,\"ADE1\");\n\n        if (s_territories) {\n            var territoriesArr = [];\n            var temp = s_territories.split(\",\"); // array created by split function is not working, create fresh array\n            if (temp[0] == 'BLANK') {\n                // gs.info(\"STADE 2 - \"+s_territories + ' Type : ' + territoryType,\"ADE1\");\n                return ['BLANK'];\n            }\n            for (var i = 0; i < temp.length; i++) {\n                territoriesArr.push(temp[i] + \"\");\n            }\n            return territoriesArr;\n        } else {\n            // gs.info(\"STADE 1 - get territories from DB. \"+s_territories + ' Type . ' + territoryType,\"ADE1\");\n            var territories = [];\n            var staDao = new SalesTeamAccessDAO();\n            var sta;\n            if (territoryType) {\n                sta = staDao.getUsersDirectAssignments(\"u_st_territory\", userSysId, \"u_rec_sys_id.u_type=\" + territoryType);\n            } else {\n                sta = staDao.getUsersDirectAssignments(\"u_st_territory\", userSysId, \"\");\n            }\n            while (sta.next()) {\n                territories.push(sta.u_rec_sys_id + \"\");\n            }\n\n            if (territories.length == 0) {\n                territories[0] = 'BLANK';\n                GlideSession.get().putClientData(\"st_my_country_territories_\" + territoryType, 'BLANK');\n            }\n            GlideSession.get().putClientData(\"st_my_country_territories_\" + territoryType, territories.join());\n            return territories;\n        }\n    },\n\n    /*\n     * Do speical assignment from a territory to a opportunity @method assignStaTrtyToOpty @param {GlideRecord} opty - opportunity object @param {string} trtyId - the sys_id of the territory @param\n     * {string} action - assign or revoke\n     */\n    addOrRemoveStaFromTrtyToOpty: function(opty, trtyId, action) {\n        this.logger.debug('addOrRemoveStaFromTrtyToOpty - start with opty: ' + opty.number + ', territory id :' + trtyId + ', action ' + action);\n\n        if (!opty || !trtyId || !action || (action != 'assign' && action != 'revoke')) {\n            this.logger.debug('addOrRemoveStaFromTrtyToOpty - missing info. Exiting.' + opty.number);\n            return false;\n        }\n\n        var trty = new GlideRecord('u_sales_territory');\n        trty.get(trtyId);\n        if (!trty.isValidRecord()) {\n            this.logger.debug('Invalid terrtiroy: ' + trtyId + '. Exiting.');\n            return false;\n        }\n\n        var count = 0;\n        var staDao = new SalesTeamAccessDAO();\n        var trtySta = staDao.getStaOnRecord(trty);\n        this.logger.debug('assignStaFromTrtyToOpty - number of sta to pull: ' + trtySta.getRowCount() + ' from territory: ' + trty.u_name);\n        var staDao2 = new SalesTeamAccessDAO('u_st_opportunity');\n\n        var isSplit = (opty.type == 'split_adjuster');\n        this.logger.debug('addOrRemoveStaFromTrtyToOpty - is split opty? ' + isSplit);\n        var jf;\n        if (!isSplit) {\n            jf = this.jfDAO.getJFByKey('opportunity_read');\n        }\n        var jfa;\n        if (action == 'assign') {\n            while (trtySta.next()) {\n                if (trtySta.u_job_function.u_jf_key == 'bi_reporting') {\n                    continue;\n                }\n                if (isSplit) {\n                    jf = this.jfDAO.getJfOnTable(trtySta.u_job_function.getRefRecord(), 'sales_opportunity', 'opportunity_read');\n                }\n                if (!jf) {\n                    this.logger.debug('assignStaFromTrtyToOpty - No job function is available for sta ' + trtySta.sys_id);\n                    continue;\n                }\n                jfa = this.jfDAO.getDirectJFAOfJF(jf);\n                if (!jfa) {\n                    this.logger.debug('assignStaFromTrtyToOpty - No JFA is available for JF ' + jf.sys_id);\n                    continue;\n                }\n                var sta;\n                if (isSplit) {\n                    sta = staDao2.persistRecord(trtySta.u_user.sys_id, opty, jfa, trtySta);\n                } else {\n                    sta = staDao2.persistRecord(trtySta.u_user.sys_id, opty, jfa, trtySta, true);\n                }\n                this.logger.debug('assignStaTrtyToOpty - inserted sta: ' + sta);\n\n                if (sta) {\n                    count++;\n                }\n                this.logger.debug('assignStaFromTrtyToOpty - inserted sta: ' + sta.sys_id);\n            }\n\n        } else if (action == 'revoke') {\n            var oldTrtyStaIds = this._getStaIdsOnObject(trty);\n\n            if (oldTrtyStaIds.length > 0) {\n                this._revokeOnRecordByFromStaIds(opty, oldTrtyStaIds);\n            } else {\n                this.logger.debug('updateStaFromFieldTrty - no STA needs to be revoke from territory ' + oldTrtySysId);\n            }\n\n            this.assignStaTrtyToOpty(opty);\n        }\n        this.logger.debug('assignStaFromTrtyToOpty - complete. Number of direct STA created: ' + count);\n        return true;\n    },\n\n    _getStaIdsOnObject: function(record) {\n        this.logger.debug('_getStaIdsOnObject - starts on record: ' + record.sys_id);\n        var staIds = [];\n        var staDao = new SalesTeamAccessDAO();\n        var sta = staDao.getStaOnRecord(record);\n        while (sta.next()) {\n            staIds.push(sta.sys_id + '');\n        }\n        this.logger.debug('_getStaIdsOnObject - staIDs: ' + staIds.join());\n        return staIds.join(\",\");\n    },\n\n    _revokeOnRecordByFromStaIds: function(record, fromStaIds) {\n        this.logger.debug('_revokeOnRecordByFromStaIds - start. fromStaIds: ' + fromStaIds);\n        var count = 0;\n        var revokeHelper = new SalesTeamRevokeDirectAssignmentAccess();\n        var staDao = new SalesTeamAccessDAO();\n        var sta = staDao.getDirectSTAs(record, '');\n        this.logger.debug('_revokeOnRecordByFromStaIds - number of sta to check: ' + sta.getRowCount());\n        var fromStaId = '';\n        while (sta.next()) {\n            fromStaId = sta.u_from_sta + '';\n            this.logger.debug('_revokeOnRecordByFromStaIds - checking ' + sta.sys_id + ' with from STA ' + sta.u_from_sta);\n            if (fromStaIds.indexOf(fromStaId) != -1) {\n                this.logger.debug('_revokeOnRecordByFromStaIds. Revoking ' + sta.sys_id);\n                count++;\n                revokeHelper.execute(sta);\n            }\n        }\n        this.logger.debug('_revokeOnRecordByFromStaIds - complete. Direct assignment revoked: ' + count);\n    },\n\n    /*\n     * From an object record, find all direct assignments and clone them to another object record\n     */\n    cloneDirectAssignment: function(fromRecord, toRecord, keepPrimaryFlagAsIs) {\n        this.logger.debug('cloneDirectAssignment - start. from record: ' + fromRecord.sys_id + ' to record: ' + toRecord.sys_id);\n        var staDao = new SalesTeamAccessDAO(SalesTeamConstants.jfaTableToSTTableMap[toRecord.getTableName()]);\n        var sta = staDao.getDirectSTAs(fromRecord);\n        while (sta.next()) {\n            if (keepPrimaryFlagAsIs) {\n                var isPrimary = sta.u_primary_assignment + '';\n                var newSta = staDao.persistRecord(sta.u_user.sys_id, toRecord, sta.u_jf_access, '', '', '', isPrimary);\n            } else {\n                var newSta = staDao.persistRecord(sta.u_user.sys_id, toRecord, sta.u_jf_access);\n            }\n            this.logger.debug('cloneDirectAssignment - cloned STA: ' + newSta.sys_id);\n        }\n        this.logger.debug('cloneDirectAssignment - complete.');\n    },\n\n    autoAssign: function(sta) {\n        var autoAssignedJfList = sta.u_job_function.u_auto_assigned_job_functions;\n        autoAssignedJfList = autoAssignedJfList.split(\",\");\n        for (var i = 0; i < autoAssignedJfList.length; i++) {\n            var gr = new GlideRecord(sta.getTableName());\n            gr.u_job_function = autoAssignedJfList[i];\n            gr.u_user = sta.u_user;\n            gr.u_start_date = sta.u_start_date;\n            gr.u_end_date = sta.u_end_date;\n            gr.u_comp = sta.u_comp;\n            gr.u_rec_sys_id = sta.u_rec_sys_id;\n            gr.u_direct_assignment = true;\n            gr.insert();\n        }\n    },\n\n    updateUserField: function(record, userField, sta) {\n        this.logger.debug('updateUserField - start on record ' + record.sys_id + ', user field: ' + userField + ', sta: ' + sta.sys_id);\n        if (!record || !record.isValidRecord() || !userField) {\n            this.logger.debug('updateUserField - invalid input.');\n            return false;\n        }\n        var update = false;\n        if (sta && sta.u_user) {\n            if (record[userField] != sta.u_user + '') {\n                record[userField] = sta.u_user + '';\n                update = true;\n            }\n        } else if (record[userField]) {\n            record[userField] = '';\n            update = true;\n        }\n\n        var result = false;\n        if (update) {\n            result = record.update();\n        }\n        this.logger.debug('updateUserField complete - ' + result);\n        return result;\n    },\n    getUserTerritoriesByType: function(userSysId) {\n        var territories = [];\n        var sta = new GlideRecord('u_st_territory');\n        sta.addQuery('u_active', true);\n        sta.addQuery('u_direct_assignment', true);\n        sta.addQuery('u_user', userSysId);\n        sta.query();\n        while (sta.next()) {\n            if (!territories[sta.u_rec_sys_id.u_type + \"\"]) {\n                territories[sta.u_rec_sys_id.u_type + \"\"] = [sta.u_rec_sys_id + \"\"];\n            } else {\n                territories[sta.u_rec_sys_id.u_type + \"\"].push(sta.u_rec_sys_id + \"\");\n            }\n        }\n        return territories;\n    },\n\n    type: 'SalesTeamAccessService'\n});\n",
					"file": "/Users/andy.liu/Documents/CRM/SalesTeam/SalesTeamAccessService.js",
					"file_size": 51521,
					"file_write_time": 131497980760000000,
					"settings":
					{
						"buffer_size": 51521,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/Users/andy.liu/Documents/CRM"
			],
			"file_history":
			[
				"/Users/andy.liu/Documents/itsm_notes.txt",
				"/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
				"/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap"
			],
			"find":
			{
				"height": 31.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"region",
					"renewal",
					"sales_newlogo_opty_update",
					"updateNewLogoOnOpty"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "/Users/andy.liu/Documents/CRM"
				}
			],
			"groups":
			[
				{
					"selected": 2,
					"sheets":
					[
						{
							"buffer": 0,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 453,
								"regions":
								{
								},
								"selection":
								[
									[
										453,
										453
									]
								],
								"settings":
								{
									"auto_name": "Sr Director: paul nilsen",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 1,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 0,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"auto_name": "",
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/Users/andy.liu/Documents/CRM/SalesTeam/SalesTeamSecurityHelper.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 25547,
								"regions":
								{
								},
								"selection":
								[
									[
										10781,
										10781
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 4513.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/Users/andy.liu/Documents/CRM/SLS_NewLogoHelper.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 22864,
								"regions":
								{
								},
								"selection":
								[
									[
										6070,
										6070
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 2419.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 4,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 22475,
								"regions":
								{
								},
								"selection":
								[
									[
										21863,
										21880
									]
								],
								"settings":
								{
									"syntax": "Packages/XML/XML.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 7147.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/Users/andy.liu/Documents/OPTY0555589_datafix.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 429,
								"regions":
								{
								},
								"selection":
								[
									[
										429,
										429
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "/Users/andy.liu/Documents/CRM/SalesTeam/SalesTeamAccessDAO.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 59710,
								"regions":
								{
								},
								"selection":
								[
									[
										14180,
										14180
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 6758.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "/Users/andy.liu/Documents/CRM/SalesTeam/SalesTeamAccessService.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 51521,
								"regions":
								{
								},
								"selection":
								[
									[
										50351,
										50351
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 23740.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 31.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0 -1800 20 1680 957 -1920 -30 1920 1057 ",
			"project": "",
			"replace":
			{
				"height": 58.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 6,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"buffers":
			[
				{
					"file": "/Users/andy.liu/Documents/machineLearning/ml-class/keras-cnn-2.py",
					"settings":
					{
						"buffer_size": 1279,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/Users/andy.liu/Documents/itsm_notes.txt",
					"settings":
					{
						"buffer_size": 252,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "var SSASplitAdjustorUtil = Class.create();\nvar choice_flags = ['sls_SSASplitAdjustorUtil.flag.has_split', 'sls_SSASplitAdjustorUtil.flag.built_in_upsell', 'sls_SSASplitAdjustorUtil.flag.mandatory_product_pair',\n    'sls_SSASplitAdjustorUtil.flag.has_price_reset', 'sls_SSASplitAdjustorUtil.flag.has_replacement', 'sls_SSASplitAdjustorUtil.flag.has_conversions',\n    'sls_SSASplitAdjustorUtil.flag.early_renewal'\n];\nvar perfUtil = new SurfPerfUtil();\nvar choice_flags_ids = [];\nfor (var i = 0; i < choice_flags.length; i++) {\n    var choice = {\n        'value': gs.getProperty(choice_flags[i]),\n        'element': 'flags'\n    };\n    var choice_flags_id = perfUtil.getSysID('sys_choice', choice);\n    choice_flags_ids.push(choice_flags_id);\n}\n\nSSASplitAdjustorUtil.FLAGS = {\n    HAS_SPLIT: choice_flags_ids[0],\n    BUILT_IN_UPSELL: choice_flags_ids[1],\n    MANDATORY_PRODUCT_PAIR: choice_flags_ids[2],\n    HAS_PRICE_RESET: choice_flags_ids[3],\n    HAS_REPLACEMENT: choice_flags_ids[4],\n    HAS_MIGRATION: choice_flags_ids[5],\n    EARLY_RENEWAL: choice_flags_ids[6]\n};\n\nSSASplitAdjustorUtil.OPP_SKIP_FIELDS_ON_MERGE = {\n    'number': 1,\n    'name': '',\n    'u_net_new_acv': '',\n    'u_usd_net_new_acv': '',\n    'u_master_quote': 1,\n    'product_pairing_json': 1,\n    'sys_id': 1,\n    'u_salesteam_users': ''\n};\n\nSSASplitAdjustorUtil.LINE_SKIP_FIELDS_ON_MERGE = {\n    'opportunity': 1,\n    'number': 1,\n    'sys_id': 1,\n    'u_quote': 1,\n    'u_sow_request': 1\n};\n\nSSASplitAdjustorUtil.isQueueNotEmpty = function() {\n    var result = false;\n    var queueGr = new GlideAggregate('u_surf_crm_split_adjuster_queue');\n    queueGr.addAggregate('COUNT', 'sys_id');\n    queueGr.query();\n\n    var syncRequest = 0;\n    if (queueGr.next()) {\n        syncRequest = queueGr.getAggregate('COUNT', 'sys_id');\n    }\n    return syncRequest > 0 ? true : false;\n};\n\nSSASplitAdjustorUtil.isOppNotClosed = function(currentStage, previousStage) {\n    var isClosed = currentStage.indexOf('closed') != -1 && previousStage.indexOf('closed') != -1;\n    var isDuplicate = currentStage.indexOf('sops') != -1 && previousStage.indexOf('sops') != -1;\n\n    return !(isClosed || isDuplicate);\n};\n\nSSASplitAdjustorUtil.updateRequestState = function(queueId, state) {\n    var queueGr = new GlideRecord('u_surf_crm_split_adjuster_queue');\n    queueGr.get(queueId);\n    if (!queueGr.isValidRecord()) {\n        return;\n    }\n    queueGr.u_state = state;\n    queueGr.update();\n};\n\nSSASplitAdjustorUtil.deleteCompletedQueueRec = function() {\n    var queueGr = new GlideRecord('u_surf_crm_split_adjuster_queue');\n    queueGr.addQuery('u_state', 'complete');\n    queueGr.deleteMultiple();\n};\n\nSSASplitAdjustorUtil.updateOppRequestState = function(oppId, state) {\n    if (!oppId || !state) {\n        return;\n    }\n    var queueGr = new GlideRecord('u_surf_crm_split_adjuster_queue');\n    queueGr.addQuery('u_opportunity', oppId);\n    queueGr.query();\n    while (queueGr.next()) {\n        queueGr.u_state = state;\n        queueGr.update();\n    }\n};\n\nSSASplitAdjustorUtil.processQueueRequest = function() {\n\n    SSASplitAdjustorUtil.deleteCompletedQueueRec();\n\n    var queueGr = new GlideRecord('u_surf_crm_split_adjuster_queue');\n    queueGr.addQuery('u_state', 'pending');\n    queueGr.orderBy('sys_created_on');\n    queueGr.query();\n\n    while (queueGr.next()) {\n        // Before Syncing Make state = Inprogress\n        SSASplitAdjustorUtil.updateRequestState(queueGr.sys_id, 'inprogress');\n        var splitAdj = new SSASplitAdjustorUtil();\n        splitAdj.createSplitOpty(queueGr.u_opportunity, queueGr.u_sync_type);\n        // After Syncing Make state = Complete\n        SSASplitAdjustorUtil.updateRequestState(queueGr.sys_id, 'complete');\n    }\n};\n\nSSASplitAdjustorUtil.addorUpdateQueue = function(oppId, updateType) {\n    var adjusterQueueGr = SSASplitAdjustorUtil.isOppPresentInQueue(oppId);\n    if (JSUtil.nil(adjusterQueueGr)) {\n        var queueGr = new GlideRecord('u_surf_crm_split_adjuster_queue');\n        queueGr.initialize();\n        queueGr.u_opportunity = oppId;\n        queueGr.u_state = 'pending';\n        queueGr.u_sync_type = updateType;\n        queueGr.insert();\n    } else if (adjusterQueueGr.u_state == 'pending') { // State = Pending\n        if (updateType == 'sync_all' && adjusterQueueGr.u_sync_type != updateType) {\n            // update exisiting request\n            var queueRec = new GlideRecord('u_surf_crm_split_adjuster_queue');\n            queueRec.addQuery('u_opportunity', oppId);\n            queueRec.query();\n            while (queueRec.next()) {\n                queueRec.u_sync_type = updateType;\n                queueRec.update();\n            }\n        }\n    }\n};\n\nSSASplitAdjustorUtil.isOppPresentInQueue = function(oppId) {\n    var queueGr = new GlideRecord('u_surf_crm_split_adjuster_queue');\n    queueGr.addQuery('u_opportunity', oppId);\n    queueGr.addQuery('u_state', 'pending');\n    queueGr.query();\n\n    while (queueGr.next()) {\n        return queueGr;\n    }\n};\n\nSSASplitAdjustorUtil.getCommissionRecordCount = function(masterOptySys_ID) {\n    try {\n        var gr = new GlideAggregate('u_sales_commission');\n        gr.addAggregate('COUNT');\n        gr.addQuery('u_master_opportunity', masterOptySys_ID);\n        gr.query();\n\n        var commissionCount = 0;\n        if (gr.next())\n            commissionCount = gr.getAggregate('COUNT');\n\n        return commissionCount;\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.getCommissionRecordCount' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.hasSplitOpportunityRole = function() {\n    return (gs.hasRole('sales_operations') || gs.hasRole('order_management'));\n};\n\nSSASplitAdjustorUtil.canEditSplitOpportunity = function(oppId) {\n    try {\n        if (oppId) {\n            var oppGr = new GlideRecord('sales_opportunity');\n            oppGr.get(oppId);\n\n            if (oppGr.isValidRecord() && oppGr.type == 'split_adjuster') {\n                var encQuery = 'u_target_opp_created=' + oppId;\n                var commGr = new GlideRecord('u_sales_commission');\n                commGr.addEncodedQuery(encQuery);\n                commGr.query();\n\n                if (commGr.getRowCount() == 1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.canEditSplitOpportunity' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.isChildSplitAdjuster = function(oppId) {\n    try {\n        if (!oppId)\n            return false;\n        var oppGr = new GlideRecord('sales_opportunity');\n        oppGr.get(oppId);\n\n        var encQuery = 'u_target_opp_created=' + oppId;\n        var commGr = new GlideRecord('u_sales_commission');\n        commGr.addEncodedQuery(encQuery);\n        commGr.query();\n\n        var result = commGr.getRowCount() == 1 ? true : false && oppGr.type == 'split_adjuster';\n\n        return result;\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.isChildSplitAdjuster' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.updateContractID = function(optyId, contractID) {\n    try {\n\n        if (SSASplitAdjustorUtil.oppHasSplitRecords(optyId)) {\n            var encQuery = 'u_master_opportunity=' + optyId;\n\n            var commGr = new GlideRecord('u_sales_commission');\n            commGr.addEncodedQuery(encQuery);\n            commGr.query();\n\n            while (commGr.next()) {\n                if (JSUtil.notNil(commGr.u_target_opp_created)) {\n                    var targetOpp = commGr.u_target_opp_created;\n\n                    var targetOppGr = new GlideRecord('sales_opportunity');\n                    targetOppGr.get(targetOpp);\n\n                    targetOppGr.u_contract = contractID;\n                    targetOppGr.setWorkflow(false);\n                    targetOppGr.update();\n                }\n            }\n        }\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.updateContractID' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.deleteTargetOpty = function(optyId) {\n    try {\n        var debug = new SSADebugUtil('SSASplitAdjustorUtil');\n        debug.log('SSASplitAdjustorUtil.deleteTargetOpty ', 'SSASplitAdjustorUtil');\n        if (JSUtil.notNil(optyId)) {\n\n            var oppPartner = new GlideRecord('u_opportunity_partner');\n            oppPartner.addQuery('u_opportunity', optyId);\n            oppPartner.query();\n            oppPartner.deleteMultiple();\n\n            var oppGr = new GlideRecord('sales_opportunity');\n            oppGr.get(optyId);\n            oppGr.setWorkflow(false);\n            oppGr.deleteRecord();\n\n            // delete Respective Line Items\n            var lineGr = new GlideRecord('sales_opportunity_item');\n            lineGr.addQuery('opportunity', optyId);\n            lineGr.query();\n\n            while (lineGr.next()) {\n                lineGr.setWorkflow(false);\n                lineGr.deleteRecord();\n            }\n        } else {\n            debug.log('No Opty Created Yet. So No further Action Required.', 'SSASplitAdjustorUtil');\n        }\n        debug.write();\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.deleteTargetOpty' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.updatePOwnerPercentage = function(currentCommRec) {\n    try {\n        var deletedPercentage = currentCommRec.u_percentage_split;\n\n        var encQuery = 'u_master_opportunity=' + currentCommRec.u_master_opportunity + '^u_is_primary_opportunity=true';\n        var commissionGr = new GlideRecord('u_sales_commission');\n        commissionGr.addEncodedQuery(encQuery);\n        commissionGr.query();\n\n        if (commissionGr.getRowCount() == 1) {\n            if (commissionGr.next()) {\n                commissionGr.u_percentage_split = commissionGr.u_percentage_split + deletedPercentage;\n\n                if (commissionGr.u_percentage_split == 100 && JSUtil.notNil(commissionGr.u_target_opp_created)) {\n                    // 1. Delete Split Opportunity\n                    SSASplitAdjustorUtil.deleteTargetOpty(commissionGr.u_target_opp_created);\n\n                    // Clear Queue Record if any\n                    SSASplitAdjustorUtil.clearQueueRecordIfAny(commissionGr.u_target_opp_created);\n\n                    // 2. Remove Flag\n                    SSASplitAdjustorUtil.removeSplitFlag(currentCommRec.u_master_opportunity);\n                    commissionGr.u_split_opty_link = '';\n                    commissionGr.u_net_new_acv = '';\n                    commissionGr.u_target_opp_created = '';\n                }\n                commissionGr.update();\n            }\n        }\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.updatePOwnerPercentage' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.clearQueueRecordIfAny = function(oppId) {\n    try {\n        var gr = new GlideRecord('u_surf_crm_split_adjuster_queue');\n        gr.addQuery('u_opportunity', oppId);\n        gr.addEncodedQuery('u_stateINpending,inprogress');\n        gr.query();\n\n        while (gr.next()) {\n            gr.deleteRecord();\n        }\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.clearQueueRecordIfAny' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.removeSplitFlag = function(oppID) {\n    try {\n\n        var oppGr = new GlideRecord('sales_opportunity');\n        oppGr.get(oppID);\n\n        var flagLU = new ListUtil(oppGr.flags);\n        flagLU.removeFromList(SSALineItemCalculator.FLAGS.HAS_SPLIT);\n        oppGr.flags = flagLU.getListValue();\n        oppGr.setWorkflow(false);\n        oppGr.update();\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.removeSplitFlag' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.getTotalPercentage = function(currentSalesRec) {\n    try {\n        var encQuery = 'u_master_opportunity=' + currentSalesRec.u_master_opportunity + '^sys_id!=' + currentSalesRec.sys_id;\n        var commissionGr = new GlideRecord('u_sales_commission');\n        commissionGr.addEncodedQuery(encQuery);\n        commissionGr.query();\n\n        var totalExpectedPercentage = 0;\n        while (commissionGr.next()) {\n            totalExpectedPercentage = totalExpectedPercentage + commissionGr.u_percentage_split;\n        }\n\n        totalExpectedPercentage = totalExpectedPercentage + currentSalesRec.u_percentage_split;\n\n        return totalExpectedPercentage;\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.getTotalPercentage' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.hasSplitRecords = function(currentSalesRec) {\n    try {\n        var hasSplit = false;\n        var encQuery = 'u_master_opportunity=' + currentSalesRec.u_master_opportunity;\n        var commissionGr = new GlideAggregate('u_sales_commission');\n        commissionGr.addEncodedQuery(encQuery);\n        commissionGr.addAggregate('COUNT');\n        commissionGr.query();\n\n        var splitRec = 0;\n        if (commissionGr.next())\n            splitRec = commissionGr.getAggregate('COUNT');\n\n        return splitRec > 1 ? true : false;\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.hasSplitRecords' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.oppHasSplitRecords = function(oppID) {\n    try {\n        var hasSplit = false;\n        var encQuery = 'u_master_opportunity=' + oppID;\n        var commissionGr = new GlideAggregate('u_sales_commission');\n        commissionGr.addEncodedQuery(encQuery);\n        commissionGr.addAggregate('COUNT');\n        commissionGr.query();\n\n        var splitRec = 0;\n        if (commissionGr.next())\n            splitRec = commissionGr.getAggregate('COUNT');\n\n        return splitRec > 1 ? true : false;\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.oppHasSplitRecords' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.splitRecordsCount = function(oppID) {\n    try {\n        var hasSplit = false;\n        var encQuery = 'u_master_opportunity=' + oppID;\n        var commissionGr = new GlideAggregate('u_sales_commission');\n        commissionGr.addEncodedQuery(encQuery);\n        commissionGr.addAggregate('COUNT');\n        commissionGr.query();\n\n        var splitRec = 0;\n        if (commissionGr.next())\n            splitRec = commissionGr.getAggregate('COUNT');\n\n        return splitRec;\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.splitRecordsCount' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.getTotalOppSplitPercentage = function(oppID) {\n    try {\n        var encQuery = 'u_master_opportunity=' + oppID;\n\n        var commissionGr = new GlideRecord('u_sales_commission');\n        commissionGr.addEncodedQuery(encQuery);\n        commissionGr.query();\n\n        var totalPercentage = 0;\n        while (commissionGr.next()) {\n            totalPercentage = totalPercentage + commissionGr.u_percentage_split;\n        }\n\n        return totalPercentage;\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.getTotalOppSplitPercentage' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.updatePrimaryOppOwner = function(masterOppGr) {\n    try {\n        var debug = new SSADebugUtil('SSASplitAdjustorUtil');\n        debug.log('SSASplitAdjustorUtil.createDefaultRecord ', 'SSASplitAdjustorUtil');\n        if (JSUtil.notNil(masterOppGr)) {\n            var commissionGr = new GlideRecord('u_sales_commission');\n            commissionGr.addQuery('u_master_opportunity', masterOppGr.sys_id);\n            commissionGr.addQuery('u_is_primary_opportunity', true);\n            commissionGr.query();\n            if (commissionGr.getRowCount() == 0) {\n                SSASplitAdjustorUtil.createDefaultRecord(masterOppGr);\n            } else {\n                while (commissionGr.next()) {\n                    commissionGr.u_opp_owner = SSASplitAdjustorUtil._getDefaultCommOwner(masterOppGr).person.sys_id;\n                    commissionGr.update();\n                }\n            }\n        } else {\n            debug.log('Invalid Master Opp Entered..', 'SSASplitAdjustorUtil');\n        }\n        debug.write();\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.updatePrimaryOppOwner' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.createDefaultRecord = function(masterOppGr) {\n    try {\n        var debug = new SSADebugUtil('SSASplitAdjustorUtil');\n        debug.log('SSASplitAdjustorUtil.createDefaultRecord ', 'SSASplitAdjustorUtil');\n        if (JSUtil.notNil(masterOppGr) && (JSUtil.notNil(masterOppGr.owner) || JSUtil.notNil(masterOppGr.u_msp_sales)) && masterOppGr.owner != 'system') {\n            // if(JSUtil.notNil(masterOppGr)){\n            if (SSASplitAdjustorUtil.getCommissionRecordCount(masterOppGr.sys_id) == 0) {\n                var commissionGr = new GlideRecord('u_sales_commission');\n                commissionGr.initialize();\n                commissionGr.u_master_opportunity = masterOppGr.sys_id;\n                commissionGr.u_is_primary_opportunity = true;\n                commissionGr.u_opp_owner = SSASplitAdjustorUtil._getDefaultCommOwner(masterOppGr).person.sys_id;\n                commissionGr.u_percentage_split = 100;\n                // commissionGr.insertWithReferences();\n                commissionGr.insert();\n            }\n        } else {\n            debug.log('Invalid Master Opp Entered..', 'SSASplitAdjustorUtil');\n        }\n        debug.write();\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.createDefaultRecord' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil._getDefaultCommOwner = function(masterOppGr) {\n    var ownerObj = {\n        person: '',\n        role: ''\n    };\n    if (JSUtil.notNil(masterOppGr.owner)) {\n        ownerObj.person = masterOppGr.owner;\n        ownerObj.role = 'owner';\n    } else if (JSUtil.notNil(masterOppGr.u_msp_sales)) {\n        ownerObj.person = masterOppGr.u_msp_sales;\n        ownerObj.role = 'u_msp_sales';\n    }\n    return ownerObj;\n};\n\nSSASplitAdjustorUtil._cloneSplitRecordOnNewOpty = function(commissionGr, newOppID) {\n    try {\n        var commGr = new GlideRecord('u_sales_commission');\n        commGr.initialize();\n        commGr.u_master_opportunity = newOppID;\n        commGr.u_is_primary_opportunity = commissionGr.u_is_primary_opportunity;\n        commGr.u_opp_owner = commissionGr.u_opp_owner;\n        commGr.u_percentage_split = commissionGr.u_percentage_split;\n        commGr.setWorkflow(false);\n        commGr.insert();\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil._cloneSplitRecordOnNewOpty' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.createSplitRecordForNewOpty = function(oldOppID, newOppID) {\n    try {\n        var debug = new SSADebugUtil('SSASplitAdjustorUtil');\n        debug.log('SSASplitAdjustorUtil.createSplitRecordForNewOpty ', 'SSASplitAdjustorUtil');\n        if (SSASplitAdjustorUtil.oppHasSplitRecords(oldOppID)) {\n            // 1. Delete Exisiting Split Record For New Opty\n            var cmmGr = new GlideRecord('u_sales_commission');\n            cmmGr.addEncodedQuery('u_master_opportunity=' + newOppID);\n            cmmGr.query();\n            while (cmmGr.next()) {\n                cmmGr.deleteRecord();\n            }\n\n            var encQuery = 'u_master_opportunity=' + oldOppID;\n            var commissionGr = new GlideRecord('u_sales_commission');\n            commissionGr.addEncodedQuery(encQuery);\n            commissionGr.query();\n\n            while (commissionGr.next()) {\n                SSASplitAdjustorUtil._cloneSplitRecordOnNewOpty(commissionGr, newOppID);\n            }\n\n            debug.log('Split Commission Records are created to the new Opty. ', 'SSASplitAdjustorUtil');\n        }\n        debug.write();\n    } catch (ex) {\n        gs.log('Exception Occured in SSASplitAdjustorUtil.createSplitRecordForNewOpty' + ex, 'SSASplitAdjustorUtil');\n    }\n};\n\nSSASplitAdjustorUtil.pullAllSalesTeamRecords = function(opty) {\n\n    var fieldArr = [];\n    var fields = opty.getFields();\n    for (var i = 0; i < fields.size(); i++) {\n        var glideElement = fields.get(i);\n        if (!glideElement.hasValue()) {\n            continue;\n        }\n        // skip territory fields\n        if (glideElement.getName().indexOf('territory') != -1) {\n            continue;\n        }\n        var descriptor = glideElement.getED();\n        if (descriptor.getInternalType() != 'reference') {\n            continue;\n        }\n        fieldArr.push(glideElement.getName());\n    }\n    // gs.log('fields to pass to update reference: ' + fieldArr, 'andy');\n\n    var updateRefService = new SalesTeamUpdateReference();\n    updateRefService.execute(opty, fieldArr, true);\n    // gs.eventQueue(\"salesteam.update.reference\", opty, fieldArr.join(), '');\n};\n\nSSASplitAdjustorUtil.prototype = {\n    initialize: function() {\n        this.jfService = new SalesTeamJFService();\n    },\n\n    createSplitOpty: function(parentOppSysID, syncType) {\n        try {\n            var session = gs.getSession();\n            session.putClientData('skip_before_st_query_business_rule', 'true');\n            var parentOpp = new GlideRecord('sales_opportunity');\n            parentOpp.get(parentOppSysID);\n            var sales_com = new GlideRecord('u_sales_commission');\n            sales_com.addQuery('u_master_opportunity', parentOppSysID);\n            sales_com.orderBy('u_is_primary_opportunity');\n            sales_com.query();\n\n            var totalRecord = sales_com.getRowCount();\n            var count = 0;\n\n            // if a row exists for this opportunity with an existing opp, update it with the new percentage, don't create a new line\n            // For the row that doesn't have existing opportunity, clone the opportunity.\n            while (sales_com.next()) {\n                count = count + 1;\n                var isLastRecord = (count + 1 == totalRecord);\n                if (JSUtil.notNil(sales_com.u_target_opp_created)) {\n                    // revoke direct sta for split opty\n                    /*\n                     * var revokeService = new SalesTeamRevokeDirectAssignmentAccess(); var staDao = new SalesTeamAccessDAO(); var sta =\n                     * staDao.getDirectSTAs(sales_com.u_target_opp_created.getRefRecord()); while (sta.next()) { revokeService.execute(sta); }\n                     */\n                    // staDao.deleteAllStaOnRecord(sales_com.u_target_opp_created.getRefRecord());\n                    // delete split opty\n                    SSASplitAdjustorUtil.deleteTargetOpty(sales_com.u_target_opp_created);\n                }\n\n                if (SSASplitAdjustorUtil._getDefaultCommOwner(parentOpp).person.sys_id == sales_com.u_opp_owner.sys_id) {\n                    if (sales_com.u_percentage_split != '100') {\n                        var opp = this.cloneOpportunity(sales_com.sys_id, parentOpp, sales_com.u_opp_owner, sales_com.u_percentage_split, true, sales_com.sys_id, isLastRecord);\n                    }\n                } else {\n                    var opp1 = this.cloneOpportunity(sales_com.sys_id, parentOpp, sales_com.u_opp_owner, sales_com.u_percentage_split, false, sales_com.sys_id, isLastRecord);\n                }\n\n            }\n            // Update the parent opportunity with the flag\n            this.updatePrimaryOpportunity(parentOpp);\n        } catch (exception) {\n            var debug = new SSADebugUtil('SSASplitAdjustorUtil');\n            debug.log('Exception: ' + exception, 'SSASplitAdjustorUtil');\n        } finally {\n            session.putClientData('skip_before_st_query_business_rule', '');\n        }\n    },\n\n    updatePrimaryOpportunity: function(parentOpp) {\n        var sales_com = new GlideRecord('u_sales_commission');\n        sales_com.addQuery('u_master_opportunity', parentOpp.sys_id);\n        sales_com.query();\n        while (sales_com.next()) {\n            if (JSUtil.notNil(sales_com.u_target_opp_created)) {\n                var flagLU = new ListUtil(parentOpp.flags);\n                flagLU.addToList(SSASplitAdjustorUtil.FLAGS.HAS_SPLIT);\n                parentOpp.flags = flagLU.getListValue();\n                //Swapnil W - Added line-645  for STRY0490882\n                parentOpp.u_opportunity_link_reason = 'Split_Commission';\n                parentOpp.setWorkflow(false);\n                parentOpp.update();\n                break;\n            }\n        }\n\n    },\n\n    cloneOpportunity: function(salesComRecord, parentOpp, newOwner, percentage, isNegative, commID, isLastRecord) {\n\n        var gru = new GlideRecordUtil();\n        // parent opportunity\n        var newOpp = new GlideRecord('sales_opportunity');\n        newOpp.initialize();\n        gru.populateFromGR(newOpp, parentOpp, SSASplitAdjustorUtil.OPP_SKIP_FIELDS_ON_MERGE);\n        newOpp.stage = 'Demo';\n        newOpp.setWorkflow(false);\n        var splitOptyId = newOpp.insert();\n\n        var newOppinserted = SSAOpportunityUtil.getOptyById(splitOptyId);\n        /*\n         * var newOppinserted = new GlideRecord('sales_opportunity'); newOppinserted.get(newOpp.sys_id);\n         */\n        newOppinserted.type = 'split_adjuster';\n        newOppinserted.name = parentOpp.name + \" -Split Adj- \" + newOwner.name;\n        var parentOppCommOwner = SSASplitAdjustorUtil._getDefaultCommOwner(parentOpp).person;\n        var commOwnerRole = SSASplitAdjustorUtil._getDefaultCommOwner(parentOpp).role;\n\n        // Field Sales owns the Split Adjuster\n        if (commOwnerRole == 'owner') {\n            newOppinserted.owner = newOwner;\n            newOppinserted.u_msp_sales = parentOpp.u_msp_sales;\n            newOppinserted.u_territory = (isNegative) ? parentOpp.u_territory : SalesTeamUtil.getInstance().getUserTerritory(newOwner.sys_id).sys_id;\n            newOppinserted.u_msp_territory = parentOpp.u_msp_territory;\n        } else {\n            // MSP Sales owns the Split Adjuster\n            newOppinserted.owner = parentOpp.owner;\n            newOppinserted.u_msp_sales = newOwner;\n            newOppinserted.u_msp_territory = (isNegative) ? parentOpp.u_msp_territory : SalesTeamUtil.getInstance().getUserTerritory(newOwner.sys_id).sys_id;\n            newOppinserted.u_territory = parentOpp.u_territory;\n        }\n\n        // newOppinserted.u_territory = parentOpp.u_territory;\n        // newOppinserted.u_msp_territory = parentOpp.u_msp_territory;\n        newOppinserted.u_msp = parentOpp.u_msp;\n        newOppinserted.u_parent = parentOpp.sys_id;\n\n        // newOpp.u_parent = ''; //Is this the parent split adjustor or original parent\n        newOppinserted.u_start_date = gs.now();\n        newOppinserted.sys_created_by = parentOpp.owner.name;\n        newOppinserted.setWorkflow(false);\n        newOppinserted.update();\n\n        var sales_com = new GlideRecord('u_sales_commission');\n        sales_com.get(salesComRecord);\n        sales_com.u_target_opp_created = newOppinserted.sys_id;\n        sales_com.u_split_opty_link = gs.getProperty('glide.servlet.uri') + newOppinserted.getLink(true);\n        sales_com.setWorkflow(false);\n        sales_com.update();\n\n        if (!isNegative) {\n            // SalesTeam - assign JF to positive child opty\n            var jfKey = (commOwnerRole == 'owner') ? 'sales_rep_opportunity' : 'msp_rep_opportunity';\n            this.jfService.assignJFByUser(jfKey, newOppinserted, newOwner.sys_id, true, true);\n\n            // var mgr = new SalesTeamUtil.getInstance();\n            // mgr.updateMappedField('sales_opportunity', newOppinserted, commOwnerRole, newOwner);\n        } else {\n            var salesTeamService = new SalesTeamAccessService();\n            salesTeamService.cloneDirectAssignment(parentOpp, newOppinserted, true);\n        }\n        // clone Line Items\n        var lines = new GlideRecord('sales_opportunity_item');\n        lines.addQuery('opportunity', parentOpp.sys_id);\n        lines.query();\n        var newLines = [];\n        while (lines.next()) {\n            var flagLU = new ListUtil(lines.flags);\n            if (JSUtil.nil(lines.u_price_reset_primary_line) && (!(flagLU.isInList(SSASplitAdjustorUtil.FLAGS.BUILT_IN_UPSELL)) && !(flagLU.isInList(SSASplitAdjustorUtil.FLAGS.EARLY_RENEWAL)))) {\n                newLines.push(this._cloneLine(lines, splitOptyId, percentage, isNegative, commID, isLastRecord));\n            }\n        }\n        // Reset Stage to Parent Opty Stage\n        newOppinserted.stage = parentOpp.stage;\n        newOppinserted.setWorkflow(false);\n        newOppinserted.update();\n        // Recalculating Weighted ACV\n        var oppGr = SSAOpportunityUtil.getOptyById(newOppinserted.sys_id);\n        /*\n         * var oppGr = new GlideRecord('sales_opportunity'); oppGr.get(newOppinserted.sys_id);\n         */\n\n        // STRY0352843- Code Added by Swapnil W\n        if (parentOpp.type == 'Renewal') {\n            if (isNegative) {\n                this.surfCurrency = new SurfCurrency();\n\n                var ren_acv = -(parseFloat(parentOpp.u_renewal_acv.replace(/[^0-9-.]/g, '').trim()) * ((100 - percentage) / 100));\n                oppGr.u_renewal_acv = this.surfCurrency.formatMoney(ren_acv.toString(), parentOpp.u_contract.u_base_currency.symbol);\n                oppGr.u_usd_renewal_acv = -(parentOpp.u_usd_renewal_acv * ((100 - percentage) / 100));\n                oppGr.u_renewal_acv_const = -(parentOpp.u_renewal_acv_const * ((100 - percentage) / 100));\n            } else {\n                this.surfCurrency = new SurfCurrency();\n\n                var ren_acv = parseFloat(parentOpp.u_renewal_acv.replace(/[^0-9-.]/g, '').trim()) * ((percentage) / 100);\n                oppGr.u_renewal_acv = this.surfCurrency.formatMoney(ren_acv.toString(), parentOpp.u_contract.u_base_currency.symbol);\n                oppGr.u_usd_renewal_acv = parentOpp.u_usd_renewal_acv * ((percentage) / 100);\n                oppGr.u_renewal_acv_const = parentOpp.u_renewal_acv_const * ((percentage) / 100);\n            }\n        }\n\n        SSAOpportunityWeightedACV.init(oppGr);\n        oppGr.setWorkflow(false);\n        oppGr.update();\n        this._createOptyElevatedSTA(oppGr, gs.getProperty(\"salesteam.jf.elevated.sys_id\"), gs.getProperty(\"salesteam.jfa.elevated.sys_id\"));\n        this._createOptyElevatedSTA(oppGr, gs.getProperty(\"salesteam.jf.elevated_sales_management.sys_id\"), gs.getProperty(\"salesteam.jfa.elevated_sales_management.sys_id\"));\n\n        var sales_com2 = new GlideRecord('u_sales_commission');\n        sales_com2.get(salesComRecord);\n        sales_com2.u_net_new_acv = oppGr.u_net_new_acv;\n        sales_com2.setWorkflow(false);\n        sales_com2.update();\n        SSASplitAdjustorUtil.pullAllSalesTeamRecords(newOppinserted);\n        //STRY0507550 - Copy the Sales partner's information to system generated future opportunities.\n        gs.eventQueue('SLScopy.opportunity.partners', parentOpp, parentOpp.sys_id, oppGr.sys_id);\n        return oppGr;\n    },\n\n    _createOptyElevatedSTA: function(gr, jfSysId, jfaSysId) {\n\n        var sta = new GlideRecord(\"u_st_opportunity\");\n        sta.initialize();\n        sta.u_rec_sys_id = gr.sys_id;\n        sta.u_active = true;\n        sta.u_direct_assignment = false;\n        if (gr.account && gr.account.u_account_territory) {\n            sta.u_area = gr.account.u_account_territory.u_area;\n            sta.u_geo = gr.account.u_account_territory.u_geo;\n            sta.u_region = gr.account.u_account_territory.u_region;\n            sta.u_district = gr.account.u_account_territory.u_district;\n        }\n\n        if (gr.u_territory) {\n            sta.u_field_territory_area = gr.u_territory.u_area;\n            sta.u_field_territory_geo = gr.u_territory.u_geo;\n            sta.u_field_territory_region = gr.u_territory.u_region;\n            sta.u_field_territory_district = gr.u_territory.u_district;\n        }\n        if (gr.u_msp_territory) {\n            sta.u_msp_territory_area = gr.u_msp_territory.u_area;\n            sta.u_msp_territory_geo = gr.u_msp_territory.u_geo;\n            sta.u_msp_territory_region = gr.u_msp_territory.u_region;\n            sta.u_msp_territory_district = gr.u_msp_territory.u_district;\n        }\n\n        sta.u_jf_access = jfaSysId; // \"b1804f841319e640ee58b6466144b0af\"; // elevated access jfa sys id\n        sta.u_job_function = jfSysId; // \"69508b841319e640ee58b6466144b084\"; // elevated access job function sys id\n        sta.setWorkflow(false);\n        sta.insert();\n\n    },\n\n    _cloneLine: function(srcLine, newOppSysId, percentage, isNegative, commID, isLastRecord) {\n        var newLine = new GlideRecord('sales_opportunity_item');\n        newLine.initialize();\n        // var newlineSysid = newLine.insert();\n        var gru = new GlideRecordUtil();\n        gru.populateFromGR(newLine, srcLine, SSASplitAdjustorUtil.LINE_SKIP_FIELDS_ON_MERGE);\n        newLine.update();\n        var newLineinserted = new GlideRecord('sales_opportunity_item');\n        newLineinserted.get(newLine.sys_id);\n        newLineinserted.opportunity = newOppSysId;\n        newLineinserted.u_quote = '';\n        newLineinserted.setWorkflow(false);\n        newLineinserted.update();\n\n        this.splitFinancials(srcLine, newLineinserted, percentage, isNegative, srcLine.opportunity, commID, isLastRecord);\n        return newLineinserted;\n    },\n\n    splitFinancials: function(srcLine, line, percentage, isNegative, masterOppId, commID, isLastRecord) {\n        if (isLastRecord == true) {\n            if (isNegative) {\n                line.u_sales_amount = this.calculateLastRepAmount(masterOppId, commID, line.u_sales_amount);\n                line.u_adjustment_a = this.calculateLastRepAmount(masterOppId, commID, line.u_adjustment_a);\n                line.contract_line_acv = -(this.calculateLastRepAmount(masterOppId, commID, line.contract_line_acv));\n                line.contract_line_acv_const = -(this.calculateLastRepAmount(masterOppId, commID, line.contract_line_acv_const));\n                line.contract_line_acv_usd = -(this.calculateLastRepAmount(masterOppId, commID, line.contract_line_acv_usd));\n                line.quantity = -(line.quantity);\n                line.u_adjustment_a = -(line.u_adjustment_a);\n\n            } else {\n                line.u_sales_amount = this.calculateLastRepAmount(masterOppId, commID, line.u_sales_amount);\n                line.u_adjustment_a = this.calculateLastRepAmount(masterOppId, commID, line.u_adjustment_a);\n                line.contract_line_acv = this.calculateLastRepAmount(masterOppId, commID, line.contract_line_acv);\n                line.u_contract_line_acv_const = this.calculateLastRepAmount(masterOppId, commID, line.u_contract_line_acv_const);\n                line.contract_line_acv_usd = this.calculateLastRepAmount(masterOppId, commID, line.contract_line_acv_usd);\n            }\n        } else {\n            if (isNegative) {\n                line.u_sales_amount = line.u_sales_amount * ((100 - percentage) / 100);\n                line.u_adjustment_a = line.u_adjustment_a * ((100 - percentage) / 100);\n                line.contract_line_acv = -(line.contract_line_acv * ((100 - percentage) / 100));\n                line.u_contract_line_acv_const = -(line.u_contract_line_acv_const * ((100 - percentage) / 100));\n                line.contract_line_acv_usd = -(line.contract_line_acv_usd * ((100 - percentage) / 100));\n                line.quantity = -(line.quantity);\n                line.u_adjustment_a = -(line.u_adjustment_a);\n            } else {\n                line.u_sales_amount = line.u_sales_amount * ((percentage) / 100);\n                line.u_adjustment_a = line.u_adjustment_a * ((percentage) / 100);\n                line.contract_line_acv = line.contract_line_acv * ((percentage) / 100);\n                line.u_contract_line_acv_const = line.u_contract_line_acv_const * ((percentage) / 100);\n                line.contract_line_acv_usd = line.contract_line_acv_usd * ((percentage) / 100);\n            }\n        }\n\n        line.setWorkflow(false);\n        var ssaCalc = new SSALineItemCalculator(line, 'u_sales_amount');\n        var lineCalculated = ssaCalc.getCurrent();\n\n        var calculatedNNACV = lineCalculated.u_net_new_acv_amount;\n        var actualNNACV;\n        var adjustment;\n\n        /*\n         * if (isNegative) { actualNNACV = srcLine.u_net_new_acv_amount * ((100 - percentage) / 100); adjustment = -(Math.abs(actualNNACV) - Math.abs(calculatedNNACV)); } else { actualNNACV =\n         * srcLine.u_net_new_acv_amount * ((percentage) / 100); adjustment = (Math.abs(actualNNACV) - Math.abs(calculatedNNACV)); }\n         */\n\n        if (isNegative) {\n            if (srcLine.u_net_new_acv_amount < 0) {\n                actualNNACV = srcLine.u_net_new_acv_amount * ((100 - percentage) / 100);\n                adjustment = (Math.abs(actualNNACV) - Math.abs(calculatedNNACV));\n\n            } else {\n                actualNNACV = srcLine.u_net_new_acv_amount * ((100 - percentage) / 100);\n                adjustment = -(Math.abs(actualNNACV) - Math.abs(calculatedNNACV));\n\n            }\n\n        } else {\n            if (srcLine.u_net_new_acv_amount < 0) {\n                actualNNACV = srcLine.u_net_new_acv_amount * ((percentage) / 100);\n                adjustment = -(Math.abs(actualNNACV) - Math.abs(calculatedNNACV));\n            } else {\n                actualNNACV = srcLine.u_net_new_acv_amount * ((percentage) / 100);\n\n                //adjustment = (Math.abs(actualNNACV) - Math.abs(calculatedNNACV));\n                adjustment = actualNNACV - calculatedNNACV;\n            }\n        }\n\n\n        line.u_adjustment_a = line.u_adjustment_a + adjustment;\n        line.setWorkflow(false);\n        ssaCalc = new SSALineItemCalculator(line, 'u_sales_amount');\n        lineCalculated = ssaCalc.getCurrent();\n\n        lineCalculated.update();\n        new SSALineItemBatchUpdateUtil(lineCalculated, 'u_sales_amount').initRollUp();\n        lineCalculated.update();\n        // new SSALineItemBatchUpdateUtil(lineCalculated.opportunity, 'u_sales_amount').init();\n    },\n\n    calculateLastRepAmount: function(oppId, commID, amount) {\n        /*\n         * var oppGr = new GlideRecord('sales_opportunity'); oppGr.get(oppId);\n         * \n         * var surfLocalCurrency = new SurfCurrency(); surfLocalCurrency.setCurrency(oppGr.u_base_currency);\n         */\n\n        var salesGr = new GlideRecord('u_sales_commission');\n        salesGr.addEncodedQuery('u_master_opportunity=' + oppId + '^sys_id!=' + commID);\n        salesGr.query();\n\n        var currentSum = 0;\n        while (salesGr.next()) {\n            currentSum = currentSum + amount * (salesGr.u_percentage_split / 100);\n        }\n\n        return (amount - currentSum);\n    },\n    /*\n     * updateOpportunity: function(parentOppSysID, splitOwner, splitOppSysID, percentage, isNegative, commID, isLastRecord) {\n     * \n     * var parentOpp = new GlideRecord('sales_opportunity'); parentOpp.get(parentOppSysID);\n     * \n     * var splitOpp = new GlideRecord('sales_opportunity'); splitOpp.get(splitOppSysID);\n     * \n     * var splitUser = gs.getUser(); splitUser = splitUser.getUserByID(splitOwner);\n     * \n     * var commOwnerRole = SSASplitAdjustorUtil._getDefaultCommOwner(parentOpp).role;\n     * \n     *  // Sync the header info splitOpp.name = parentOpp.name + \" -Split Adj- \" + splitUser.getFullName(); splitOpp.account = parentOpp.account; splitOpp.stage = 'Demo'; // splitOpp.stage =\n     * parentOpp.stage; // Field Sales owns the Split Adjuster if (commOwnerRole == 'owner') { splitOpp.owner = splitUser.name; splitOpp.u_msp_sales = parentOpp.u_msp_sales; splitOpp.u_territory =\n     * (isNegative) ? parentOpp.u_territory : splitOwner.u_sales_territory; splitOpp.u_msp_territory = parentOpp.u_msp_territory; } else { // MSP Sales owns the Split Adjuster splitOpp.u_msp_sales =\n     * splitUser.name; splitOpp.owner = parentOpp.owner; splitOpp.u_msp_territory = (isNegative) ? parentOpp.u_msp_territory : splitOwner.u_sales_territory; splitOpp.u_territory =\n     * parentOpp.u_territory; }\n     * \n     * splitOpp.u_msp = parentOpp.u_msp; splitOpp.pipeline_status = parentOpp.pipeline_status; splitOpp.u_contract_status = parentOpp.u_contract_status; splitOpp.close_date = parentOpp.close_date;\n     * splitOpp.u_order_term_start_date = parentOpp.u_order_term_start_date; splitOpp.u_order_term_end_date = parentOpp.u_order_term_end_date; splitOpp.u_contract_duration =\n     * parentOpp.u_contract_duration; splitOpp.u_term = parentOpp.u_term; splitOpp.u_term_months_and_days = parentOpp.u_term_months_and_days; splitOpp.u_data_center = parentOpp.u_data_center;\n     * splitOpp.u_ps_territory = parentOpp.u_ps_territory; // splitOpp.u_route_to_market = parentOpp.u_route_to_market; splitOpp.u_parent = parentOpp.sys_id; splitOpp.u_opportunity_source =\n     * parentOpp.u_opportunity_source; splitOpp.u_opp_competition = parentOpp.u_opp_competition; splitOpp.u_isr_interaction = parentOpp.u_isr_interaction; splitOpp.u_base_currency =\n     * parentOpp.u_base_currency; splitOpp.u_price_book = parentOpp.u_price_book; splitOpp.flags = parentOpp.flags; splitOpp.u_use_line_items = parentOpp.u_use_line_items;\n     * splitOpp.u_sales_order_number = parentOpp.u_sales_order_number; splitOpp.u_final_order_form_output = parentOpp.u_final_order_form_output; splitOpp.u_sap_contract_id =\n     * parentOpp.u_sap_contract_id; splitOpp.u_sap_manual_override = parentOpp.u_sap_manual_override; splitOpp.u_contract_signed_date = parentOpp.u_contract_signed_date; splitOpp.u_contract =\n     * parentOpp.u_contract; splitOpp.u_contract_end_date = parentOpp.u_contract_end_date; splitOpp.u_solution_consultant = parentOpp.u_solution_consultant; splitOpp.u_snot = parentOpp.u_snot;\n     * splitOpp.u_overlay_isr = parentOpp.u_overlay_isr; splitOpp.u_education_isr = parentOpp.u_education_isr; splitOpp.u_ps_engagement_manager = parentOpp.u_ps_engagement_manager;\n     * splitOpp.u_first_closed_by = parentOpp.u_first_closed_by; splitOpp.u_first_closed_on = parentOpp.u_first_closed_on; splitOpp.double_compensation_overlay = parentOpp.double_compensation_overlay;\n     * splitOpp.u_new_logo = parentOpp.u_new_logo; splitOpp.u_specialist_overlay = parentOpp.u_specialist_overlay; splitOpp.u_commission_exception = parentOpp.u_commission_exception;\n     * splitOpp.u_hr_sales_specialist = parentOpp.u_hr_sales_specialist; splitOpp.u_pa_sales_specialist = parentOpp.u_pa_sales_specialist; splitOpp.u_security_sales_specialist =\n     * parentOpp.u_security_sales_specialist; splitOpp.u_weighted_percentage = parentOpp.u_weighted_percentage; splitOpp.update(); // Remove the flag\n     * SSASplitAdjustorUtil.removeSplitFlag(splitOpp.sys_id); this.syncOppLinesFromParent(splitOpp.sys_id, parentOpp.sys_id, percentage, isNegative, commID, isLastRecord); // Reset Stage to Parent\n     * Opty Stage splitOpp.stage = parentOpp.stage; splitOpp.setWorkflow(false); splitOpp.update(); // Recalculating Weighted ACV var oppGr = new GlideRecord('sales_opportunity');\n     * oppGr.get(splitOpp.sys_id); SSAOpportunityWeightedACV.init(oppGr); oppGr.setWorkflow(false); oppGr.update();\n     * \n     * return oppGr; },\n     * \n     */\n\n    syncOppLinesFromParent: function(splitOppId, parentOppId, percentage, isNegative, commID, isLastRecord) {\n        // Delete all lines\n        var splitLines = new GlideRecord('sales_opportunity_item');\n        splitLines.addQuery('opportunity', splitOppId);\n        splitLines.setWorkflow(false);\n        splitLines.deleteMultiple();\n\n        // Add New lines from Parent\n        var parentLines = new GlideRecord('sales_opportunity_item');\n        parentLines.addQuery('opportunity', parentOppId);\n        parentLines.query();\n\n        while (parentLines.next()) {\n            var flagLU = new ListUtil(parentLines.flags);\n            if (JSUtil.nil(parentLines.u_price_reset_primary_line) && (!(flagLU.isInList(SSASplitAdjustorUtil.FLAGS.BUILT_IN_UPSELL)) && !(flagLU.isInList(SSASplitAdjustorUtil.FLAGS.EARLY_RENEWAL)))) {\n                this._cloneLine(parentLines, splitOppId, percentage, isNegative, commID, isLastRecord);\n            }\n        }\n    },\n    syncOppswithParent: function(parentOpp) {\n        return '';\n    },\n\n    type: 'SSASplitAdjustorUtil'\n};",
					"file": "/Users/andy.liu/Documents/CRM/SSASplitAdjustorUtil.js",
					"file_size": 44189,
					"file_write_time": 131497980220000000,
					"settings":
					{
						"buffer_size": 44189,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "parent opty: O1, rep: kevin, account territory: T1\n\n\nsplit with Karl from T2 (Field Territory / MSP Territory)\n\nsplit opty: O2 (postive with rep Karl), O3 (negative with rep Kevin)\n\ncloning sales team records from O1 to O3\non O2: delete sales team records that were from T1, do assignment for everyone from T2",
					"settings":
					{
						"buffer_size": 309,
						"line_ending": "Unix",
						"name": "parent opty: O1, rep: kevin, account territory: T1"
					}
				},
				{
					"contents": "var SLS_NewLogoHelper = Class.create();\nSLS_NewLogoHelper.prototype = {\n\n    logger: null,\n    hqGr: null,\n    hqNewLogo: '',\n    acctNewLogo: '',\n    isHqExpress: false,\n    isHqEnterprise: false,\n    isAcctExpress: false,\n    isAcctEnterprise: false,\n    acctGr: null,\n    optyGr: null,\n    acctId: '',\n    //expressFamily3: 'Express, Express Discovery, Express Discovery',\n    expressFamily3: ['Express', 'Express Discovery', 'Express Discovery'],\n\n    initialize: function(record) {\n        this.logger = NewLogoLogger.getInstance('SLS_NewLogoHelper');\n        try {\n            this.logger.debug('initialize - start with record: ' + record.sys_id + ', record type: ' + record.getTableName());\n            if (record.getTableName() == 'sales_account' && record.isValidRecord()) {\n                this.acctGr = record;\n                this.acctId = this.acctGr.sys_id + '';\n                this.hqGr = this.acctGr.u_customer_hq.getRefRecord();\n            } else if (record.getTableName() == 'sales_opportunity' && record.account.getRefRecord().isValidRecord()) {\n                this.optyGr = record;\n                this.acctGr = record.account.getRefRecord();\n                this.acctId = this.acctGr.sys_id + '';\n                this.hqGr = this.acctGr.u_customer_hq.getRefRecord();\n            } else if (record.getTableName() == 'u_dnb' && record.isValidRecord()) {\n                this.hqGr = record;\n            }\n            this._checkNewLogo(this.acctGr);\n            this.logger.debug('initialize - complete. HQ: ' + this.hqGr.u_d_u_n_s_number_sdmr + ', HQNewLogo: ' + this.hqNewLogo);\n        } catch (e) {\n            this.logger.debug('initialize - exception: ' + e);\n        }\n    },\n\n    _checkNewLogo: function() {\n        this.logger.debug('_checkNewLogo. start.');\n        if (this.acctId) {\n            this.acctNewLogo = this.acctGr.u_customer_type.toString();\n            if (this.acctNewLogo == 'EandX') {\n                this.isAcctExpress = true;\n                this.isAcctEnterprise = true;\n            } else if (this.acctNewLogo == 'Xpress') {\n                this.isAcctExpress = true;\n            } else if (this.acctNewLogo == 'Enterprise') {\n                this.isAcctEnterprise = true;\n            }\n            this.logger.debug('_checkNewLogo - Account: ' + this.acctGr.u_number + ' Express: ' + this.isAcctExpress + ', Enterprise: ' + this.isAcctEnterprise);\n        }\n\n        this.hqNewLogo = this.hqGr.u_customer_type.toString();\n        if (this.hqNewLogo == 'EandX') {\n            this.isHqExpress = true;\n            this.isHqEnterprise = true;\n        } else if (this.hqNewLogo == 'Xpress') {\n            this.isHqExpress = true;\n        } else if (this.hqNewLogo == 'Enterprise') {\n            this.isHqEnterprise = true;\n        }\n        this.logger.debug('_checkNewLogo - HQ: ' + this.hqGr.u_d_u_n_s_number_sdmr + ' Express: ' + this.isHqExpress + ', Enterprise: ' + this.isHqEnterprise);\n    },\n\n    updateNewLogoOnOpty: function(opty) {\n        opty = opty || this.optyGr;\n        this.logger.debug('updateNewLogoOnOpty - start with opty: ' + opty.number);\n        try {\n            if (!opty.isValidRecord()) {\n                this.logger.debug('updateNewLogoOnOpty - invalid opty. Return false');\n                return false;\n            }\n            if (opty.u_logo_override && opty.u_express_logo_override) {\n                this.logger.debug('updateNewLogoOnOpty - override is set. No update needed.');\n                return true;\n            }\n            var isExpress = false;\n            var isEnterprise = false;\n            if (this.isHqExpress && this.isHqEnterprise) {\n                this.logger.debug('updateNewLogoOnOpty - HQ is penetrated. Untag opty and return.');\n                this._setNewLogoOnOpty(opty, isExpress, isEnterprise);\n                return true;\n            }\n\n            var skipExpress = this.isHqExpress || opty.u_express_logo_override;\n            var skipEnterprise = this.isHqEnterprise || opty.u_logo_override;\n\n            var li = this._getOptyLines(opty);\n\n            while (li.next() && !(skipExpress && skipEnterprise)) {\n                this.logger.debug('updateNewLogoOnOpty - Checking line: ' + li.number + '. skip Express check: ' + skipExpress + ', skip Enterprise check: ' + skipEnterprise);\n                var family3 = li.u_product_price.product.u_family_3.toString();\n\n                if (this.expressFamily3.indexOf(family3) > -1) {\n                    if (!skipExpress) {\n                        this.logger.debug('updateNewLogoOnOpty - Express found on ' + li.number);\n                        isExpress = true;\n                        skipExpress = true;\n                        continue;\n                    }\n                } else {\n                    if (!skipEnterprise && family3 != 'ServiceNow Store' && family3 != 'Technology Partner Program') {\n                        this.logger.debug('updateNewLogoOnOpty - Enterprise found on ' + li.number);\n                        isEnterprise = true;\n                        skipEnterprise = true;\n                        continue;\n                    }\n                }\n            }\n            this.logger.debug('updateNewLogoOnOpty - result: ' + opty.number + ' - isExpress? ' + isExpress + ', isEnterprise? ' + isEnterprise);\n            this._setNewLogoOnOpty(opty, isExpress, isEnterprise);\n            return true;\n        } catch (e) {\n            this.logger.debug('updateNewLogoOnOpty - exception: ' + e);\n        }\n    },\n\n    _setNewLogoOnOpty: function(opty, isExpress, isEnterprise) {\n        this.logger.debug('_setNewLogoOnOpty - start. Opty: ' + opty.number + ' isExpress: ' + isExpress + ' isEnterprise: ' + isEnterprise);\n        if (!opty.isValidRecord() || !(opty.u_express_new_logo ^ isExpress || opty.u_new_logo ^ isEnterprise)) {\n            this.logger.debug('_setNewLogoOnOpty - no update needed. Returning.');\n            return false;\n        } else {\n            if (!opty.u_express_logo_override) {\n                opty.u_express_new_logo = isExpress;\n            }\n            if (!opty.u_logo_override) {\n                opty.u_new_logo = isEnterprise;\n            }\n            //opty.setWorkflow(false);\n            opty.update();\n            this.logger.debug('_setNewLogoOnOpty - complete');\n            return true;\n        }\n    },\n\n    getOpenOptyForAcctOrHq: function(type) {\n        if (!this.hqGr.isValidRecord()) {\n            this.logger.debug('getOpenOptyForAcctOrHq - invalid HQ. Return false');\n            return false;\n        }\n\n        if (type == 'hq') {\n            this.logger.debug('getOpenOptyForAcctOrHq - start on HQ: ' + this.hqGr.u_d_u_n_s_number_sdmr);\n        } else if (this.acctId && type == 'account') {\n            this.logger.debug('getOpenOptyForAcctOrHq - start on Account: ' + this.acctGr.u_number);\n        } else {\n            this.logger.debug('getOpenOptyForAcctOrHq - invalid type ' + type + '. Return false.');\n            return false;\n        }\n        var opty = new GlideRecord('sales_opportunity');\n        opty.addQuery('skip_before_query', 'true');\n        opty.addQuery('active', true);\n        if (type == 'hq') {\n            opty.addQuery('account.u_customer_hq', this.hqGr.sys_id);\n        } else {\n            opty.addQuery('account', this.acctId);\n        }\n        opty.addQuery('type', 'IN', gs.getProperty('sls_newlogo_opty_type'));\n        var qc = opty.addQuery('u_express_logo_override', '');\n        qc.addOrCondition('u_logo_override', '');\n        opty.query();\n        this.logger.debug('getOpenOptyForAcctOrHq - complete. ' + opty.getRowCount() + ' found.');\n        return opty;\n    },\n\n\n    tagOpty: function(hqOrAcct, newLogoObj) {\n        try {\n            this.logger.debug('tagOpty - start. hqOrAcct: ' + hqOrAcct + '. HQ: ' + this.hqGr.u_d_u_n_s_number_sdmr + ', acct: ' + this.acctId);\n            if (hqOrAcct != 'hq' && hqOrAcct != 'account' || Object.keys(newLogoObj).length == 0) {\n                this.logger.debug('tagOpty - invalid hqOrAcct ' + hqOrAcct + ' or newLogoObj. Return false.');\n                return false;\n            }\n\n            var isExpress = newLogoObj['isExpress'] == true;\n            var isEnterprise = newLogoObj['isEnterprise'] == true;\n            this.logger.debug('tagOpty - isExpress: ' + isExpress + '; isEnterprise: ' + isEnterprise);\n\n            var opty = this.getOpenOptyForAcctOrHq(hqOrAcct);\n            while (opty.next()) {\n                this.updateNewLogoOnOpty(opty);\n            }\n            this.logger.debug('tagOpty - complete.');\n        } catch (e) {\n            this.logger.debug('tagOpty - exception: ' + e);\n        }\n    },\n\n    // to be removed\n    /*\n    tagOpty: function(hqOrAcct, newLogoObj) {\n        try {\n            this.logger.debug('tagOpty - start. hqOrAcct: ' + hqOrAcct + '. HQ: ' + this.hqGr.u_d_u_n_s_number_sdmr + ', acct: ' + this.acctId);\n            if (hqOrAcct != 'hq' && hqOrAcct != 'account' || Object.keys(newLogoObj).length == 0) {\n                this.logger.debug('tagOpty - invalid hqOrAcct ' + hqOrAcct + ' or newLogoObj. Return false.');\n                return false;\n            }\n\n            var isExpress = newLogoObj['isExpress'] == true;\n            var isEnterprise = newLogoObj['isEnterprise'] == true;\n            this.logger.debug('tagOpty - isExpress: ' + isExpress + '; isEnterprise: ' + isEnterprise);\n\n            var opty = this.getOpenOptyForAcctOrHq(hqOrAcct);\n            while (opty.next()) {\n                var update = false;\n                if (!opty.u_express_logo_override && opty.u_express_new_logo ^ isExpress) {\n                    opty.u_express_new_logo = isExpress;\n                    update = true;\n                    this.logger.debug('tagOpty - update express to ' + isExpress + ' on ' + opty.number);\n                }\n                if (!opty.u_logo_override && opty.u_new_logo ^ isEnterprise) {\n                    opty.u_new_logo = isEnterprise;\n                    update = true;\n                    this.logger.debug('tagOpty - update Enterprise to ' + isEnterprise + ' on ' + opty.number);\n                }\n                if (update) {\n                    opty.setWorkflow(false);\n                    opty.update();\n                }\n            }\n            this.logger.debug('tagOpty - complete.');\n        } catch (e) {\n            this.logger.debug('tagOpty - exception: ' + e);\n        }\n    },\n    */\n    _updateNewLogoForHq: function(forceUpdateAllOpty) {\n        this.logger.debug('_updateNewLogoForHq - start.');\n        var isAcctExpress, isAcctEnterprise, isHqExpress, isHqEnterprise, skipExpress, skipEnterprise, updateHq, updateAcct;\n        isAcctExpress = isAcctEnterprise = isHqExpress = isHqEnterprise = skipExpress = skipEnterprise = updateHq = updateAcct = false;\n\n        var cntrLi4Hq = []; // contract lines that contrubite to HQ product classification\n        var cntrLi4Acct = []; // contract lines that contrubite to account product classification\n\n        this.logger.debug('_updateNewLogoForHq - getting contract lines for HQ ' + this.hqGr.u_d_u_n_s_number_sdmr);\n        var cntrLi = this.getAllActiveContractLinesForHq();\n        while (cntrLi.next() && !(skipExpress && skipEnterprise)) {\n            this.logger.debug('_updateNewLogoForHq - checking cntr line: ' + cntrLi.number);\n            var family3 = cntrLi.product_price.product.u_family_3.toString();\n            var acctId = cntrLi.contract.account + '';\n            if (this.expressFamily3.indexOf(family3) > -1) {\n                if (!skipExpress) {\n                    if (!isHqExpress) {\n                        isHqExpress = true;\n                        cntrLi4Hq.push(cntrLi.number + '');\n                    }\n                    this.logger.debug('_updateNewLogoForHq - Express found for HQ on ' + cntrLi.number);\n                    if (this.acctId && acctId == this.acctId) {\n                        isAcctExpress = true;\n                        skipExpress = true;\n                        cntrLi4Acct.push(cntrLi.number + '');\n                        this.logger.debug('_updateNewLogoForHq - Express found for Acct on ' + cntrLi.number);\n                    }\n                    continue;\n                }\n            } else {\n                if (!skipEnterprise && family3 != 'ServiceNow Store' && family3 != 'Technology Partner Program') {\n                    if (!isHqEnterprise) {\n                        isHqEnterprise = true;\n                        cntrLi4Hq.push(cntrLi.number + '');\n                    }\n                    this.logger.debug('_updateNewLogoForHq - Enterprise found for HQ on ' + cntrLi.number);\n                    if (this.acctId && acctId == this.acctId) {\n                        isAcctEnterprise = true;\n                        skipEnterprise = true;\n                        cntrLi4Acct.push(cntrLi.number + '');\n                        this.logger.debug('_updateNewLogoForHq - Enterprise found for Acct on ' + cntrLi.number);\n                    }\n                    continue;\n                }\n            }\n        }\n        if (this.acctId) {\n            updateAcct = isAcctExpress ^ this.isAcctExpress || isAcctEnterprise ^ this.isAcctEnterprise;\n        }\n        this.logger.debug('_updateNewLogoForHq - updateAcct: ' + updateAcct);\n        if (updateAcct) {\n            this.isAcctExpress = isAcctExpress;\n            this.isAcctEnterprise = isAcctEnterprise;\n            var acctResult = this.getNewLogoResult(this.isAcctExpress, this.isAcctEnterprise);\n            this.acctGr.u_customer_type = acctResult;\n            this.acctGr.update();\n            this.logger.debug('updateHqNewLogoFromContracts - account updated.');\n            this.logHistory('account', this.acctGr, cntrLi4Acct.join(), acctResult);\n        }\n\n        updateHq = isHqExpress ^ this.isHqExpress || isHqEnterprise ^ this.isHqEnterprise;\n        this.logger.debug('_updateNewLogoForHq - updateHq: ' + updateHq);\n        if (updateHq) {\n            this.isHqExpress = isHqExpress;\n            this.isHqEnterprise = isHqEnterprise;\n            var hqResult = this.getNewLogoResult(this.isHqExpress, this.isHqEnterprise);\n            this.hqGr.u_customer_type = hqResult;\n            this.hqGr.update();\n            this.logger.debug('_updateNewLogoForHq - HQ updated.');\n            this.logHistory('hq', this.hqGr, cntrLi4Hq.join(), hqResult);\n        }\n\n        if (updateHq || forceUpdateAllOpty === true) {\n            this.tagOpty('hq', { 'isExpress': !isHqExpress, 'isEnterprise': !isHqEnterprise });\n        }\n    },\n\n    _updateNewLogoForAcct: function() {\n        this.logger.debug('_updateNewLogoForAcct - start.');\n        var isAcctExpress, isAcctEnterprise, skipExpress, skipEnterprise, updateAcct;\n        isAcctExpress = isAcctEnterprise = skipExpress = skipEnterprise = updateAcct = false;\n\n        var cntrLi4Acct = []; // contract lines that contrubite to account product classification\n\n        this.logger.debug('_updateNewLogoForAcct - getting contract lines for account ' + this.acctGr.u_number);\n        var cntrLi = this.getAllActiveContractLinesForAcct();\n        while (cntrLi.next() && !(skipExpress && skipEnterprise)) {\n            this.logger.debug('_updateNewLogoForAcct - checking cntr line: ' + cntrLi.number);\n            var family3 = cntrLi.product_price.product.u_family_3.toString();\n            if (this.expressFamily3.indexOf(family3) > -1) {\n                if (!skipExpress) {\n                    isAcctExpress = true;\n                    skipExpress = true;\n                    cntrLi4Acct.push(cntrLi.number + '');\n                    this.logger.debug('_updateNewLogoForAcct - Express found for Acct on ' + cntrLi.number);\n                    continue;\n                }\n            } else {\n                if (!skipEnterprise && family3 != 'ServiceNow Store' && family3 != 'Technology Partner Program') {\n                    isAcctEnterprise = true;\n                    skipEnterprise = true;\n                    cntrLi4Acct.push(cntrLi.number + '');\n                    this.logger.debug('_updateNewLogoForAcct - Enterprise found for Acct on ' + cntrLi.number);\n                    continue;\n                }\n            }\n        }\n        updateAcct = isAcctExpress ^ this.isAcctExpress || isAcctEnterprise ^ this.isAcctEnterprise;\n        this.logger.debug('_updateNewLogoForAcct - updateAcct: ' + this.acctGr.u_number + ': ' + updateAcct);\n        if (updateAcct) {\n            this.isAcctExpress = isAcctExpress;\n            this.isAcctEnterprise = isAcctEnterprise;\n            var acctResult = this.getNewLogoResult(this.isAcctExpress, this.isAcctEnterprise);\n            this.acctGr.u_customer_type = acctResult;\n            this.acctGr.update();\n            this.logger.debug('updateHqNewLogoFromContracts - account updated.');\n            this.logHistory('account', this.acctGr, cntrLi4Acct.join(), acctResult);\n        }\n        this.logger.debug('_updateNewLogoForAcct - complete.');\n    },\n\n    updateNewLogoFromContracts: function(forceUpdateAllOpty) {\n        try {\n            this.logger.debug('updateNewLogoFromContracts - start.');\n            if (this.hqGr.isValidRecord()) {\n                this._updateNewLogoForHq(forceUpdateAllOpty);\n            } else if (this.acctGr.isValidRecord()) {\n                this._updateNewLogoForAcct();\n            }\n            this.logger.debug('updateHqNewLogoFromContracts - complete.');\n        } catch (e) {\n            this.logger.debug('updateNewLogoFromContracts - exception: ' + e);\n        }\n    },\n\n    getNewLogoResult: function(isExpress, isEnterprise) {\n        var result = 'Other';\n        if (isExpress && isEnterprise) {\n            result = 'EandX';\n        } else if (isExpress) {\n            result = 'Xpress';\n        } else if (isEnterprise) {\n            result = 'Enterprise';\n        }\n        return result;\n    },\n\n    getAllActiveContractLinesForHq: function() {\n        this.logger.debug('getAllActiveContractLinesForHq - start.');\n        if (!this.hqGr.isValidRecord()) {\n            return false;\n        }\n        var cntrLi = new GlideRecord('sales_contract_item');\n        cntrLi.addQuery('contract.active', true);\n        cntrLi.addQuery('quantity', '>', 0);\n        cntrLi.addQuery('total_value_usd', '>', 0);\n        cntrLi.addQuery('contract.account.u_customer_hq', this.hqGr.sys_id);\n        cntrLi.addQuery('product_price.product.u_category', '0');\n        cntrLi.query();\n        this.logger.debug('getAllActiveContractLinesForHq - complete.');\n        return cntrLi;\n    },\n\n    getAllActiveContractLinesForAcct: function() {\n        this.logger.debug('getAllActiveContractLinesForAcct - start.');\n        if (!this.acctGr.isValidRecord()) {\n            return false;\n        }\n        var cntrLi = new GlideRecord('sales_contract_item');\n        cntrLi.addQuery('contract.active', true);\n        cntrLi.addQuery('quantity', '>', 0);\n        cntrLi.addQuery('total_value_usd', '>', 0);\n        cntrLi.addQuery('contract.account', this.acctGr.sys_id);\n        cntrLi.addQuery('product_price.product.u_category', '0');\n        cntrLi.query();\n        this.logger.debug('getAllActiveContractLinesForAcct - complete.');\n        return cntrLi;\n    },\n\n    // Get subscription lines with quantity and acv greater than zero\n    _getOptyLines: function(opty) {\n        if (!opty || !opty.isValidRecord()) {\n            return false;\n        }\n        var li = new GlideRecord('sales_opportunity_item');\n        li.addQuery(\"skip_before_query\", \"true\");\n        li.addQuery('opportunity', opty.sys_id);\n        li.addQuery('u_product_price.product.u_category', '0');\n        li.addQuery('quantity', '>', 0);\n        li.addQuery('u_total_value_amount_usd', '>', 0);\n        li.query();\n        return li;\n    },\n\n\n    logHistory: function(type, record, contractLines, result) {\n        try {\n            this.logger.debug('logHistory - start. type: ' + type + ', record: ' + record.sys_id + ', contract lines: ' + contractLines + ', result: ' + result);\n            if (type != 'account' && type != 'hq' || !record.isValidRecord() || !result) {\n                this.logger.debug('logHistory - something is wrong. Return false');\n                return false;\n            }\n            var gr = new GlideRecord('u_new_logo_history');\n            gr.newRecord();\n            if (type == 'account') {\n                gr.u_account = record.sys_id;\n                gr.u_customer_hq = this.hqGr.sys_id;\n            } else if (type == 'hq') {\n                gr.u_customer_hq = record.sys_id;\n            } else {\n                this.logger.debug('logHistory - error.');\n                return false;\n            }\n            gr.u_contract_lines_with_new_logo = contractLines;\n            gr.u_customer_type = result;\n            gr.insert();\n\n            this.logger.debug('logHistory - complete.');\n\n        } catch (e) {\n            this.logger.debug('logHistory - exception: ' + e);\n        }\n    },\n\n    type: 'SLS_NewLogoHelper'\n};\n\nSLS_NewLogoHelper.getHqNewLogo = function(acct) {\n    if (!acct || !acct.isValidRecord() || !acct.u_customer_hq) {\n        return false;\n    }\n    return acct.u_customer_hq.u_customer_type.toString();\n};\n\nSLS_NewLogoHelper.isHqNewLogo = function(acct, type) {\n    if (!acct || !acct.isValidRecord() || !type || !acct.u_customer_hq) {\n        return false;\n    }\n    var hqNewLogo = acct.u_customer_hq.u_customer_type.toString();\n    return hqNewLogo.indexOf(type) > -1;\n};\n\nSLS_NewLogoHelper.isNewLogoCheckNeededForProduct = function(product) {\n    var logger = NewLogoLogger.getInstance('SLS_NewLogoHelper');\n    logger.debug('isNewLogoCheckNeeded - start on product ' + product.sys_id);\n    var result = false;\n    //var expressFamily3 = 'Express, Express Discovery, Express Discovery, ServiceNow Store';\n    var expressFamily3 = ['Express', 'Express Discovery', 'Express Discovery', 'ServiceNow Store'];\n    var family3 = product.u_family_3.toString();\n    var prdCategory = product.u_category.toString();\n    if (!family3) {\n        return false;\n    }\n    if ((expressFamily3.indexOf(family3) > -1) || prdCategory === '0') {\n        result = true;\n    }\n    logger.debug('isNewLogoCheckNeeded - complete with result: ' + result);\n    return result;\n};\n\nSLS_NewLogoHelper.isNewLogoCheckNeededForContract = function(contract) {\n    var logger = NewLogoLogger.getInstance('SLS_NewLogoHelper');\n    logger.debug('isNewLogoCheckNeeded - start on contract ' + contract.contract_number);\n    if (!contract.isValidRecord()) {\n        logger.debug('isNewLogoCheckNeeded - invalid contract. Return false');\n        return false;\n    }\n\n    var cntrLi = new GlideRecord('sales_contract_item');\n    cntrLi.addQuery('contract', contract.sys_id);\n    cntrLi.addQuery('product_price.product.u_category', '0');\n    cntrLi.query();\n\n    return cntrLi.hasNext();\n};",
					"file": "/Users/andy.liu/Documents/CRM/SLS_NewLogoHelper.js",
					"file_size": 22864,
					"file_write_time": 131497980180000000,
					"settings":
					{
						"buffer_size": 22864,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/Users/andy.liu/Documents/itsm_notes.txt",
				"/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
				"/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap"
			],
			"find":
			{
				"height": 31.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"commi"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 1,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/Users/andy.liu/Documents/machineLearning/ml-class/keras-cnn-2.py",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1279,
								"regions":
								{
								},
								"selection":
								[
									[
										295,
										295
									]
								],
								"settings":
								{
									"syntax": "Packages/Python/Python.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 88.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/Users/andy.liu/Documents/itsm_notes.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 252,
								"regions":
								{
								},
								"selection":
								[
									[
										252,
										252
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/Users/andy.liu/Documents/CRM/SSASplitAdjustorUtil.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 44189,
								"regions":
								{
								},
								"selection":
								[
									[
										37025,
										37025
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 20103.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 3,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 309,
								"regions":
								{
								},
								"selection":
								[
									[
										309,
										309
									]
								],
								"settings":
								{
									"auto_name": "parent opty: O1, rep: kevin, account territory: T1",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/Users/andy.liu/Documents/CRM/SLS_NewLogoHelper.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 22864,
								"regions":
								{
								},
								"selection":
								[
									[
										19581,
										19581
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 8893.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 31.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0 -1920 70 1680 957 -1920 -30 1920 1057 ",
			"project": "",
			"replace":
			{
				"height": 58.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": false,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 18,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"buffers":
			[
				{
					"contents": "/*\nOn OS X, basic text manipulations (left, right, command+left, etc) make use of the system key bindings,\nand don't need to be repeated here. Anything listed here will take precedence, however.\n*/\n[\n\t{ \"keys\": [\"super+shift+n\"], \"command\": \"new_window\" },\n\t{ \"keys\": [\"super+shift+w\"], \"command\": \"close_window\" },\n\t{ \"keys\": [\"super+o\"], \"command\": \"prompt_open\" },\n\t{ \"keys\": [\"super+shift+t\"], \"command\": \"reopen_last_file\" },\n\t{ \"keys\": [\"super+alt+up\"], \"command\": \"switch_file\", \"args\": {\"extensions\": [\"cpp\", \"cxx\", \"cc\", \"c\", \"hpp\", \"hxx\", \"hh\", \"h\", \"ipp\", \"inl\", \"m\", \"mm\"]} },\n\t{ \"keys\": [\"super+n\"], \"command\": \"new_file\" },\n\t{ \"keys\": [\"super+s\"], \"command\": \"save\" },\n\t{ \"keys\": [\"super+shift+s\"], \"command\": \"prompt_save_as\" },\n\t{ \"keys\": [\"super+alt+s\"], \"command\": \"save_all\" },\n\t{ \"keys\": [\"super+w\"], \"command\": \"close\" },\n\n\t{ \"keys\": [\"super+k\", \"super+b\"], \"command\": \"toggle_side_bar\" },\n\t{ \"keys\": [\"super+ctrl+f\"], \"command\": \"toggle_full_screen\" },\n\t{ \"keys\": [\"super+ctrl+shift+f\"], \"command\": \"toggle_distraction_free\" },\n\n\t{ \"keys\": [\"super+z\"], \"command\": \"undo\" },\n\t{ \"keys\": [\"super+shift+z\"], \"command\": \"redo\" },\n\t{ \"keys\": [\"super+y\"], \"command\": \"redo_or_repeat\" },\n\t{ \"keys\": [\"super+u\"], \"command\": \"soft_undo\" },\n\t{ \"keys\": [\"super+shift+u\"], \"command\": \"soft_redo\" },\n\n\t{ \"keys\": [\"super+x\"], \"command\": \"cut\" },\n\t{ \"keys\": [\"super+c\"], \"command\": \"copy\" },\n\t{ \"keys\": [\"super+v\"], \"command\": \"paste\" },\n\t{ \"keys\": [\"super+shift+v\"], \"command\": \"paste_and_indent\" },\n\t{ \"keys\": [\"super+k\", \"super+v\"], \"command\": \"paste_from_history\" },\n\t{ \"keys\": [\"super+option+v\"], \"command\": \"paste_from_history\" },\n\n\t{ \"keys\": [\"ctrl+alt+left\"], \"command\": \"move\", \"args\": {\"by\": \"subwords\", \"forward\": false} },\n\t{ \"keys\": [\"ctrl+alt+right\"], \"command\": \"move\", \"args\": {\"by\": \"subword_ends\", \"forward\": true} },\n\t{ \"keys\": [\"ctrl+alt+shift+left\"], \"command\": \"move\", \"args\": {\"by\": \"subwords\", \"forward\": false, \"extend\": true} },\n\t{ \"keys\": [\"ctrl+alt+shift+right\"], \"command\": \"move\", \"args\": {\"by\": \"subword_ends\", \"forward\": true, \"extend\": true} },\n\n\t{ \"keys\": [\"ctrl+left\"], \"command\": \"move\", \"args\": {\"by\": \"subwords\", \"forward\": false} },\n\t{ \"keys\": [\"ctrl+right\"], \"command\": \"move\", \"args\": {\"by\": \"subword_ends\", \"forward\": true} },\n\t{ \"keys\": [\"ctrl+shift+left\"], \"command\": \"move\", \"args\": {\"by\": \"subwords\", \"forward\": false, \"extend\": true} },\n\t{ \"keys\": [\"ctrl+shift+right\"], \"command\": \"move\", \"args\": {\"by\": \"subword_ends\", \"forward\": true, \"extend\": true} },\n\n\t{ \"keys\": [\"ctrl+alt+up\"], \"command\": \"scroll_lines\", \"args\": {\"amount\": 1.0} },\n\t{ \"keys\": [\"ctrl+alt+down\"], \"command\": \"scroll_lines\", \"args\": {\"amount\": -1.0} },\n\n\t{ \"keys\": [\"ctrl+shift+up\"], \"command\": \"select_lines\", \"args\": {\"forward\": false} },\n\t{ \"keys\": [\"ctrl+shift+down\"], \"command\": \"select_lines\", \"args\": {\"forward\": true} },\n\n\t{ \"keys\": [\"super+shift+[\"], \"command\": \"prev_view\" },\n\t{ \"keys\": [\"super+shift+]\"], \"command\": \"next_view\" },\n\t{ \"keys\": [\"super+alt+left\"], \"command\": \"prev_view\" },\n\t{ \"keys\": [\"super+alt+right\"], \"command\": \"next_view\" },\n\n\t{ \"keys\": [\"ctrl+tab\"], \"command\": \"next_view_in_stack\" },\n\t{ \"keys\": [\"ctrl+shift+tab\"], \"command\": \"prev_view_in_stack\" },\n\n\t{ \"keys\": [\"super+a\"], \"command\": \"select_all\" },\n\t{ \"keys\": [\"super+shift+l\"], \"command\": \"split_selection_into_lines\" },\n\t{ \"keys\": [\"escape\"], \"command\": \"single_selection\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"num_selections\", \"operator\": \"not_equal\", \"operand\": 1 }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"clear_fields\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"has_next_field\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"clear_fields\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"has_prev_field\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"hide_panel\", \"args\": {\"cancel\": true},\n\t\t\"context\":\n\t\t[\n\t\t\t{ \"key\": \"panel_visible\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"hide_overlay\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"overlay_visible\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"hide_popup\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"popup_visible\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"escape\"], \"command\": \"hide_auto_complete\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"auto_complete_visible\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"super+]\"], \"command\": \"indent\" },\n\t{ \"keys\": [\"super+[\"], \"command\": \"unindent\" },\n\n\t{ \"keys\": [\"tab\"], \"command\": \"insert_best_completion\", \"args\": {\"default\": \"\\t\", \"exact\": true} },\n\t{ \"keys\": [\"tab\"], \"command\": \"insert_best_completion\", \"args\": {\"default\": \"\\t\", \"exact\": false},\n\t\t\"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"not_regex_match\", \"operand\": \".*\\\\b[0-9]+$\", \"match_all\": true },\n\t\t]\n\t},\n\t{ \"keys\": [\"tab\"], \"command\": \"replace_completion_with_next_completion\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"last_command\", \"operator\": \"equal\", \"operand\": \"insert_best_completion\" },\n\t\t\t{ \"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"tab\"], \"command\": \"reindent\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \"^$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_match\", \"operand\": \"^$\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"tab\"], \"command\": \"indent\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"text\", \"operator\": \"regex_contains\", \"operand\": \"\\n\" }\n\t\t]\n\t},\n\t{ \"keys\": [\"tab\"], \"command\": \"next_field\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"has_next_field\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"tab\"], \"command\": \"commit_completion\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"auto_complete_visible\" },\n\t\t\t{ \"key\": \"setting.auto_complete_commit_on_tab\" }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"shift+tab\"], \"command\": \"insert\", \"args\": {\"characters\": \"\\t\"} },\n\t{ \"keys\": [\"shift+tab\"], \"command\": \"unindent\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.shift_tab_unindent\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"shift+tab\"], \"command\": \"unindent\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \"^[\\t ]*\" }\n\t\t]\n\t},\n\t{ \"keys\": [\"shift+tab\"], \"command\": \"unindent\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"text\", \"operator\": \"regex_contains\", \"operand\": \"\\n\" }\n\t\t]\n\t},\n\t{ \"keys\": [\"shift+tab\"], \"command\": \"prev_field\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"has_prev_field\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"super+l\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"line\"} },\n\t{ \"keys\": [\"super+d\"], \"command\": \"find_under_expand\" },\n\t{ \"keys\": [\"super+k\", \"super+d\"], \"command\": \"find_under_expand_skip\" },\n\t{ \"keys\": [\"super+shift+space\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"scope\"} },\n\t{ \"keys\": [\"ctrl+shift+m\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"brackets\"} },\n\t{ \"keys\": [\"ctrl+m\"], \"command\": \"move_to\", \"args\": {\"to\": \"brackets\"} },\n\t{ \"keys\": [\"super+shift+j\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"indentation\"} },\n\t{ \"keys\": [\"super+shift+a\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"tag\"} },\n\n\t{ \"keys\": [\"super+alt+.\"], \"command\": \"close_tag\" },\n\n\t{ \"keys\": [\"ctrl+q\"], \"command\": \"toggle_record_macro\" },\n\t{ \"keys\": [\"ctrl+shift+q\"], \"command\": \"run_macro\" },\n\n\t{ \"keys\": [\"super+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line.sublime-macro\"} },\n\t{ \"keys\": [\"super+shift+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line Before.sublime-macro\"} },\n\t{ \"keys\": [\"enter\"], \"command\": \"commit_completion\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"auto_complete_visible\" },\n\t\t\t{ \"key\": \"setting.auto_complete_commit_on_tab\", \"operand\": false }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"super+t\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"show_files\": true} },\n\t{ \"keys\": [\"super+p\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"show_files\": true} },\n\t{ \"keys\": [\"super+shift+p\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"command_palette\"} },\n\t{ \"keys\": [\"super+ctrl+p\"], \"command\": \"prompt_select_workspace\" },\n\t{ \"keys\": [\"super+r\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \"@\"} },\n\t{ \"keys\": [\"ctrl+g\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \":\"} },\n\t{ \"keys\": [\"f12\"], \"command\": \"goto_definition\" },\n\t{ \"keys\": [\"super+alt+down\"], \"command\": \"goto_definition\" },\n\t{ \"keys\": [\"super+shift+r\"], \"command\": \"goto_symbol_in_project\" },\n\t{ \"keys\": [\"ctrl+minus\"], \"command\": \"jump_back\" },\n\t{ \"keys\": [\"ctrl+shift+minus\"], \"command\": \"jump_forward\" },\n\n\t{ \"keys\": [\"super+i\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"incremental_find\", \"reverse\": false} },\n\t{ \"keys\": [\"super+shift+i\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"incremental_find\", \"reverse\": true} },\n\t{ \"keys\": [\"super+f\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"find\", \"reverse\": false} },\n\t{ \"keys\": [\"super+alt+f\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"replace\", \"reverse\": false} },\n\t{ \"keys\": [\"super+alt+e\"], \"command\": \"replace_next\" },\n\t{ \"keys\": [\"super+g\"], \"command\": \"find_next\" },\n\t{ \"keys\": [\"super+shift+g\"], \"command\": \"find_prev\" },\n\t{ \"keys\": [\"super+e\"], \"command\": \"slurp_find_string\" },\n\t{ \"keys\": [\"super+shift+e\"], \"command\": \"slurp_replace_string\" },\n\n\t{ \"keys\": [\"alt+super+g\"], \"command\": \"find_under\" },\n\t{ \"keys\": [\"shift+alt+super+g\"], \"command\": \"find_under_prev\" },\n\t{ \"keys\": [\"ctrl+super+g\"], \"command\": \"find_all_under\" },\n\n\t{ \"keys\": [\"super+shift+f\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"find_in_files\"} },\n\t{ \"keys\": [\"f4\"], \"command\": \"next_result\" },\n\t{ \"keys\": [\"shift+f4\"], \"command\": \"prev_result\" },\n\n\t{ \"keys\": [\"f6\"], \"command\": \"toggle_setting\", \"args\": {\"setting\": \"spell_check\"} },\n\t{ \"keys\": [\"ctrl+f6\"], \"command\": \"next_misspelling\" },\n\t{ \"keys\": [\"ctrl+shift+f6\"], \"command\": \"prev_misspelling\" },\n\n\t{ \"keys\": [\"ctrl+super+up\"], \"command\": \"swap_line_up\" },\n\t{ \"keys\": [\"ctrl+super+down\"], \"command\": \"swap_line_down\" },\n\n\t{ \"keys\": [\"ctrl+backspace\"], \"command\": \"delete_word\", \"args\": { \"forward\": false, \"sub_words\": true } },\n\t{ \"keys\": [\"ctrl+delete\"], \"command\": \"delete_word\", \"args\": { \"forward\": true, \"sub_words\": true } },\n\n\t{ \"keys\": [\"super+forward_slash\"], \"command\": \"toggle_comment\", \"args\": { \"block\": false } },\n\t{ \"keys\": [\"super+alt+forward_slash\"], \"command\": \"toggle_comment\", \"args\": { \"block\": true } },\n\n\t{ \"keys\": [\"super+j\"], \"command\": \"join_lines\" },\n\t{ \"keys\": [\"super+shift+d\"], \"command\": \"duplicate_line\" },\n\n\t{ \"keys\": [\"ctrl+backquote\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"console\", \"toggle\": true} },\n\n\t{ \"keys\": [\"ctrl+space\"], \"command\": \"auto_complete\" },\n\t{ \"keys\": [\"ctrl+space\"], \"command\": \"replace_completion_with_auto_complete\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"last_command\", \"operator\": \"equal\", \"operand\": \"insert_best_completion\" },\n\t\t\t{ \"key\": \"auto_complete_visible\", \"operator\": \"equal\", \"operand\": false },\n\t\t\t{ \"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"super+alt+p\"], \"command\": \"show_scope_name\" },\n\t{ \"keys\": [\"ctrl+shift+p\"], \"command\": \"show_scope_name\" },\n\n\t{ \"keys\": [\"f7\"], \"command\": \"build\" },\n\t{ \"keys\": [\"super+b\"], \"command\": \"build\" },\n\t{ \"keys\": [\"super+shift+b\"], \"command\": \"build\", \"args\": {\"select\": true} },\n\n\t{ \"keys\": [\"ctrl+c\"], \"command\": \"cancel_build\" },\n\n\t{ \"keys\": [\"ctrl+t\"], \"command\": \"transpose\" },\n\n\t{ \"keys\": [\"f5\"], \"command\": \"sort_lines\", \"args\": {\"case_sensitive\": false} },\n\t{ \"keys\": [\"ctrl+f5\"], \"command\": \"sort_lines\", \"args\": {\"case_sensitive\": true} },\n\n\t// Auto-pair quotes\n\t{ \"keys\": [\"\\\"\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"\\\"$0\\\"\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|>|$)\", \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"not_regex_contains\", \"operand\": \"[\\\"a-zA-Z0-9_]$\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"\\\"\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"\\\"${0:$SELECTION}\\\"\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"\\\"\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\"\", \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\", \"match_all\": true },\n\t\t]\n\t},\n\t{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\"$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\"\", \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\", \"match_all\": true },\n\t\t]\n\t},\n\n\t// Auto-pair single quotes\n\t{ \"keys\": [\"'\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"'$0'\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|>|$)\", \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"not_regex_contains\", \"operand\": \"['a-zA-Z0-9_]$\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"'\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"'${0:$SELECTION}'\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"'\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^'\", \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\", \"match_all\": true },\n\t\t]\n\t},\n\t{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"'$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^'\", \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\", \"match_all\": true },\n\t\t]\n\t},\n\n\t// Auto-pair brackets\n\t{ \"keys\": [\"(\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"($0)\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|;|\\\\}|$)\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"(\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"(${0:$SELECTION})\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\")\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\)\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\($\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\)\", \"match_all\": true }\n\t\t]\n\t},\n\n\t// Auto-pair square brackets\n\t{ \"keys\": [\"[\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"[$0]\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|;|\\\\}|$)\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"[\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"[${0:$SELECTION}]\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"]\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\]\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\[$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\]\", \"match_all\": true }\n\t\t]\n\t},\n\n\t// Auto-pair curly brackets\n\t{ \"keys\": [\"{\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"{$0}\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|$)\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"{\"], \"command\": \"wrap_block\", \"args\": {\"begin\": \"{\", \"end\": \"}\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"indented_block\", \"match_all\": true },\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_match\", \"operand\": \"^$\", \"match_all\": true },\n\t\t]\n\t},\n\t{ \"keys\": [\"{\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"{${0:$SELECTION}}\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"}\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line in Braces.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"shift+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line in Braces.sublime-macro\"}, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n\t\t]\n\t},\n\n\t{ \"keys\": [\"enter\"], \"command\": \"auto_indent_tag\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"punctuation.definition.tag.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \">$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^</\", \"match_all\": true },\n\t\t]\n\t},\n\t{ \"keys\": [\"shift+enter\"], \"command\": \"auto_indent_tag\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n\t\t\t{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"punctuation.definition.tag.begin\", \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \">$\", \"match_all\": true },\n\t\t\t{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^</\", \"match_all\": true },\n\t\t]\n\t},\n\n\t{\n\t\t\"keys\": [\"super+alt+1\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 1.0],\n\t\t\t\"rows\": [0.0, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"super+alt+2\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 0.5, 1.0],\n\t\t\t\"rows\": [0.0, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1], [1, 0, 2, 1]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"super+alt+3\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 0.33, 0.66, 1.0],\n\t\t\t\"rows\": [0.0, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"super+alt+4\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 0.25, 0.5, 0.75, 1.0],\n\t\t\t\"rows\": [0.0, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1], [3, 0, 4, 1]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"super+alt+shift+2\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 1.0],\n\t\t\t\"rows\": [0.0, 0.5, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1], [0, 1, 1, 2]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"super+alt+shift+3\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 1.0],\n\t\t\t\"rows\": [0.0, 0.33, 0.66, 1.0],\n\t\t\t\"cells\": [[0, 0, 1, 1], [0, 1, 1, 2], [0, 2, 1, 3]]\n\t\t}\n\t},\n\t{\n\t\t\"keys\": [\"super+alt+5\"],\n\t\t\"command\": \"set_layout\",\n\t\t\"args\":\n\t\t{\n\t\t\t\"cols\": [0.0, 0.5, 1.0],\n\t\t\t\"rows\": [0.0, 0.5, 1.0],\n\t\t\t\"cells\":\n\t\t\t[\n\t\t\t\t[0, 0, 1, 1], [1, 0, 2, 1],\n\t\t\t\t[0, 1, 1, 2], [1, 1, 2, 2]\n\t\t\t]\n\t\t}\n\t},\n\t{ \"keys\": [\"ctrl+1\"], \"command\": \"focus_group\", \"args\": { \"group\": 0 } },\n\t{ \"keys\": [\"ctrl+2\"], \"command\": \"focus_group\", \"args\": { \"group\": 1 } },\n\t{ \"keys\": [\"ctrl+3\"], \"command\": \"focus_group\", \"args\": { \"group\": 2 } },\n\t{ \"keys\": [\"ctrl+4\"], \"command\": \"focus_group\", \"args\": { \"group\": 3 } },\n\t{ \"keys\": [\"ctrl+5\"], \"command\": \"focus_group\", \"args\": { \"group\": 4 } },\n\t{ \"keys\": [\"ctrl+6\"], \"command\": \"focus_group\", \"args\": { \"group\": 5 } },\n\t{ \"keys\": [\"ctrl+7\"], \"command\": \"focus_group\", \"args\": { \"group\": 6 } },\n\t{ \"keys\": [\"ctrl+8\"], \"command\": \"focus_group\", \"args\": { \"group\": 7 } },\n\t{ \"keys\": [\"ctrl+9\"], \"command\": \"focus_group\", \"args\": { \"group\": 8 } },\n\t{ \"keys\": [\"ctrl+shift+1\"], \"command\": \"move_to_group\", \"args\": { \"group\": 0 } },\n\t{ \"keys\": [\"ctrl+shift+2\"], \"command\": \"move_to_group\", \"args\": { \"group\": 1 } },\n\t{ \"keys\": [\"ctrl+shift+3\"], \"command\": \"move_to_group\", \"args\": { \"group\": 2 } },\n\t{ \"keys\": [\"ctrl+shift+4\"], \"command\": \"move_to_group\", \"args\": { \"group\": 3 } },\n\t{ \"keys\": [\"ctrl+shift+5\"], \"command\": \"move_to_group\", \"args\": { \"group\": 4 } },\n\t{ \"keys\": [\"ctrl+shift+6\"], \"command\": \"move_to_group\", \"args\": { \"group\": 5 } },\n\t{ \"keys\": [\"ctrl+shift+7\"], \"command\": \"move_to_group\", \"args\": { \"group\": 6 } },\n\t{ \"keys\": [\"ctrl+shift+8\"], \"command\": \"move_to_group\", \"args\": { \"group\": 7 } },\n\t{ \"keys\": [\"ctrl+shift+9\"], \"command\": \"move_to_group\", \"args\": { \"group\": 8 } },\n\t{ \"keys\": [\"ctrl+0\"], \"command\": \"focus_side_bar\" },\n\n\t{ \"keys\": [\"super+k\", \"super+up\"], \"command\": \"new_pane\" },\n\t{ \"keys\": [\"super+k\", \"super+shift+up\"], \"command\": \"new_pane\", \"args\": {\"move\": false} },\n\t{ \"keys\": [\"super+k\", \"super+down\"], \"command\": \"close_pane\" },\n\t{ \"keys\": [\"super+k\", \"super+left\"], \"command\": \"focus_neighboring_group\", \"args\": {\"forward\": false} },\n\t{ \"keys\": [\"super+k\", \"super+right\"], \"command\": \"focus_neighboring_group\" },\n\t{ \"keys\": [\"super+k\", \"super+shift+left\"], \"command\": \"move_to_neighboring_group\", \"args\": {\"forward\": false} },\n\t{ \"keys\": [\"super+k\", \"super+shift+right\"], \"command\": \"move_to_neighboring_group\" },\n\n\t{ \"keys\": [\"super+1\"], \"command\": \"select_by_index\", \"args\": { \"index\": 0 } },\n\t{ \"keys\": [\"super+2\"], \"command\": \"select_by_index\", \"args\": { \"index\": 1 } },\n\t{ \"keys\": [\"super+3\"], \"command\": \"select_by_index\", \"args\": { \"index\": 2 } },\n\t{ \"keys\": [\"super+4\"], \"command\": \"select_by_index\", \"args\": { \"index\": 3 } },\n\t{ \"keys\": [\"super+5\"], \"command\": \"select_by_index\", \"args\": { \"index\": 4 } },\n\t{ \"keys\": [\"super+6\"], \"command\": \"select_by_index\", \"args\": { \"index\": 5 } },\n\t{ \"keys\": [\"super+7\"], \"command\": \"select_by_index\", \"args\": { \"index\": 6 } },\n\t{ \"keys\": [\"super+8\"], \"command\": \"select_by_index\", \"args\": { \"index\": 7 } },\n\t{ \"keys\": [\"super+9\"], \"command\": \"select_by_index\", \"args\": { \"index\": 8 } },\n\t{ \"keys\": [\"super+0\"], \"command\": \"select_by_index\", \"args\": { \"index\": 9 } },\n\n\t{ \"keys\": [\"f2\"], \"command\": \"next_bookmark\" },\n\t{ \"keys\": [\"shift+f2\"], \"command\": \"prev_bookmark\" },\n\t{ \"keys\": [\"super+f2\"], \"command\": \"toggle_bookmark\" },\n\t{ \"keys\": [\"super+shift+f2\"], \"command\": \"clear_bookmarks\" },\n\t{ \"keys\": [\"alt+f2\"], \"command\": \"select_all_bookmarks\" },\n\n\t{ \"keys\": [\"ctrl+r\"], \"command\": \"next_bookmark\" },\n\t{ \"keys\": [\"ctrl+shift+r\"], \"command\": \"toggle_bookmark\" },\n\n\t{ \"keys\": [\"super+k\", \"super+u\"], \"command\": \"upper_case\" },\n\t{ \"keys\": [\"super+k\", \"super+l\"], \"command\": \"lower_case\" },\n\t{ \"keys\": [\"super+k\", \"super+space\"], \"command\": \"set_mark\" },\n\t{ \"keys\": [\"super+k\", \"super+a\"], \"command\": \"select_to_mark\" },\n\t{ \"keys\": [\"super+k\", \"super+w\"], \"command\": \"delete_to_mark\" },\n\t{ \"keys\": [\"super+k\", \"super+x\"], \"command\": \"swap_with_mark\" },\n\t{ \"keys\": [\"super+k\", \"super+g\"], \"command\": \"clear_bookmarks\", \"args\": {\"name\": \"mark\"} },\n\n\t{ \"keys\": [\"super+equals\"], \"command\": \"increase_font_size\" },\n\t{ \"keys\": [\"super+plus\"], \"command\": \"increase_font_size\" },\n\t{ \"keys\": [\"super+minus\"], \"command\": \"decrease_font_size\" },\n\n\t{ \"keys\": [\"ctrl+shift+w\"], \"command\": \"insert_snippet\", \"args\": { \"name\": \"Packages/XML/Snippets/long-tag.sublime-snippet\" } },\n\n\t{ \"keys\": [\"ctrl+shift+k\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Line.sublime-macro\"} },\n\n\t{ \"keys\": [\"super+alt+q\"], \"command\": \"wrap_lines\" },\n\n\t{ \"keys\": [\"super+alt+[\"], \"command\": \"fold\" },\n\t{ \"keys\": [\"super+alt+]\"], \"command\": \"unfold\" },\n\t{ \"keys\": [\"super+k\", \"super+1\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 1} },\n\t{ \"keys\": [\"super+k\", \"super+2\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 2} },\n\t{ \"keys\": [\"super+k\", \"super+3\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 3} },\n\t{ \"keys\": [\"super+k\", \"super+4\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 4} },\n\t{ \"keys\": [\"super+k\", \"super+5\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 5} },\n\t{ \"keys\": [\"super+k\", \"super+6\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 6} },\n\t{ \"keys\": [\"super+k\", \"super+7\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 7} },\n\t{ \"keys\": [\"super+k\", \"super+8\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 8} },\n\t{ \"keys\": [\"super+k\", \"super+9\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 9} },\n\t{ \"keys\": [\"super+k\", \"super+0\"], \"command\": \"unfold_all\" },\n\t{ \"keys\": [\"super+k\", \"super+j\"], \"command\": \"unfold_all\" },\n\t{ \"keys\": [\"super+k\", \"super+t\"], \"command\": \"fold_tag_attributes\" },\n\n\t{ \"keys\": [\"super+alt+o\"], \"command\": \"toggle_overwrite\" },\n\n\t{ \"keys\": [\"alt+f2\"], \"command\": \"context_menu\" },\n\n\t{ \"keys\": [\"super+alt+c\"], \"command\": \"toggle_case_sensitive\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"super+alt+r\"], \"command\": \"toggle_regex\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"super+alt+w\"], \"command\": \"toggle_whole_word\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\t{ \"keys\": [\"super+alt+a\"], \"command\": \"toggle_preserve_case\", \"context\":\n\t\t[\n\t\t\t{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n\t\t]\n\t},\n\n\t// Find panel key bindings\n\t{ \"keys\": [\"enter\"], \"command\": \"find_next\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"shift+enter\"], \"command\": \"find_prev\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"alt+enter\"], \"command\": \"find_all\", \"args\": {\"close_panel\": true},\n\t\t \"context\": [{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\n\t// Replace panel key bindings\n\t{ \"keys\": [\"enter\"], \"command\": \"find_next\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"shift+enter\"], \"command\": \"find_prev\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"alt+enter\"], \"command\": \"find_all\", \"args\": {\"close_panel\": true},\n\t\t\"context\": [{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"ctrl+alt+enter\"], \"command\": \"replace_all\", \"args\": {\"close_panel\": true},\n\t\t \"context\": [{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\n\t// Incremental find panel key bindings\n\t{ \"keys\": [\"enter\"], \"command\": \"hide_panel\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"shift+enter\"], \"command\": \"find_prev\", \"context\":\n\t\t[{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"alt+enter\"], \"command\": \"find_all\", \"args\": {\"close_panel\": true},\n\t\t\"context\": [{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\n\t// Find in Files panel key bindings\n\t{ \"keys\": [\"alt+enter\"], \"command\": \"find_all\",\n\t\t \"context\": [{\"key\": \"panel\", \"operand\": \"find_in_files\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\t{ \"keys\": [\"ctrl+alt+enter\"], \"command\": \"replace_all\",\n\t\t \"context\": [{\"key\": \"panel\", \"operand\": \"find_in_files\"}, {\"key\": \"panel_has_focus\"}]\n\t},\n\n\t{ \"keys\": [\"super+,\"], \"command\": \"edit_settings\", \"args\":\n\t\t{\n\t\t\t\"base_file\": \"${packages}/Default/Preferences.sublime-settings\",\n\t\t\t\"default\": \"// Settings in here override those in \\\"Default/Preferences.sublime-settings\\\",\\n// and are overridden in turn by syntax-specific settings.\\n{\\n\\t$0\\n}\\n\"\n\t\t}\n\t},\n\n\t{ \"keys\": [\"super+k\", \"super+y\"], \"command\": \"yank\" },\n\t{ \"keys\": [\"super+k\", \"super+k\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard EOL.sublime-macro\"} },\n\t{ \"keys\": [\"super+k\", \"super+backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard BOL.sublime-macro\"} },\n\t{ \"keys\": [\"super+k\", \"super+c\"], \"command\": \"show_at_center\" },\n\n\t// These are OS X built in commands, and don't need to be listed here, but\n\t// doing so lets them show up in the menu\n\t{ \"keys\": [\"ctrl+y\"], \"command\": \"yank\" },\n\t{ \"keys\": [\"super+backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard BOL.sublime-macro\"} },\n\t// super+delete isn't a built in command, but makes sense anyway\n\t{ \"keys\": [\"super+delete\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard EOL.sublime-macro\"} },\n\t{ \"keys\": [\"ctrl+k\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard EOL.sublime-macro\"} },\n\t{ \"keys\": [\"ctrl+l\"], \"command\": \"show_at_center\" },\n\t{ \"keys\": [\"ctrl+o\"], \"command\": \"insert_snippet\", \"args\": { \"contents\": \"$0\\n\" } },\n\t{ \"keys\": [\"ctrl+super+d\"], \"command\": \"noop\" },\n\t{ \"keys\": [\"ctrl+super+shift+d\"], \"command\": \"noop\" },\n\n\t// HTML, XML close tag\n\t{ \"keys\": [\"/\"], \"command\": \"close_tag\", \"args\": { \"insert_slash\": true }, \"context\":\n\t\t[\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"(text.html, text.xml) - string - comment\", \"match_all\": true },\n\t\t\t{ \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \".*<$\", \"match_all\": true },\n\t\t\t{ \"key\": \"setting.auto_close_tags\" }\n\t\t]\n\t}\n]\n",
					"file": "/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap",
					"file_size": -1,
					"file_write_time": -1,
					"settings":
					{
						"buffer_size": 35307,
						"line_ending": "Unix",
						"read_only": true,
						"scratch": true
					}
				},
				{
					"file": "/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
					"settings":
					{
						"buffer_size": 59,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/Users/andy.liu/Documents/itsm_notes.txt",
				"/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
				"/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap"
			],
			"find":
			{
				"height": 31.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 35307,
								"regions":
								{
								},
								"selection":
								[
									[
										35307,
										35307
									]
								],
								"settings":
								{
									"edit_settings_other_view_id": 56,
									"edit_settings_view": "base",
									"syntax": "Packages/JavaScript/JSON.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						}
					]
				},
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 1,
							"file": "/Users/andy.liu/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 59,
								"regions":
								{
								},
								"selection":
								[
									[
										59,
										59
									]
								],
								"settings":
								{
									"edit_settings_other_view_id": 55,
									"edit_settings_view": "user",
									"syntax": "Packages/JavaScript/JSON.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 31.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0 0 70 1680 957 0 0 1680 1027 ",
			"project": "",
			"replace":
			{
				"height": 58.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 1,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": false,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 20,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
